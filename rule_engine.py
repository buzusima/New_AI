"""
üß† Modern Rule Engine - Enhanced 4D AI Edition
rule_engine.py

Enhanced Features:
- ‡∏•‡∏î confidence_threshold ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏ï‡∏•‡∏≤‡∏î‡πÑ‡∏î‡πâ‡∏á‡πà‡∏≤‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô
- ‡πÄ‡∏û‡∏¥‡πà‡∏° 4D AI decision logic
- Market Order approach (‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤)
- Portfolio Balance Weight ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô
- Hybrid Entry Logic (Balance + Margin + Time + Opportunity)
- Smart Recovery Integration

** PRODUCTION READY - NO MOCK DATA **
"""

import time
import threading
from datetime import datetime, timedelta
from typing import Dict, List, Tuple, Optional, Any
from dataclasses import dataclass, field
from enum import Enum
import numpy as np
from collections import deque, defaultdict
import json
import os

# ========================================================================================
# üìä ENUMS & DATA STRUCTURES
# ========================================================================================

class TradingMode(Enum):
    """‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î"""
    CONSERVATIVE = "CONSERVATIVE"
    MODERATE = "MODERATE"  
    AGGRESSIVE = "AGGRESSIVE"
    ADAPTIVE = "ADAPTIVE"

class GridPhase(Enum):
    """‡πÄ‡∏ü‡∏™‡∏Ç‡∏≠‡∏á‡∏Å‡∏£‡∏¥‡∏î"""
    INITIALIZATION = "INITIALIZATION"
    BUILDING = "BUILDING"
    OPTIMIZATION = "OPTIMIZATION"
    RECOVERY = "RECOVERY"

class MarketSession(Enum):
    """‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô‡∏ï‡∏•‡∏≤‡∏î"""
    ASIAN = "ASIAN"
    LONDON = "LONDON"
    NEW_YORK = "NEW_YORK"
    OVERLAP = "OVERLAP"
    QUIET = "QUIET"

class EntryDecision(Enum):
    """‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡πÄ‡∏Ç‡πâ‡∏≤‡∏ï‡∏•‡∏≤‡∏î"""
    BUY_MARKET = "BUY_MARKET"
    SELL_MARKET = "SELL_MARKET"
    WAIT = "WAIT"
    ANALYZE = "ANALYZE"

@dataclass
class GridState:
    """‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏£‡∏¥‡∏î‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"""
    current_phase: GridPhase
    buy_levels: List[float] = field(default_factory=list)
    sell_levels: List[float] = field(default_factory=list)
    grid_balance_ratio: float = 0.5  # 0.0=all sell, 1.0=all buy
    grid_completeness: float = 0.0   # 0.0-1.0
    last_grid_action: datetime = field(default_factory=datetime.now)
    quality_score: float = 0.0       # ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡∏Å‡∏£‡∏¥‡∏î‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    spacing_efficiency: float = 0.0  # ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á spacing
    
    @property
    def total_orders(self) -> int:
        """‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏£‡∏ß‡∏°"""
        return len(self.buy_levels) + len(self.sell_levels)
    
    @property
    def is_balanced(self) -> bool:
        """‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏Å‡∏£‡∏¥‡∏î‡∏™‡∏°‡∏î‡∏∏‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
        return 0.3 <= self.grid_balance_ratio <= 0.7

@dataclass
class CapitalAllocation:
    """‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡∏£‡∏£‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏∏‡∏ô"""
    total_balance: float
    available_margin: float
    used_margin: float
    free_margin: float
    max_grid_allocation: float  # % ‡∏Ç‡∏≠‡∏á‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏∏‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö‡∏Å‡∏£‡∏¥‡∏î
    optimal_grid_size: int     # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
    risk_budget: float         # ‡∏á‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠
    
    @property
    def margin_usage_ratio(self) -> float:
        """‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ margin"""
        return self.used_margin / self.available_margin if self.available_margin > 0 else 0
    
    @property
    def can_expand_grid(self) -> bool:
        """‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ç‡∏¢‡∏≤‡∏¢‡∏Å‡∏£‡∏¥‡∏î‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
        return self.margin_usage_ratio < 0.7 and self.risk_budget > 0

@dataclass
class MarketContext:
    """‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡∏ï‡∏•‡∏≤‡∏î‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"""
    session: MarketSession
    volatility_level: str  # VERY_LOW, LOW, MEDIUM, HIGH, VERY_HIGH
    trend_direction: str   # UP, DOWN, SIDEWAYS
    trend_strength: float  # 0.0-1.0
    liquidity_level: str   # HIGH, MEDIUM, LOW
    spread_condition: str  # NORMAL, WIDE, VERY_WIDE
    momentum: float        # -1.0 to 1.0
    
    @property
    def is_favorable_for_grid(self) -> bool:
        """‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏™‡∏†‡∏≤‡∏û‡∏ï‡∏•‡∏≤‡∏î‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏Å‡∏£‡∏¥‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
        return (self.volatility_level in ["LOW", "MEDIUM"] and 
                self.liquidity_level in ["HIGH", "MEDIUM"] and
                self.spread_condition == "NORMAL")

@dataclass
class FourDimensionAnalysis:
    """üß† 4-Dimensional AI Analysis"""
    # Dimension 1: Position Value Analysis (30%)
    position_value_score: float = 0.0
    profit_potential: float = 0.0
    loss_magnitude: float = 0.0
    age_performance_ratio: float = 0.0
    
    # Dimension 2: Portfolio Safety (25%) 
    portfolio_safety_score: float = 0.0
    margin_efficiency: float = 0.0
    risk_contribution: float = 0.0
    safety_buffer: float = 0.0
    
    # Dimension 3: Hedge Relationships (25%)
    hedge_opportunity_score: float = 0.0
    recovery_potential: float = 0.0
    hedge_pairs_count: int = 0
    balance_improvement: float = 0.0
    
    # Dimension 4: Market Context (20%)
    market_context_score: float = 0.0
    trend_alignment: float = 0.0
    session_timing: float = 0.0
    volatility_match: float = 0.0
    
    @property
    def overall_score(self) -> float:
        """‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏°‡∏ñ‡πà‡∏ß‡∏á‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å"""
        return (
            self.position_value_score * 0.30 +
            self.portfolio_safety_score * 0.25 +
            self.hedge_opportunity_score * 0.25 +
            self.market_context_score * 0.20
        )
    
    @property
    def recommendation(self) -> str:
        """‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏à‡∏≤‡∏Å 4D Analysis"""
        if self.overall_score >= 0.8:
            return "STRONG_ENTRY"
        elif self.overall_score >= 0.6:
            return "MODERATE_ENTRY"
        elif self.overall_score >= 0.4:
            return "CAUTIOUS_ENTRY"
        elif self.overall_score >= 0.2:
            return "RECOVERY_MODE"
        else:
            return "WAIT_OPPORTUNITY"

# ========================================================================================
# üß† MODERN RULE ENGINE CLASS
# ========================================================================================

class ModernRuleEngine:
    """
    üß† Modern Rule Engine - Enhanced 4D AI Edition
    
    ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏´‡∏°‡πà:
    - 4-Dimensional Analysis System
    - Market Order Approach (‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤)
    - Hybrid Entry Logic (Multi-factor)
    - Reduced Confidence Thresholds (‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡πà‡∏≤‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô)
    - Portfolio Balance Focus
    - Smart Recovery Integration
    """
    
    def __init__(self, config: Dict, market_analyzer, order_manager, 
                 position_manager, performance_tracker):
        # Core components - REAL connections only
        self.rules_config = config
        self.market_analyzer = market_analyzer
        self.order_manager = order_manager
        self.position_manager = position_manager
        self.performance_tracker = performance_tracker
        
        # Grid state management
        self.grid_state = GridState(current_phase=GridPhase.INITIALIZATION)
        self.capital_allocation = None
        self.market_context = None
        
        # Engine state
        self.is_running = False
        self.current_mode = TradingMode.MODERATE
        self.engine_thread = None
        
        # 4D AI Analysis
        self.last_4d_analysis = None
        self.analysis_history = deque(maxlen=100)
        
        # Data tracking
        self.last_market_data = {}
        self.last_portfolio_data = {}
        self.recent_decisions = deque(maxlen=100)
        self.decision_history = []
        
        # Performance tracking - Enhanced with 4D metrics
        self.rule_performances = defaultdict(lambda: {
            "success_count": 0,
            "total_count": 0,
            "avg_confidence": 0.0,
            "avg_4d_score": 0.0,
            "last_updated": datetime.now(),
            "profit_factor": 0.0,
            "recovery_success_rate": 0.0
        })
        
        # Grid management - Enhanced
        self.last_grid_analysis_time = datetime.now()
        self.grid_analysis_interval = 30  # ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
        self.spacing_history = deque(maxlen=50)
        self.entry_opportunities = deque(maxlen=20)
        
        # Enhanced thresholds (‡∏•‡∏î‡∏•‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡πà‡∏≤‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô)
        self.enhanced_thresholds = {
            "min_entry_confidence": 0.25,  # ‡∏•‡∏î‡∏à‡∏≤‡∏Å 0.4
            "portfolio_balance_weight": 3.5,  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å 2.0
            "margin_safety_weight": 2.0,
            "recovery_priority_weight": 4.0,  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô
            "market_opportunity_weight": 1.5
        }
        
        print("üß† Enhanced 4D AI Rule Engine initialized")
    
    # ========================================================================================
    # üéÆ ENGINE CONTROL METHODS
    # ========================================================================================
    
    def start(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Rule Engine"""
        if self.is_running:
            print("‚ö†Ô∏è Rule engine already running")
            return
            
        self.is_running = True
        self.engine_thread = threading.Thread(target=self._engine_loop, daemon=True)
        self.engine_thread.start()
        print("üöÄ Enhanced 4D AI Rule Engine started")
    
    def stop(self):
        """‡∏´‡∏¢‡∏∏‡∏î Rule Engine"""
        self.is_running = False
        if self.engine_thread:
            self.engine_thread.join(timeout=5)
        print("üõë Enhanced rule engine stopped")
    
    def set_trading_mode(self, mode: TradingMode):
        """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î"""
        if isinstance(mode, str):
            mode_mapping = {
                "CONSERVATIVE": TradingMode.CONSERVATIVE,
                "MODERATE": TradingMode.MODERATE,
                "BALANCED": TradingMode.MODERATE,
                "AGGRESSIVE": TradingMode.AGGRESSIVE,
                "ADAPTIVE": TradingMode.ADAPTIVE
            }
            mode = mode_mapping.get(mode, TradingMode.MODERATE)
        
        self.current_mode = mode
        
        # ‡∏õ‡∏£‡∏±‡∏ö thresholds ‡∏ï‡∏≤‡∏° mode
        if mode == TradingMode.AGGRESSIVE:
            self.enhanced_thresholds["min_entry_confidence"] = 0.15  # ‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡πà‡∏≤‡∏¢‡∏°‡∏≤‡∏Å
            self.enhanced_thresholds["portfolio_balance_weight"] = 4.0
        elif mode == TradingMode.CONSERVATIVE:
            self.enhanced_thresholds["min_entry_confidence"] = 0.35
            self.enhanced_thresholds["portfolio_balance_weight"] = 2.5
        else:  # MODERATE/ADAPTIVE
            self.enhanced_thresholds["min_entry_confidence"] = 0.25
            self.enhanced_thresholds["portfolio_balance_weight"] = 3.5
            
        print(f"üéØ Trading mode set to: {mode.value}")
        print(f"   Entry confidence: {self.enhanced_thresholds['min_entry_confidence']}")
    
    # ========================================================================================
    # üîÑ MAIN ENGINE LOOP - ENHANCED
    # ========================================================================================
    
    def _engine_loop(self):
        """‡∏´‡∏•‡∏±‡∏Å Engine Loop - Enhanced with 4D AI"""
        print("üîÑ Enhanced 4D AI Engine loop started")
        
        while self.is_running:
            try:
                loop_start = time.time()
                
                # 1. Update market context
                self._update_market_context()
                
                # 2. Update capital allocation
                self._update_capital_allocation()
                
                # 3. üß† 4D AI Analysis - Core Feature
                four_d_analysis = self._perform_4d_analysis()
                
                # 4. Hybrid Entry Decision
                entry_decision = self._make_hybrid_entry_decision(four_d_analysis)
                
                # 5. Recovery System Check
                recovery_action = self._check_recovery_opportunities(four_d_analysis)
                
                # 6. Execute decisions
                if entry_decision != EntryDecision.WAIT:
                    self._execute_entry_decision(entry_decision, four_d_analysis)
                
                if recovery_action:
                    self._execute_recovery_action(recovery_action, four_d_analysis)
                
                # 7. Update performance tracking
                self._update_performance_tracking(four_d_analysis)
                
                # 8. Grid maintenance
                self._maintain_grid_quality()
                
                # Sleep with dynamic interval
                loop_time = time.time() - loop_start
                sleep_time = max(1.0, 3.0 - loop_time)  # ‡∏£‡∏±‡∏î‡∏Å‡∏∏‡∏°‡∏Ç‡∏∂‡πâ‡∏ô
                time.sleep(sleep_time)
                
            except Exception as e:
                print(f"‚ùå Engine loop error: {e}")
                time.sleep(5)  # Wait before retry
                
        print("üõë Enhanced engine loop stopped")
    
    # ========================================================================================
    # üß† 4D AI ANALYSIS SYSTEM
    # ========================================================================================
    
    def _perform_4d_analysis(self) -> FourDimensionAnalysis:
        """üß† ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå 4 ‡∏°‡∏¥‡∏ï‡∏¥"""
        try:
            analysis = FourDimensionAnalysis()
            
            # Dimension 1: Position Value Analysis (30%)
            analysis.position_value_score = self._analyze_position_values()
            
            # Dimension 2: Portfolio Safety (25%)
            analysis.portfolio_safety_score = self._analyze_portfolio_safety()
            
            # Dimension 3: Hedge Relationships (25%)
            analysis.hedge_opportunity_score = self._analyze_hedge_opportunities()
            
            # Dimension 4: Market Context (20%)
            analysis.market_context_score = self._analyze_market_context()
            
            # Store for history
            self.last_4d_analysis = analysis
            self.analysis_history.append(analysis)
            
            return analysis
            
        except Exception as e:
            print(f"‚ùå 4D Analysis error: {e}")
            return FourDimensionAnalysis()  # Return empty analysis
    
    def _analyze_position_values(self) -> float:
        """Dimension 1: ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå (30%)"""
        try:
            positions = self.position_manager.get_active_positions()
            if not positions:
                return 0.5  # Neutral if no positions
            
            total_score = 0.0
            total_weight = 0.0
            
            for pos in positions:
                # Individual profit/loss assessment
                profit_score = min(max((pos.get('profit', 0) + 100) / 200, 0), 1)
                
                # Age vs performance correlation
                age_hours = (datetime.now() - pos.get('time', datetime.now())).total_seconds() / 3600
                age_penalty = max(0, 1 - (age_hours / 24))  # ‡∏•‡∏î‡∏•‡∏á‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤
                
                # Growth potential
                volume = pos.get('volume', 0.01)
                growth_potential = min(volume / 0.1, 1.0)  # ‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÉ‡∏´‡∏ç‡πà = potential ‡∏™‡∏π‡∏á
                
                # Combined score
                position_score = (profit_score * 0.5 + age_penalty * 0.3 + growth_potential * 0.2)
                position_weight = volume
                
                total_score += position_score * position_weight
                total_weight += position_weight
            
            return total_score / total_weight if total_weight > 0 else 0.5
            
        except Exception as e:
            print(f"‚ùå Position value analysis error: {e}")
            return 0.5
    
    def _analyze_portfolio_safety(self) -> float:
        """Dimension 2: ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ Portfolio (25%)"""
        try:
            if not self.capital_allocation:
                return 0.5
            
            # Margin efficiency calculation
            margin_score = 1 - self.capital_allocation.margin_usage_ratio
            margin_score = max(0, min(1, margin_score))
            
            # Risk distribution
            positions = self.position_manager.get_active_positions()
            buy_count = sum(1 for p in positions if p.get('type') == 0)  # BUY
            sell_count = sum(1 for p in positions if p.get('type') == 1)  # SELL
            total_count = len(positions)
            
            if total_count > 0:
                balance_ratio = min(buy_count, sell_count) / max(buy_count, sell_count, 1)
                balance_score = balance_ratio
            else:
                balance_score = 1.0  # Perfect if no positions
            
            # Emergency preparedness
            free_margin_ratio = self.capital_allocation.free_margin / self.capital_allocation.available_margin
            emergency_score = min(max(free_margin_ratio * 2, 0), 1)  # ‡∏î‡∏µ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ free margin ‡∏°‡∏≤‡∏Å
            
            # Combined safety score
            safety_score = (margin_score * 0.4 + balance_score * 0.4 + emergency_score * 0.2)
            
            return max(0, min(1, safety_score))
            
        except Exception as e:
            print(f"‚ùå Portfolio safety analysis error: {e}")
            return 0.5
    
    def _analyze_hedge_opportunities(self) -> float:
        """Dimension 3: ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÇ‡∏≠‡∏Å‡∏≤‡∏™ Hedge (25%)"""
        try:
            positions = self.position_manager.get_active_positions()
            if len(positions) < 2:
                return 0.3  # ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏ï‡πà‡∏≥‡∏ñ‡πâ‡∏≤‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ô‡πâ‡∏≠‡∏¢
            
            hedge_score = 0.0
            hedge_pairs = 0
            recovery_opportunities = 0
            
            # ‡∏´‡∏≤ hedge pairs
            buy_positions = [p for p in positions if p.get('type') == 0]
            sell_positions = [p for p in positions if p.get('type') == 1]
            
            for buy_pos in buy_positions:
                buy_profit = buy_pos.get('profit', 0)
                if buy_profit <= 0:  # ‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô
                    # ‡∏´‡∏≤ sell positions ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡πÑ‡∏£
                    for sell_pos in sell_positions:
                        sell_profit = sell_pos.get('profit', 0)
                        if sell_profit > 0:
                            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì hedge potential
                            profit_ratio = abs(sell_profit / buy_profit) if buy_profit != 0 else 0
                            if 0.5 <= profit_ratio <= 2.0:  # Suitable hedge ratio
                                hedge_pairs += 1
                                recovery_opportunities += 1
            
            # Cross-position synergy analysis
            total_profit = sum(p.get('profit', 0) for p in positions)
            positive_positions = sum(1 for p in positions if p.get('profit', 0) > 0)
            negative_positions = len(positions) - positive_positions
            
            if negative_positions > 0:
                synergy_score = positive_positions / len(positions)
                hedge_score = (hedge_pairs / max(negative_positions, 1)) * 0.6 + synergy_score * 0.4
            else:
                hedge_score = 1.0  # Perfect if all profitable
            
            return max(0, min(1, hedge_score))
            
        except Exception as e:
            print(f"‚ùå Hedge analysis error: {e}")
            return 0.5
    
    def _analyze_market_context(self) -> float:
        """Dimension 4: ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡∏ï‡∏•‡∏≤‡∏î (20%)"""
        try:
            if not self.market_context:
                return 0.5
            
            # Trend alignment assessment
            trend_score = 0.5  # Default neutral
            if self.market_context.trend_direction == "SIDEWAYS":
                trend_score = 0.8  # ‡∏î‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏¥‡∏î
            elif self.market_context.trend_strength < 0.3:
                trend_score = 0.7  # ‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå‡∏≠‡πà‡∏≠‡∏ô = ‡∏î‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏¥‡∏î
            else:
                trend_score = 0.3  # ‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå‡πÅ‡∏£‡∏á = ‡∏¢‡∏≤‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏¥‡∏î
            
            # Session timing optimization
            session_score = 0.5
            if self.market_context.session in [MarketSession.LONDON, MarketSession.OVERLAP]:
                session_score = 0.8  # ‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô‡∏î‡∏µ
            elif self.market_context.session == MarketSession.QUIET:
                session_score = 0.3  # ‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô‡πÄ‡∏á‡∏µ‡∏¢‡∏ö
            
            # Volatility exposure management
            volatility_score = 0.5
            if self.market_context.volatility_level == "MEDIUM":
                volatility_score = 0.8  # ‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏¥‡∏î
            elif self.market_context.volatility_level in ["LOW", "HIGH"]:
                volatility_score = 0.6  # ‡∏û‡∏≠‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ
            else:  # VERY_LOW or VERY_HIGH
                volatility_score = 0.2  # ‡πÑ‡∏°‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞
            
            # Liquidity condition analysis
            liquidity_score = 0.8 if self.market_context.liquidity_level == "HIGH" else 0.5
            
            # Combined context score
            context_score = (
                trend_score * 0.35 +
                session_score * 0.25 +
                volatility_score * 0.25 +
                liquidity_score * 0.15
            )
            
            return max(0, min(1, context_score))
            
        except Exception as e:
            print(f"‚ùå Market context analysis error: {e}")
            return 0.5
    
    # ========================================================================================
    # üöÄ HYBRID ENTRY LOGIC - ENHANCED
    # ========================================================================================
    
    def _make_hybrid_entry_decision(self, four_d_analysis: FourDimensionAnalysis) -> EntryDecision:
        """üöÄ Hybrid Entry Decision - Multi-factor Analysis"""
        try:
            # ‡πÉ‡∏ä‡πâ 4D Analysis ‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏±‡∏Å
            base_confidence = four_d_analysis.overall_score
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏° factors ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
            hybrid_factors = self._calculate_hybrid_factors()
            
            # ‡∏£‡∏ß‡∏° confidence
            total_confidence = (
                base_confidence * 0.60 +
                hybrid_factors['balance_factor'] * 0.20 +
                hybrid_factors['margin_factor'] * 0.10 +
                hybrid_factors['opportunity_factor'] * 0.10
            )
            
            # ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏î‡πâ‡∏ß‡∏¢ Enhanced Threshold (‡∏•‡∏î‡∏•‡∏á)
            min_confidence = self.enhanced_thresholds["min_entry_confidence"]
            
            if total_confidence < min_confidence:
                return EntryDecision.WAIT
            
            # ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á - Portfolio Balance First
            direction = self._decide_entry_direction(four_d_analysis, hybrid_factors)
            
            reasoning = (f"4D Score: {four_d_analysis.overall_score:.2f}, "
                        f"Total Confidence: {total_confidence:.2f}, "
                        f"Balance Factor: {hybrid_factors['balance_factor']:.2f}")
            
            print(f"üìä Hybrid Entry Decision: {direction.value}")
            print(f"   Reasoning: {reasoning}")
            
            return direction
            
        except Exception as e:
            print(f"‚ùå Hybrid entry decision error: {e}")
            return EntryDecision.WAIT
    
    def _calculate_hybrid_factors(self) -> Dict[str, float]:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì factors ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Hybrid Logic"""
        try:
            factors = {
                'balance_factor': 0.5,
                'margin_factor': 0.5,
                'opportunity_factor': 0.5,
                'time_factor': 0.5
            }
            
            # Balance Factor - ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏°‡∏≤‡∏Å
            positions = self.position_manager.get_active_positions()
            if positions:
                buy_count = sum(1 for p in positions if p.get('type') == 0)
                sell_count = sum(1 for p in positions if p.get('type') == 1)
                total_count = len(positions)
                
                if total_count > 0:
                    buy_ratio = buy_count / total_count
                    # ‡∏™‡∏°‡∏î‡∏∏‡∏• = ‡∏î‡∏µ, ‡πÑ‡∏°‡πà‡∏™‡∏°‡∏î‡∏∏‡∏• = ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏°‡∏î‡∏∏‡∏•
                    imbalance = abs(buy_ratio - 0.5) * 2  # 0-1
                    factors['balance_factor'] = 0.3 + (imbalance * 0.7)  # ‡∏¢‡∏¥‡πà‡∏á‡πÑ‡∏°‡πà‡∏™‡∏°‡∏î‡∏∏‡∏• ‡∏¢‡∏¥‡πà‡∏á‡∏î‡∏µ
            
            # Margin Factor
            if self.capital_allocation:
                margin_usage = self.capital_allocation.margin_usage_ratio
                factors['margin_factor'] = max(0, 1 - margin_usage)  # ‡∏¢‡∏¥‡πà‡∏á‡πÉ‡∏ä‡πâ‡∏ô‡πâ‡∏≠‡∏¢ ‡∏¢‡∏¥‡πà‡∏á‡∏î‡∏µ
            
            # Opportunity Factor - ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞
            current_hour = datetime.now().hour
            if 8 <= current_hour <= 16:  # London + NY
                factors['opportunity_factor'] = 0.8
            elif 1 <= current_hour <= 8:  # Asian
                factors['opportunity_factor'] = 0.6
            else:  # Quiet hours
                factors['opportunity_factor'] = 0.4
            
            # Time Factor - ‡∏´‡πâ‡∏≤‡∏°‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
            time_since_last = (datetime.now() - self.grid_state.last_grid_action).total_seconds()
            if time_since_last > 300:  # 5 ‡∏ô‡∏≤‡∏ó‡∏µ‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥
                factors['time_factor'] = min(time_since_last / 1800, 1.0)  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô‡∏ñ‡∏∂‡∏á 30 ‡∏ô‡∏≤‡∏ó‡∏µ
            
            return factors
            
        except Exception as e:
            print(f"‚ùå Calculate hybrid factors error: {e}")
            return {'balance_factor': 0.5, 'margin_factor': 0.5, 
                   'opportunity_factor': 0.5, 'time_factor': 0.5}
    
    def _decide_entry_direction(self, four_d_analysis: FourDimensionAnalysis, 
                              hybrid_factors: Dict[str, float]) -> EntryDecision:
        """‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤ - Portfolio Balance First"""
        try:
            positions = self.position_manager.get_active_positions()
            
            # Portfolio Balance Analysis - Primary Factor
            buy_count = sum(1 for p in positions if p.get('type') == 0)
            sell_count = sum(1 for p in positions if p.get('type') == 1)
            total_count = len(positions)
            
            # Default direction based on balance
            if total_count == 0:
                # ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå - ‡∏î‡∏π‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå
                if self.market_context and self.market_context.trend_direction == "UP":
                    preferred_direction = EntryDecision.BUY_MARKET
                elif self.market_context and self.market_context.trend_direction == "DOWN":
                    preferred_direction = EntryDecision.SELL_MARKET
                else:
                    # Random but smart
                    preferred_direction = EntryDecision.BUY_MARKET if four_d_analysis.overall_score > 0.5 else EntryDecision.SELL_MARKET
            else:
                # ‡∏°‡∏µ‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÅ‡∏•‡πâ‡∏ß - ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏°‡∏î‡∏∏‡∏•
                buy_ratio = buy_count / total_count
                
                if buy_ratio < 0.3:  # BUY ‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
                    preferred_direction = EntryDecision.BUY_MARKET
                elif buy_ratio > 0.7:  # BUY ‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
                    preferred_direction = EntryDecision.SELL_MARKET
                else:
                    # ‡∏™‡∏°‡∏î‡∏∏‡∏•‡πÅ‡∏•‡πâ‡∏ß - ‡∏î‡∏π‡πÇ‡∏≠‡∏Å‡∏≤‡∏™
                    if four_d_analysis.hedge_opportunity_score > 0.6:
                        # ‡∏°‡∏µ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™ hedge ‡∏î‡∏µ
                        loss_positions = [p for p in positions if p.get('profit', 0) < 0]
                        if loss_positions:
                            # ‡∏´‡∏≤‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ hedge
                            loss_types = [p.get('type') for p in loss_positions]
                            if 0 in loss_types:  # ‡∏°‡∏µ BUY ‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô
                                preferred_direction = EntryDecision.SELL_MARKET
                            else:  # ‡∏°‡∏µ SELL ‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô
                                preferred_direction = EntryDecision.BUY_MARKET
                        else:
                            preferred_direction = EntryDecision.BUY_MARKET  # Default
                    else:
                        preferred_direction = EntryDecision.BUY_MARKET  # Default
            
            return preferred_direction
            
        except Exception as e:
            print(f"‚ùå Entry direction decision error: {e}")
            return EntryDecision.WAIT
    
    # ========================================================================================
    # üéØ SMART RECOVERY SYSTEM
    # ========================================================================================
    
    def _check_recovery_opportunities(self, four_d_analysis: FourDimensionAnalysis) -> Optional[Dict]:
        """üéØ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏Å‡∏≤‡∏£ Recovery"""
        try:
            if four_d_analysis.hedge_opportunity_score < 0.4:
                return None  # ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™ recovery ‡∏î‡∏µ
            
            positions = self.position_manager.get_active_positions()
            loss_positions = [p for p in positions if p.get('profit', 0) < -10]  # ‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ $10
            
            if not loss_positions:
                return None
            
            # ‡∏´‡∏≤‡πÇ‡∏≠‡∏Å‡∏≤‡∏™ recovery ‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
            best_recovery = None
            best_score = 0
            
            for loss_pos in loss_positions:
                recovery_score = self._calculate_recovery_score(loss_pos, positions, four_d_analysis)
                
                if recovery_score > best_score and recovery_score > 0.6:
                    best_score = recovery_score
                    best_recovery = {
                        'action': 'HEDGE_RECOVERY',
                        'target_position': loss_pos,
                        'recovery_score': recovery_score,
                        'reasoning': f"Recovery opportunity for {loss_pos.get('symbol')} with score {recovery_score:.2f}"
                    }
            
            return best_recovery
            
        except Exception as e:
            print(f"‚ùå Recovery check error: {e}")
            return None
    
    def _calculate_recovery_score(self, loss_position: Dict, all_positions: List[Dict], 
                                 four_d_analysis: FourDimensionAnalysis) -> float:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÇ‡∏≠‡∏Å‡∏≤‡∏™ Recovery"""
        try:
            loss_amount = abs(loss_position.get('profit', 0))
            loss_volume = loss_position.get('volume', 0.01)
            
            # ‡∏´‡∏≤‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏Å‡∏≥‡πÑ‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
            profit_positions = [p for p in all_positions if p.get('profit', 0) > 0]
            
            if not profit_positions:
                return 0.0
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì recovery potential
            total_profit = sum(p.get('profit', 0) for p in profit_positions)
            recovery_ratio = min(total_profit / loss_amount, 1.0) if loss_amount > 0 else 0
            
            # Age factor - ‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏Å‡πà‡∏≤ = ‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏™‡∏π‡∏á
            age_hours = (datetime.now() - loss_position.get('time', datetime.now())).total_seconds() / 3600
            age_factor = min(age_hours / 24, 1.0)  # ‡∏°‡∏≤‡∏Å‡∏™‡∏∏‡∏î 1 ‡∏ß‡∏±‡∏ô
            
            # Volume factor - ‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÉ‡∏´‡∏ç‡πà = ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏°‡∏≤‡∏Å
            volume_factor = min(loss_volume / 0.1, 1.0)
            
            # Market condition factor
            market_factor = four_d_analysis.market_context_score
            
            # Combined recovery score
            recovery_score = (
                recovery_ratio * 0.40 +
                age_factor * 0.25 +
                volume_factor * 0.20 +
                market_factor * 0.15
            )
            
            return max(0, min(1, recovery_score))
            
        except Exception as e:
            print(f"‚ùå Recovery score calculation error: {e}")
            return 0.0
    
    # ========================================================================================
    # ‚ö° EXECUTION METHODS - MARKET ORDER FOCUS
    # ========================================================================================
    
    def _execute_entry_decision(self, decision: EntryDecision, four_d_analysis: FourDimensionAnalysis):
        """‚ö° Execute Market Order Entry - No Waiting"""
        try:
            if decision == EntryDecision.WAIT:
                return
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì lot size ‡πÅ‡∏ö‡∏ö dynamic
            lot_size = self._calculate_dynamic_lot_size(four_d_analysis)
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á OrderRequest ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Market Order
            from order_manager import OrderRequest, OrderType, OrderReason
            
            order_request = OrderRequest(
                order_type=OrderType.MARKET_BUY if decision == EntryDecision.BUY_MARKET else OrderType.MARKET_SELL,
                volume=lot_size,
                price=0.0,  # Market price
                reason=OrderReason.PORTFOLIO_BALANCE,
                confidence=four_d_analysis.overall_score,
                reasoning=f"4D AI Entry: {four_d_analysis.recommendation}, Balance Focus",
                max_slippage=20  # ‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö slippage ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö market order
            )
            
            # Execute market order
            result = self.order_manager.place_market_order(order_request)
            
            if result.success:
                print(f"‚úÖ Market {decision.value} executed: {lot_size} lots")
                print(f"   4D Score: {four_d_analysis.overall_score:.3f}")
                print(f"   Reasoning: {order_request.reasoning}")
                
                # Update grid state
                self.grid_state.last_grid_action = datetime.now()
                
                # Track performance
                self._track_decision_performance(decision, four_d_analysis, True)
            else:
                print(f"‚ùå Market order failed: {result.message}")
                self._track_decision_performance(decision, four_d_analysis, False)
                
        except Exception as e:
            print(f"‚ùå Execute entry decision error: {e}")
    
    def _execute_recovery_action(self, recovery_action: Dict, four_d_analysis: FourDimensionAnalysis):
        """‚ö° Execute Smart Recovery Action"""
        try:
            target_position = recovery_action['target_position']
            
            # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå recovery strategy
            recovery_strategy = self._plan_recovery_strategy(target_position, four_d_analysis)
            
            if recovery_strategy['action'] == 'HEDGE_ENTRY':
                # ‡∏ß‡∏≤‡∏á hedge order ‡πÅ‡∏ö‡∏ö market
                hedge_direction = recovery_strategy['direction']
                hedge_volume = recovery_strategy['volume']
                
                from order_manager import OrderRequest, OrderType, OrderReason
                
                hedge_order = OrderRequest(
                    order_type=OrderType.MARKET_BUY if hedge_direction == "BUY" else OrderType.MARKET_SELL,
                    volume=hedge_volume,
                    price=0.0,  # Market price
                    reason=OrderReason.RISK_MANAGEMENT,
                    confidence=recovery_action['recovery_score'],
                    reasoning=f"Smart Recovery for position {target_position.get('ticket', 'unknown')}",
                    max_slippage=30
                )
                
                result = self.order_manager.place_market_order(hedge_order)
                
                if result.success:
                    print(f"üéØ Recovery hedge executed: {hedge_volume} {hedge_direction}")
                    print(f"   Target: Position {target_position.get('ticket', 'unknown')}")
                else:
                    print(f"‚ùå Recovery hedge failed: {result.message}")
            
        except Exception as e:
            print(f"‚ùå Execute recovery action error: {e}")
    
    def _plan_recovery_strategy(self, target_position: Dict, four_d_analysis: FourDimensionAnalysis) -> Dict:
        """‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô Recovery Strategy"""
        try:
            loss_amount = abs(target_position.get('profit', 0))
            loss_type = target_position.get('type', 0)  # 0=BUY, 1=SELL
            loss_volume = target_position.get('volume', 0.01)
            
            # ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á hedge (‡∏ï‡∏£‡∏á‡∏Ç‡πâ‡∏≤‡∏°)
            hedge_direction = "SELL" if loss_type == 0 else "BUY"
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì hedge volume - Dynamic sizing
            hedge_volume = self._calculate_hedge_volume(loss_amount, loss_volume, four_d_analysis)
            
            return {
                'action': 'HEDGE_ENTRY',
                'direction': hedge_direction,
                'volume': hedge_volume,
                'target_recovery': loss_amount * 0.8,  # ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ recover 80%
                'confidence': four_d_analysis.hedge_opportunity_score
            }
            
        except Exception as e:
            print(f"‚ùå Plan recovery strategy error: {e}")
            return {'action': 'WAIT'}
    
    def _calculate_hedge_volume(self, loss_amount: float, loss_volume: float, 
                               four_d_analysis: FourDimensionAnalysis) -> float:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Volume ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Hedge"""
        try:
            # Base volume = ‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏Å‡∏±‡∏ö loss volume
            base_volume = loss_volume
            
            # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏° 4D Analysis
            if four_d_analysis.portfolio_safety_score > 0.7:
                volume_multiplier = 1.2  # ‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ = ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏î‡πâ
            elif four_d_analysis.portfolio_safety_score < 0.4:
                volume_multiplier = 0.8  # ‡∏≠‡∏±‡∏ô‡∏ï‡∏£‡∏≤‡∏¢ = ‡∏•‡∏î‡∏•‡∏á
            else:
                volume_multiplier = 1.0
            
            # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏° margin available
            if self.capital_allocation and self.capital_allocation.can_expand_grid:
                volume_multiplier *= 1.1
            
            hedge_volume = base_volume * volume_multiplier
            
            # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥‡πÅ‡∏•‡∏∞‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
            hedge_volume = max(0.01, min(hedge_volume, 0.1))
            
            return round(hedge_volume, 2)
            
        except Exception as e:
            print(f"‚ùå Calculate hedge volume error: {e}")
            return 0.01
    
    def _calculate_dynamic_lot_size(self, four_d_analysis: FourDimensionAnalysis) -> float:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Lot Size ‡πÅ‡∏ö‡∏ö Dynamic ‡∏ï‡∏≤‡∏° 4D Analysis"""
        try:
            # Base lot size
            base_lot = 0.01
            
            # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏° 4D Score
            score_multiplier = 1 + (four_d_analysis.overall_score - 0.5)  # 0.5-1.5
            
            # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏° Portfolio Safety
            if four_d_analysis.portfolio_safety_score > 0.8:
                safety_multiplier = 1.3  # ‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ = ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏î‡πâ
            elif four_d_analysis.portfolio_safety_score < 0.3:
                safety_multiplier = 0.7  # ‡∏≠‡∏±‡∏ô‡∏ï‡∏£‡∏≤‡∏¢ = ‡∏•‡∏î‡∏•‡∏á
            else:
                safety_multiplier = 1.0
            
            # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏° Market Context
            if four_d_analysis.market_context_score > 0.7:
                market_multiplier = 1.2  # ‡∏ï‡∏•‡∏≤‡∏î‡∏î‡∏µ = ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏î‡πâ
            else:
                market_multiplier = 0.9
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì lot ‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
            final_lot = base_lot * score_multiplier * safety_multiplier * market_multiplier
            
            # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï
            final_lot = max(0.01, min(final_lot, 0.05))  # ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ 0.01, ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 0.05
            
            return round(final_lot, 2)
            
        except Exception as e:
            print(f"‚ùå Dynamic lot size calculation error: {e}")
            return 0.01
    
    # ========================================================================================
    # üìä CONTEXT UPDATE METHODS
    # ========================================================================================
    
    def _update_market_context(self):
        """‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡∏ï‡∏•‡∏≤‡∏î"""
        try:
            if not self.market_analyzer:
                return
            
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏•‡∏≤‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
            market_data = self.market_analyzer.get_comprehensive_analysis()
            
            if market_data:
                self.last_market_data = market_data
                
                # ‡∏™‡∏£‡πâ‡∏≤‡∏á MarketContext
                self.market_context = MarketContext(
                    session=self._detect_market_session(),
                    volatility_level=market_data.get('volatility', {}).get('level', 'MEDIUM'),
                    trend_direction=market_data.get('trend', {}).get('direction', 'SIDEWAYS'),
                    trend_strength=market_data.get('trend', {}).get('strength', 0.5),
                    liquidity_level=market_data.get('liquidity', {}).get('level', 'MEDIUM'),
                    spread_condition=market_data.get('spread', {}).get('condition', 'NORMAL'),
                    momentum=market_data.get('momentum', {}).get('value', 0.0)
                )
                
        except Exception as e:
            print(f"‚ùå Update market context error: {e}")
    
    def _update_capital_allocation(self):
        """‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡∏£‡∏£‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏∏‡∏ô"""
        try:
            if not self.position_manager:
                return
            
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• account
            account_info = self.position_manager.get_account_info()
            
            if account_info:
                self.capital_allocation = CapitalAllocation(
                    total_balance=account_info.get('balance', 0),
                    available_margin=account_info.get('margin', 0),
                    used_margin=account_info.get('margin_used', 0),
                    free_margin=account_info.get('margin_free', 0),
                    max_grid_allocation=0.8,  # ‡πÉ‡∏ä‡πâ 80% ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏¥‡∏î
                    optimal_grid_size=self._calculate_optimal_grid_size(account_info),
                    risk_budget=self._calculate_risk_budget(account_info)
                )
                
        except Exception as e:
            print(f"‚ùå Update capital allocation error: {e}")
    
    def _detect_market_session(self) -> MarketSession:
        """‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô‡∏ï‡∏•‡∏≤‡∏î‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"""
        try:
            current_hour = datetime.now().hour
            
            # GMT+0 based sessions
            if 0 <= current_hour <= 3:
                return MarketSession.ASIAN
            elif 7 <= current_hour <= 11:
                return MarketSession.LONDON  
            elif 13 <= current_hour <= 17:
                return MarketSession.NEW_YORK
            elif 11 <= current_hour <= 13:
                return MarketSession.OVERLAP  # London-NY overlap
            else:
                return MarketSession.QUIET
                
        except Exception as e:
            print(f"‚ùå Detect market session error: {e}")
            return MarketSession.QUIET
    
    def _calculate_optimal_grid_size(self, account_info: Dict) -> int:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡∏ô‡∏≤‡∏î‡∏Å‡∏£‡∏¥‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°"""
        try:
            free_margin = account_info.get('margin_free', 0)
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ margin ‡∏ï‡πà‡∏≠‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå
            margin_per_order = 50  # Estimate $50 margin per 0.01 lot
            max_orders = int(free_margin / margin_per_order * 0.7)  # ‡πÉ‡∏ä‡πâ 70% ‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ
            
            # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï
            optimal_size = max(5, min(max_orders, 25))
            
            return optimal_size
            
        except Exception as e:
            print(f"‚ùå Calculate optimal grid size error: {e}")
            return 10  # Default
    
    def _calculate_risk_budget(self, account_info: Dict) -> float:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏á‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠"""
        try:
            balance = account_info.get('balance', 0)
            used_margin = account_info.get('margin_used', 0)
            
            # Risk budget = % ‡∏Ç‡∏≠‡∏á balance ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ
            max_risk_percent = 0.05  # 5% ‡∏Ç‡∏≠‡∏á balance
            max_risk_amount = balance * max_risk_percent
            
            # ‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡∏à‡∏≤‡∏Å margin ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ)
            current_risk_estimate = used_margin * 0.1  # Assume 10% of margin as risk
            
            remaining_risk_budget = max(0, max_risk_amount - current_risk_estimate)
            
            return remaining_risk_budget
            
        except Exception as e:
            print(f"‚ùå Calculate risk budget error: {e}")
            return 0.0
    
    # ========================================================================================
    # üìà PERFORMANCE & MAINTENANCE
    # ========================================================================================
    
    def _track_decision_performance(self, decision: EntryDecision, 
                                  four_d_analysis: FourDimensionAnalysis, success: bool):
        """‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à"""
        try:
            decision_record = {
                'timestamp': datetime.now(),
                'decision': decision.value,
                'four_d_score': four_d_analysis.overall_score,
                'success': success,
                'market_context': self.market_context.__dict__ if self.market_context else {},
                'hybrid_factors': self._calculate_hybrid_factors()
            }
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô history
            self.decision_history.append(decision_record)
            self.recent_decisions.append(decision_record)
            
            # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï rule performance
            rule_key = f"4D_HYBRID_{decision.value}"
            perf = self.rule_performances[rule_key]
            
            perf['total_count'] += 1
            if success:
                perf['success_count'] += 1
            
            perf['avg_confidence'] = (
                (perf['avg_confidence'] * (perf['total_count'] - 1) + 
                 four_d_analysis.overall_score) / perf['total_count']
            )
            
            perf['avg_4d_score'] = (
                (perf.get('avg_4d_score', 0) * (perf['total_count'] - 1) + 
                 four_d_analysis.overall_score) / perf['total_count']
            )
            
            perf['last_updated'] = datetime.now()
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì success rate
            success_rate = perf['success_count'] / perf['total_count']
            print(f"üìä {rule_key} Performance: {success_rate:.1%} ({perf['success_count']}/{perf['total_count']})")
            
        except Exception as e:
            print(f"‚ùå Track decision performance error: {e}")
    
    def _update_performance_tracking(self, four_d_analysis: FourDimensionAnalysis):
        """‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û"""
        try:
            if not self.performance_tracker:
                return
            
            # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 4D Analysis ‡πÉ‡∏´‡πâ performance tracker
            performance_data = {
                'timestamp': datetime.now(),
                'four_d_overall_score': four_d_analysis.overall_score,
                'position_value_score': four_d_analysis.position_value_score,
                'portfolio_safety_score': four_d_analysis.portfolio_safety_score,
                'hedge_opportunity_score': four_d_analysis.hedge_opportunity_score,
                'market_context_score': four_d_analysis.market_context_score,
                'recommendation': four_d_analysis.recommendation,
                'grid_phase': self.grid_state.current_phase.value,
                'trading_mode': self.current_mode.value
            }
            
            self.performance_tracker.log_4d_analysis(performance_data)
            
        except Exception as e:
            print(f"‚ùå Update performance tracking error: {e}")
    
    def _maintain_grid_quality(self):
        """‡∏ö‡∏≥‡∏£‡∏∏‡∏á‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏Å‡∏£‡∏¥‡∏î"""
        try:
            # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏Ñ‡∏ß‡∏£‡∏ó‡∏≥ grid maintenance ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            time_since_last = (datetime.now() - self.last_grid_analysis_time).total_seconds()
            
            if time_since_last < self.grid_analysis_interval:
                return
            
            # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏Å‡∏£‡∏¥‡∏î‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            grid_quality = self._analyze_grid_quality()
            
            # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï grid state
            self.grid_state.quality_score = grid_quality['overall_score']
            self.grid_state.spacing_efficiency = grid_quality['spacing_efficiency']
            
            # ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏Å‡∏≤‡∏£‡∏ö‡∏≥‡∏£‡∏∏‡∏á‡∏£‡∏±‡∏Å‡∏©‡∏≤
            if grid_quality['overall_score'] < 0.4:
                print(f"‚ö†Ô∏è Grid quality low: {grid_quality['overall_score']:.2f}")
                self._suggest_grid_improvements(grid_quality)
            
            self.last_grid_analysis_time = datetime.now()
            
        except Exception as e:
            print(f"‚ùå Grid maintenance error: {e}")
    
    def _analyze_grid_quality(self) -> Dict:
        """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏Å‡∏£‡∏¥‡∏î‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"""
        try:
            positions = self.position_manager.get_active_positions()
            
            if not positions:
                return {
                    'overall_score': 0.5,
                    'spacing_efficiency': 0.5,
                    'balance_score': 1.0,
                    'coverage_score': 0.0
                }
            
            # Balance score
            buy_count = sum(1 for p in positions if p.get('type') == 0)
            sell_count = len(positions) - buy_count
            balance_score = 1 - abs(buy_count - sell_count) / len(positions)
            
            # Spacing efficiency
            if len(positions) > 1:
                prices = [p.get('price_open', 0) for p in positions]
                prices.sort()
                spacings = [prices[i+1] - prices[i] for i in range(len(prices)-1)]
                avg_spacing = np.mean(spacings) if spacings else 0
                spacing_std = np.std(spacings) if len(spacings) > 1 else 0
                spacing_efficiency = max(0, 1 - (spacing_std / avg_spacing)) if avg_spacing > 0 else 0.5
            else:
                spacing_efficiency = 1.0
            
            # Coverage score - ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
            price_range = max(prices) - min(prices) if len(prices) > 1 else 0
            target_range = 500  # 500 points coverage target
            coverage_score = min(price_range / target_range, 1.0)
            
            # Overall score
            overall_score = (balance_score * 0.4 + spacing_efficiency * 0.4 + coverage_score * 0.2)
            
            return {
                'overall_score': overall_score,
                'spacing_efficiency': spacing_efficiency,
                'balance_score': balance_score,
                'coverage_score': coverage_score
            }
            
        except Exception as e:
            print(f"‚ùå Grid quality analysis error: {e}")
            return {'overall_score': 0.5, 'spacing_efficiency': 0.5, 
                   'balance_score': 0.5, 'coverage_score': 0.5}
    
    def _suggest_grid_improvements(self, quality_analysis: Dict):
        """‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Å‡∏£‡∏¥‡∏î"""
        try:
            suggestions = []
            
            if quality_analysis['balance_score'] < 0.6:
                suggestions.append("Portfolio needs rebalancing - consider opposite direction entries")
            
            if quality_analysis['spacing_efficiency'] < 0.5:
                suggestions.append("Spacing too irregular - consider spacing optimization")
            
            if quality_analysis['coverage_score'] < 0.3:
                suggestions.append("Grid coverage too narrow - consider expansion")
            
            if suggestions:
                print("üí° Grid Improvement Suggestions:")
                for suggestion in suggestions:
                    print(f"   ‚Ä¢ {suggestion}")
                    
        except Exception as e:
            print(f"‚ùå Grid improvement suggestions error: {e}")
    
    # ========================================================================================
    # üìä STATUS & REPORTING METHODS
    # ========================================================================================
    
    def get_engine_status(self) -> Dict:
        """‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Engine ‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î"""
        try:
            status = {
                'is_running': self.is_running,
                'trading_mode': self.current_mode.value,
                'grid_phase': self.grid_state.current_phase.value,
                'last_4d_analysis': self.last_4d_analysis.__dict__ if self.last_4d_analysis else {},
                'grid_quality': self.grid_state.quality_score,
                'total_decisions': len(self.decision_history),
                'recent_decisions_count': len(self.recent_decisions),
                'capital_allocation': self.capital_allocation.__dict__ if self.capital_allocation else {},
                'market_context': self.market_context.__dict__ if self.market_context else {},
                'performance_summary': self._get_performance_summary()
            }
            
            return status
            
        except Exception as e:
            print(f"‚ùå Get engine status error: {e}")
            return {'is_running': False, 'error': str(e)}
    
    def _get_performance_summary(self) -> Dict:
        """‡∏™‡∏£‡∏∏‡∏õ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡πÅ‡∏ö‡∏ö‡∏¢‡πà‡∏≠"""
        try:
            if not self.rule_performances:
                return {"message": "No performance data available"}
            
            summary = {}
            total_decisions = 0
            total_successes = 0
            
            for rule_name, perf in self.rule_performances.items():
                rule_total = perf.get("total_count", 0)
                rule_success = perf.get("success_count", 0)
                rule_4d_score = perf.get("avg_4d_score", 0)
                
                if rule_total > 0:
                    summary[rule_name] = {
                        "success_rate": rule_success / rule_total,
                        "total_decisions": rule_total,
                        "avg_4d_score": rule_4d_score
                    }
                    
                total_decisions += rule_total
                total_successes += rule_success
            
            # Overall summary
            overall_success_rate = total_successes / total_decisions if total_decisions > 0 else 0
            
            summary["overall"] = {
                "success_rate": overall_success_rate,
                "total_decisions": total_decisions,
                "engine_uptime": (datetime.now() - self.grid_state.last_grid_action).total_seconds() / 3600
            }
            
            return summary
            
        except Exception as e:
            print(f"‚ùå Performance summary error: {e}")
            return {"error": str(e)}
    
    # ========================================================================================
    # üíæ PERSISTENCE METHODS
    # ========================================================================================
    
    def save_performance_data(self, filepath: str = "performance_data_4d.json"):
        """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û Enhanced 4D"""
        try:
            performance_data = {
                "engine_version": "4D_AI_Enhanced",
                "last_saved": datetime.now().isoformat(),
                "rule_performances": dict(self.rule_performances),
                "total_decisions": len(self.decision_history),
                "grid_state": {
                    "phase": self.grid_state.current_phase.value,
                    "quality_score": self.grid_state.quality_score,
                    "balance_ratio": self.grid_state.grid_balance_ratio,
                    "total_orders": self.grid_state.total_orders
                },
                "enhanced_thresholds": self.enhanced_thresholds,
                "recent_4d_analyses": [
                    {
                        "timestamp": datetime.now().isoformat(),
                        "overall_score": analysis.overall_score,
                        "recommendation": analysis.recommendation,
                        "position_value": analysis.position_value_score,
                        "portfolio_safety": analysis.portfolio_safety_score,
                        "hedge_opportunity": analysis.hedge_opportunity_score,
                        "market_context": analysis.market_context_score
                    }
                    for analysis in list(self.analysis_history)[-10:]  # ‡πÄ‡∏Å‡πá‡∏ö 10 ‡∏≠‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
                ]
            }
            
            with open(filepath, 'w', encoding='utf-8') as f:
                json.dump(performance_data, f, indent=2, ensure_ascii=False, default=str)
            
            print(f"üíæ Enhanced 4D performance data saved to {filepath}")
            
        except Exception as e:
            print(f"‚ùå Save performance data error: {e}")
    
    def load_performance_data(self, filepath: str = "performance_data_4d.json"):
        """‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û Enhanced 4D"""
        try:
            if not os.path.exists(filepath):
                print(f"‚ö†Ô∏è Performance data file not found: {filepath}")
                return
            
            with open(filepath, 'r', encoding='utf-8') as f:
                performance_data = json.load(f)
            
            # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û
            if "rule_performances" in performance_data:
                self.rule_performances = performance_data["rule_performances"]
                
                # ‡πÅ‡∏õ‡∏•‡∏á datetime strings ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô datetime objects
                for rule_name, perf in self.rule_performances.items():
                    if "last_updated" in perf and isinstance(perf["last_updated"], str):
                        perf["last_updated"] = datetime.fromisoformat(perf["last_updated"])
            
            # ‡πÇ‡∏´‡∏•‡∏î enhanced thresholds
            if "enhanced_thresholds" in performance_data:
                self.enhanced_thresholds.update(performance_data["enhanced_thresholds"])
            
            # ‡πÇ‡∏´‡∏•‡∏î grid state
            if "grid_state" in performance_data:
                grid_data = performance_data["grid_state"]
                self.grid_state.quality_score = grid_data.get("quality_score", 0.0)
                self.grid_state.grid_balance_ratio = grid_data.get("balance_ratio", 0.5)
            
            print(f"üìÅ Enhanced 4D performance data loaded from {filepath}")
            print(f"   Loaded {len(self.rule_performances)} rule performances")
            
        except Exception as e:
            print(f"‚ùå Load performance data error: {e}")
    
    # ========================================================================================
    # üîß UTILITY & HELPER METHODS
    # ========================================================================================
    
    def get_4d_analysis_summary(self) -> str:
        """‡∏™‡∏£‡∏∏‡∏õ 4D Analysis ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î"""
        try:
            if not self.last_4d_analysis:
                return "No 4D analysis available"
            
            analysis = self.last_4d_analysis
            
            summary = f"""
üß† 4D AI Analysis Summary:
‚îú‚îÄ‚îÄ Overall Score: {analysis.overall_score:.3f} ({analysis.recommendation})
‚îú‚îÄ‚îÄ üìä Position Value: {analysis.position_value_score:.3f} (30% weight)
‚îú‚îÄ‚îÄ üõ°Ô∏è Portfolio Safety: {analysis.portfolio_safety_score:.3f} (25% weight)  
‚îú‚îÄ‚îÄ üéØ Hedge Opportunity: {analysis.hedge_opportunity_score:.3f} (25% weight)
‚îî‚îÄ‚îÄ üåç Market Context: {analysis.market_context_score:.3f} (20% weight)

üéÆ Trading Context:
‚îú‚îÄ‚îÄ Mode: {self.current_mode.value}
‚îú‚îÄ‚îÄ Grid Phase: {self.grid_state.current_phase.value}
‚îú‚îÄ‚îÄ Grid Quality: {self.grid_state.quality_score:.3f}
‚îî‚îÄ‚îÄ Balance Ratio: {self.grid_state.grid_balance_ratio:.3f}
            """.strip()
            
            return summary
            
        except Exception as e:
            print(f"‚ùå 4D analysis summary error: {e}")
            return "Error generating 4D analysis summary"
    
    def get_recent_decisions_summary(self, count: int = 5) -> List[Dict]:
        """‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î"""
        try:
            recent = list(self.recent_decisions)[-count:] if self.recent_decisions else []
            
            summary = []
            for decision in recent:
                summary.append({
                    'time': decision['timestamp'].strftime('%H:%M:%S'),
                    'decision': decision['decision'],
                    '4d_score': f"{decision['four_d_score']:.3f}",
                    'success': "‚úÖ" if decision['success'] else "‚ùå",
                    'context': decision.get('market_context', {}).get('session', 'UNKNOWN')
                })
            
            return summary
            
        except Exception as e:
            print(f"‚ùå Recent decisions summary error: {e}")
            return []
    
    def reset_performance_data(self):
        """‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        try:
            self.rule_performances = defaultdict(lambda: {
                "success_count": 0,
                "total_count": 0,
                "avg_confidence": 0.0,
                "avg_4d_score": 0.0,
                "last_updated": datetime.now(),
                "profit_factor": 0.0,
                "recovery_success_rate": 0.0
            })
            
            self.decision_history = []
            self.recent_decisions = deque(maxlen=100)
            self.analysis_history = deque(maxlen=100)
            
            print("üîÑ Enhanced 4D performance data reset complete")
            
        except Exception as e:
            print(f"‚ùå Reset performance data error: {e}")
    
    def adjust_thresholds_from_performance(self):
        """‡∏õ‡∏£‡∏±‡∏ö thresholds ‡∏à‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û - Adaptive Learning"""
        try:
            if len(self.decision_history) < 20:
                return  # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏û‡∏≠
            
            # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î 20 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á
            recent_performance = self.decision_history[-20:]
            success_rate = sum(1 for d in recent_performance if d['success']) / len(recent_performance)
            avg_4d_score = np.mean([d['four_d_score'] for d in recent_performance])
            
            # ‡∏õ‡∏£‡∏±‡∏ö min_entry_confidence
            if success_rate > 0.7 and avg_4d_score > 0.4:
                # ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏î‡∏µ = ‡∏•‡∏î threshold (‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡πà‡∏≤‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô)
                adjustment = -0.02
            elif success_rate < 0.4:
                # ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡πÅ‡∏¢‡πà = ‡πÄ‡∏û‡∏¥‡πà‡∏° threshold (‡πÄ‡∏Ç‡πâ‡∏≤‡∏¢‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô)
                adjustment = 0.02
            else:
                adjustment = 0
            
            old_threshold = self.enhanced_thresholds["min_entry_confidence"]
            new_threshold = max(0.1, min(0.5, old_threshold + adjustment))
            
            if abs(adjustment) > 0:
                self.enhanced_thresholds["min_entry_confidence"] = new_threshold
                print(f"üîß Threshold adjusted: {old_threshold:.3f} ‚Üí {new_threshold:.3f}")
                print(f"   Based on success rate: {success_rate:.1%}")
            
        except Exception as e:
            print(f"‚ùå Threshold adjustment error: {e}")
    
    # ========================================================================================
    # üéØ ENHANCED API METHODS
    # ========================================================================================
    
    def force_entry_opportunity(self, direction: str = "AUTO") -> bool:
        """‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡πÄ‡∏Ç‡πâ‡∏≤‡∏ï‡∏•‡∏≤‡∏î - Enhanced"""
        try:
            print(f"üéØ Force entry opportunity: {direction}")
            
            # ‡∏ó‡∏≥ 4D Analysis ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
            four_d_analysis = self._perform_4d_analysis()
            
            # ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á
            if direction == "AUTO":
                entry_decision = self._decide_entry_direction(four_d_analysis, self._calculate_hybrid_factors())
            elif direction == "BUY":
                entry_decision = EntryDecision.BUY_MARKET
            elif direction == "SELL":
                entry_decision = EntryDecision.SELL_MARKET
            else:
                print(f"‚ùå Invalid direction: {direction}")
                return False
            
            # Execute ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
            if entry_decision != EntryDecision.WAIT:
                self._execute_entry_decision(entry_decision, four_d_analysis)
                return True
            else:
                print("‚ö†Ô∏è 4D Analysis recommends WAIT")
                return False
                
        except Exception as e:
            print(f"‚ùå Force entry opportunity error: {e}")
            return False
    
    def force_recovery_scan(self) -> bool:
        """‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏™‡πÅ‡∏Å‡∏ô‡∏´‡∏≤‡πÇ‡∏≠‡∏Å‡∏≤‡∏™ Recovery"""
        try:
            print("üîç Force recovery scan...")
            
            four_d_analysis = self._perform_4d_analysis()
            recovery_action = self._check_recovery_opportunities(four_d_analysis)
            
            if recovery_action:
                self._execute_recovery_action(recovery_action, four_d_analysis)
                print(f"‚úÖ Recovery action executed: {recovery_action['action']}")
                return True
            else:
                print("‚ÑπÔ∏è No recovery opportunities found")
                return False
                
        except Exception as e:
            print(f"‚ùå Force recovery scan error: {e}")
            return False
    
    def get_portfolio_recommendations(self) -> List[str]:
        """‡∏î‡∏∂‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Portfolio"""
        try:
            if not self.last_4d_analysis:
                return ["Perform 4D analysis first"]
            
            recommendations = []
            analysis = self.last_4d_analysis
            
            # Position Value recommendations
            if analysis.position_value_score < 0.4:
                recommendations.append("Consider closing underperforming old positions")
            
            # Portfolio Safety recommendations
            if analysis.portfolio_safety_score < 0.3:
                recommendations.append("CRITICAL: Reduce margin usage immediately")
            elif analysis.portfolio_safety_score < 0.5:
                recommendations.append("Warning: Monitor margin usage closely")
            
            # Hedge Opportunity recommendations
            if analysis.hedge_opportunity_score > 0.7:
                recommendations.append("Excellent hedge opportunities available - consider recovery trades")
            elif analysis.hedge_opportunity_score > 0.5:
                recommendations.append("Moderate hedge opportunities - selective recovery possible")
            
            # Market Context recommendations
            if analysis.market_context_score > 0.7:
                recommendations.append("Favorable market conditions - good time for expansion")
            elif analysis.market_context_score < 0.3:
                recommendations.append("Unfavorable market - focus on risk management")
            
            # Overall recommendations
            if analysis.overall_score > 0.8:
                recommendations.append("üöÄ STRONG CONDITIONS: Aggressive expansion recommended")
            elif analysis.overall_score < 0.3:
                recommendations.append("‚ö†Ô∏è CAUTION MODE: Focus on recovery and risk reduction")
            
            return recommendations if recommendations else ["Portfolio in good condition"]
            
        except Exception as e:
            print(f"‚ùå Portfolio recommendations error: {e}")
            return ["Error generating recommendations"]