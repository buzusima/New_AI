"""
üß† Modern Rule Engine - Complete Flexible System
rule_engine.py
‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Modern AI Gold Grid Trading System - ‡∏£‡∏∞‡∏ö‡∏ö Rule-based ‡∏ó‡∏µ‡πà‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö Dynamic Spacing, Adaptive Grid Size, ‡πÅ‡∏•‡∏∞ Smart Resource Management
** PRODUCTION READY - NO MOCK DATA **
"""

import time
import threading
from datetime import datetime, timedelta
from typing import Dict, List, Tuple, Optional, Any, Union
from dataclasses import dataclass, field
from enum import Enum, auto
import json
import numpy as np
from collections import deque, defaultdict
import statistics
import math

# ========================================================================================
# üéØ ENUMS ‡πÅ‡∏•‡∏∞ DATA CLASSES
# ========================================================================================

class TradingDecision(Enum):
    """‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡πÄ‡∏ó‡∏£‡∏î"""
    BUY = "BUY"
    SELL = "SELL"
    CLOSE_PROFITABLE = "CLOSE_PROFITABLE"
    CLOSE_LOSING = "CLOSE_LOSING"
    CLOSE_ALL = "CLOSE_ALL"
    HOLD = "HOLD"
    EMERGENCY_STOP = "EMERGENCY_STOP"

class TradingMode(Enum):
    """‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î"""
    CONSERVATIVE = "CONSERVATIVE"
    MODERATE = "MODERATE" 
    AGGRESSIVE = "AGGRESSIVE"
    ADAPTIVE = "ADAPTIVE"
    EMERGENCY = "EMERGENCY"

class GridPhase(Enum):
    """‡πÄ‡∏ü‡∏™‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏¥‡∏î - 4 Phase System"""
    INITIALIZATION = "INITIALIZATION"    # Phase 1: ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
    MONITORING = "MONITORING"            # Phase 2: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡∏î‡∏∏‡∏•
    REBALANCING = "REBALANCING"          # Phase 3: ‡∏õ‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏î‡∏∏‡∏•‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞
    MAINTENANCE = "MAINTENANCE"          # Phase 4: ‡∏ö‡∏≥‡∏£‡∏∏‡∏á‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏Å‡∏£‡∏¥‡∏î

class MarketSession(Enum):
    """‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô‡∏ï‡∏•‡∏≤‡∏î"""
    ASIAN = "ASIAN"
    LONDON = "LONDON"
    NEW_YORK = "NEW_YORK"
    OVERLAP = "OVERLAP"
    QUIET = "QUIET"

class RiskLevel(Enum):
    """‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á"""
    VERY_LOW = "VERY_LOW"
    LOW = "LOW"
    MEDIUM = "MEDIUM"
    HIGH = "HIGH"
    CRITICAL = "CRITICAL"

@dataclass
class RuleResult:
    """‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å Rule"""
    rule_name: str
    decision: TradingDecision
    confidence: float  # 0.0 - 1.0
    reasoning: str
    supporting_data: Dict = field(default_factory=dict)
    weight: float = 1.0
    execution_priority: int = 1  # 1=highest, 5=lowest
    market_context: Dict = field(default_factory=dict)
    risk_assessment: Dict = field(default_factory=dict)
    
    @property
    def weighted_confidence(self) -> float:
        """‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô‡∏ñ‡πà‡∏ß‡∏á‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å"""
        return self.confidence * self.weight

@dataclass
class GridState:
    """‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á Grid ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"""
    current_phase: GridPhase
    buy_levels: List[float] = field(default_factory=list)
    sell_levels: List[float] = field(default_factory=list)
    missing_buy_slots: List[float] = field(default_factory=list)
    missing_sell_slots: List[float] = field(default_factory=list)
    grid_balance_ratio: float = 0.5  # 0.0=all sell, 1.0=all buy
    grid_completeness: float = 0.0   # 0.0-1.0
    last_grid_action: datetime = field(default_factory=datetime.now)
    quality_score: float = 0.0       # ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡∏Å‡∏£‡∏¥‡∏î‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    spacing_efficiency: float = 0.0  # ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á spacing
    
    @property
    def total_orders(self) -> int:
        """‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏£‡∏ß‡∏°"""
        return len(self.buy_levels) + len(self.sell_levels)
    
    @property
    def is_balanced(self) -> bool:
        """‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏Å‡∏£‡∏¥‡∏î‡∏™‡∏°‡∏î‡∏∏‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
        return 0.3 <= self.grid_balance_ratio <= 0.7

@dataclass
class CapitalAllocation:
    """‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡∏£‡∏£‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏∏‡∏ô"""
    total_balance: float
    available_margin: float
    used_margin: float
    free_margin: float
    max_grid_allocation: float  # % ‡∏Ç‡∏≠‡∏á‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏∏‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö‡∏Å‡∏£‡∏¥‡∏î
    optimal_grid_size: int     # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
    risk_budget: float         # ‡∏á‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠
    
    @property
    def margin_usage_ratio(self) -> float:
        """‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ margin"""
        return self.used_margin / self.available_margin if self.available_margin > 0 else 0
    
    @property
    def can_expand_grid(self) -> bool:
        """‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ç‡∏¢‡∏≤‡∏¢‡∏Å‡∏£‡∏¥‡∏î‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
        return self.margin_usage_ratio < 0.7 and self.risk_budget > 0

@dataclass
class MarketContext:
    """‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡∏ï‡∏•‡∏≤‡∏î‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"""
    session: MarketSession
    volatility_level: str  # VERY_LOW, LOW, MEDIUM, HIGH, VERY_HIGH
    trend_direction: str   # UP, DOWN, SIDEWAYS
    trend_strength: float  # 0.0-1.0
    liquidity_level: str   # HIGH, MEDIUM, LOW
    spread_condition: str  # NORMAL, WIDE, VERY_WIDE
    momentum: float        # -1.0 to 1.0
    
    @property
    def is_favorable_for_grid(self) -> bool:
        """‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏™‡∏†‡∏≤‡∏û‡∏ï‡∏•‡∏≤‡∏î‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏Å‡∏£‡∏¥‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
        return (self.volatility_level in ["LOW", "MEDIUM"] and 
                self.liquidity_level in ["HIGH", "MEDIUM"] and
                self.spread_condition == "NORMAL")

# ========================================================================================
# üß† MODERN RULE ENGINE CLASS
# ========================================================================================

class ModernRuleEngine:
    """
    üß† Modern Rule Engine - Flexible & Adaptive Edition
    
    ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏´‡∏°‡πà:
    - 4-Phase Grid Management System
    - Dynamic Spacing ‡∏ï‡∏≤‡∏° Volatility  
    - Adaptive Grid Size ‡∏ï‡∏≤‡∏°‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏∏‡∏ô
    - Smart Resource Allocation
    - Context-Aware Decision Making
    - Flexible Balance Management
    - Quality-Driven Grid Building
    ** NO STOP LOSS - FOCUS ON PROFIT & RECOVERY **
    """
    
    def __init__(self, config: Dict, market_analyzer, order_manager, 
                 position_manager, performance_tracker):
        # Core components - REAL connections only
        self.rules_config = config
        self.market_analyzer = market_analyzer
        self.order_manager = order_manager
        self.position_manager = position_manager
        self.performance_tracker = performance_tracker
        
        # Grid state management
        self.grid_state = GridState(current_phase=GridPhase.INITIALIZATION)
        self.capital_allocation = None
        self.market_context = None
        
        # Engine state
        self.is_running = False
        self.current_mode = TradingMode.MODERATE
        self.engine_thread = None
        
        # Data tracking
        self.last_market_data = {}
        self.last_portfolio_data = {}
        self.recent_decisions = deque(maxlen=100)
        self.decision_history = []
        
        # Performance tracking
        self.rule_performances = defaultdict(lambda: {
            "success_count": 0,
            "total_count": 0,
            "avg_confidence": 0.0,
            "last_updated": datetime.now()
        })
        
        # Grid management
        self.last_grid_analysis_time = datetime.now()
        self.grid_analysis_interval = 30  # ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
        self.spacing_history = deque(maxlen=50)
        
        print("üß† Modern Rule Engine initialized with Flexible Grid System")
    
    # ========================================================================================
    # üéÆ ENGINE CONTROL METHODS
    # ========================================================================================
    
    def start(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Rule Engine"""
        if self.is_running:
            print("‚ö†Ô∏è Rule engine already running")
            return
            
        self.is_running = True
        self.engine_thread = threading.Thread(target=self._engine_loop, daemon=True)
        self.engine_thread.start()
        print("üöÄ Flexible Rule Engine started")
    
    def stop(self):
        """‡∏´‡∏¢‡∏∏‡∏î Rule Engine"""
        self.is_running = False
        if self.engine_thread:
            self.engine_thread.join(timeout=5)
        print("üõë Rule engine stopped")
    
    def set_trading_mode(self, mode: TradingMode):
        """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î"""
        self.current_mode = mode
        print(f"üéØ Trading mode set to: {mode.value}")
    
    # ========================================================================================
    # üîÑ MAIN ENGINE LOOP  
    # ========================================================================================
    
    def _engine_loop(self):
        """Main engine loop - ‡∏•‡∏π‡∏õ‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á"""
        while self.is_running:
            try:
                # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏•‡∏≤‡∏î‡πÅ‡∏•‡∏∞ portfolio
                self._update_market_and_portfolio_data()
                
                # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡∏ï‡∏•‡∏≤‡∏î‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô  
                self._analyze_market_context()
                
                # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡∏£‡∏£‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏∏‡∏ô
                self._calculate_capital_allocation()
                
                # ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏ï‡∏≤‡∏° Rule-based system
                decision_result = self._execute_rule_based_decision()
                
                if decision_result:
                    # ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à
                    self._execute_trading_decision(decision_result)
                    
                    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à
                    self.decision_history.append(decision_result)
                    self.recent_decisions.append(decision_result)
                
                # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á rules
                self._update_rule_performances()
                
                # Adaptive learning (‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á)
                if self.current_mode == TradingMode.ADAPTIVE:
                    self._adaptive_learning_update()
                
                # ‡∏´‡∏¢‡∏∏‡∏î‡∏û‡∏±‡∏Å‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏£‡∏≠‡∏ö
                time.sleep(5)  # 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏ï‡πà‡∏≠‡∏£‡∏≠‡∏ö
                
            except Exception as e:
                print(f"‚ùå Rule engine error: {e}")
                time.sleep(10)  # ‡∏û‡∏±‡∏Å‡∏ô‡∏≤‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
    
    def _update_market_and_portfolio_data(self):
        """‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏•‡∏≤‡∏î‡πÅ‡∏•‡∏∞ portfolio"""
        try:
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏•‡∏≤‡∏î‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô
            self.last_market_data = self.market_analyzer.get_comprehensive_analysis()
            
            # ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ portfolio
            self.last_portfolio_data = self.position_manager.get_portfolio_status()
            
        except Exception as e:
            print(f"‚ùå Data update error: {e}")
    
    def _analyze_market_context(self):
        """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡∏ï‡∏•‡∏≤‡∏î‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"""
        try:
            market_data = self.last_market_data
            
            # ‡∏£‡∏∞‡∏ö‡∏∏ market session
            current_hour = datetime.now().hour
            if 1 <= current_hour <= 7:
                session = MarketSession.ASIAN
            elif 8 <= current_hour <= 12:
                session = MarketSession.LONDON
            elif 13 <= current_hour <= 17:
                session = MarketSession.OVERLAP
            elif 18 <= current_hour <= 22:
                session = MarketSession.NEW_YORK
            else:
                session = MarketSession.QUIET
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á market context
            self.market_context = MarketContext(
                session=session,
                volatility_level=market_data.get("volatility_level", "MEDIUM"),
                trend_direction=market_data.get("trend_direction", "SIDEWAYS"),
                trend_strength=market_data.get("trend_strength", 0.5),
                liquidity_level=market_data.get("liquidity_level", "MEDIUM"),
                spread_condition=market_data.get("spread_condition", "NORMAL"),
                momentum=market_data.get("momentum", 0.0)
            )
            
        except Exception as e:
            print(f"‚ùå Market context analysis error: {e}")
    
    def _calculate_capital_allocation(self):
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡∏£‡∏£‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏∏‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô"""
        try:
            portfolio_data = self.last_portfolio_data
            
            # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏∏‡∏ô
            balance = portfolio_data.get("balance", 10000)
            equity = portfolio_data.get("equity", balance)
            margin = portfolio_data.get("margin", 0)
            free_margin = portfolio_data.get("free_margin", balance)
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì optimal grid size ‡∏ï‡∏≤‡∏°‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏∏‡∏ô
            if balance < 1000:
                optimal_size = max(2, int(balance / 200))  # ‡πÄ‡∏á‡∏¥‡∏ô‡∏ô‡πâ‡∏≠‡∏¢ ‡∏Å‡∏£‡∏¥‡∏î‡∏ô‡πâ‡∏≠‡∏¢
                max_allocation = 0.3  # ‡πÉ‡∏ä‡πâ‡πÅ‡∏Ñ‡πà 30%
            elif balance < 5000:
                optimal_size = max(4, int(balance / 400))  # ‡πÄ‡∏á‡∏¥‡∏ô‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á
                max_allocation = 0.5  # ‡πÉ‡∏ä‡πâ 50%
            elif balance < 20000:
                optimal_size = max(6, int(balance / 800))  # ‡πÄ‡∏á‡∏¥‡∏ô‡∏û‡∏≠‡πÉ‡∏ä‡πâ
                max_allocation = 0.6  # ‡πÉ‡∏ä‡πâ 60%
            else:
                optimal_size = max(8, min(15, int(balance / 1500)))  # ‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏¢‡∏≠‡∏∞ ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡∏¥‡∏ô 15
                max_allocation = 0.7  # ‡πÉ‡∏ä‡πâ 70%
            
            # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏° market condition
            if self.market_context and self.market_context.volatility_level == "HIGH":
                optimal_size = max(3, int(optimal_size * 0.7))  # ‡∏•‡∏î‡∏Å‡∏£‡∏¥‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠ volatile
                max_allocation *= 0.8
            elif self.market_context and self.market_context.volatility_level == "VERY_LOW":
                optimal_size = min(20, int(optimal_size * 1.3))  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏£‡∏¥‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ï‡∏•‡∏≤‡∏î‡πÄ‡∏á‡∏µ‡∏¢‡∏ö
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á capital allocation
            self.capital_allocation = CapitalAllocation(
                total_balance=balance,
                available_margin=free_margin,
                used_margin=margin,
                free_margin=free_margin,
                max_grid_allocation=max_allocation,
                optimal_grid_size=optimal_size,
                risk_budget=free_margin * 0.1  # 10% ‡∏Ç‡∏≠‡∏á free margin
            )
            
        except Exception as e:
            print(f"‚ùå Capital allocation error: {e}")
    
    # ========================================================================================
    # üéØ MAIN DECISION MAKING SYSTEM
    # ========================================================================================
    
    def _execute_rule_based_decision(self) -> Optional[RuleResult]:
        """
        ‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏ï‡∏≤‡∏° Rules - ‡∏´‡∏±‡∏ß‡πÉ‡∏à‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö
        
        Returns:
            RuleResult ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£, None ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£
        """
        try:
            # ‡πÄ‡∏Å‡πá‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å rules
            rule_results = []
            
            # ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏ï‡πà‡∏•‡∏∞ rule
            for rule_name, rule_config in self.rules_config.get("rules", {}).items():
                if not rule_config.get("enabled", True):
                    continue
                
                rule_result = self._execute_individual_rule(rule_name, rule_config)
                if rule_result:
                    rule_results.append(rule_result)
            
            if not rule_results:
                return None
            
            # ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏î‡πâ‡∏ß‡∏¢‡∏£‡∏∞‡∏ö‡∏ö‡∏ñ‡πà‡∏ß‡∏á‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å
            final_decision = self._make_weighted_decision(rule_results)
            
            return final_decision
            
        except Exception as e:
            print(f"‚ùå Rule execution error: {e}")
            return None
    
    def _execute_individual_rule(self, rule_name: str, rule_config: Dict) -> Optional[RuleResult]:
        """
        ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£ rule ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡∏±‡∏ß
        
        Args:
            rule_name: ‡∏ä‡∏∑‡πà‡∏≠ rule
            rule_config: ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ rule
            
        Returns:
            RuleResult ‡∏ñ‡πâ‡∏≤ rule trigger, None ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà
        """
        try:
            confidence_threshold = rule_config.get("confidence_threshold", 0.6)
            weight = rule_config.get("weight", 1.0)
            
            # ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£ rule logic ‡πÄ‡∏â‡∏û‡∏≤‡∏∞
            if rule_name == "grid_expansion":
                return self._rule_grid_expansion(rule_config, weight)
            elif rule_name == "portfolio_balance":
                return self._rule_portfolio_balance(rule_config, weight)
            elif rule_name == "trend_following":
                return self._rule_trend_following(rule_config, weight)
            elif rule_name == "mean_reversion":
                return self._rule_mean_reversion(rule_config, weight)
            elif rule_name == "support_resistance":
                return self._rule_support_resistance(rule_config, weight)
            elif rule_name == "volatility_breakout":
                return self._rule_volatility_breakout(rule_config, weight)
            else:
                print(f"‚ùå Unknown rule: {rule_name}")
                return None
                
        except Exception as e:
            print(f"‚ùå Rule {rule_name} execution error: {e}")
            return None
    
    # ========================================================================================
    # üèóÔ∏è MODERN GRID EXPANSION RULE - 4 PHASE SYSTEM
    # ========================================================================================
    
    def _rule_grid_expansion(self, config: Dict, weight: float) -> Optional[RuleResult]:
        """
        üèóÔ∏è Modern Grid Expansion - 4 Phase Flexible System
        
        Phase 1: Initialization (‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö)
        Phase 2: Monitoring (‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡∏î‡∏∏‡∏•)  
        Phase 3: Rebalancing (‡∏õ‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏î‡∏∏‡∏•‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞)
        Phase 4: Maintenance (‡∏ö‡∏≥‡∏£‡∏∏‡∏á‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏Å‡∏£‡∏¥‡∏î)
        """
        try:
            print("üîç === MODERN GRID EXPANSION ANALYSIS ===")
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
            current_price = self.last_market_data.get("current_price", 0)
            if current_price == 0:
                print("‚ùå No current price available")
                return None
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏∏‡∏ô
            if not self.capital_allocation or not self.capital_allocation.can_expand_grid:
                print("üí∞ Insufficient capital for grid expansion")
                return None
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì dynamic parameters
            dynamic_params = self._calculate_dynamic_grid_parameters()
            
            # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏£‡∏¥‡∏î‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            grid_analysis = self._analyze_current_grid_state(current_price, dynamic_params)
            
            # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó grid state
            self._update_grid_state(grid_analysis, dynamic_params)
            
            # ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏ï‡∏≤‡∏° Phase ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            decision = self._execute_grid_phase_logic(grid_analysis, dynamic_params, weight)
            
            return decision
            
        except Exception as e:
            print(f"‚ùå Grid expansion error: {e}")
            return None
    
    def _calculate_dynamic_grid_parameters(self) -> Dict:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏Å‡∏£‡∏¥‡∏î‡πÅ‡∏ö‡∏ö Dynamic - ‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô‡∏ï‡∏≤‡∏°‡∏™‡∏†‡∏≤‡∏û‡∏ï‡∏•‡∏≤‡∏î"""
        try:
            market_data = self.last_market_data
            
            # Base parameters
            base_spacing = 100  # points
            base_grid_size = 5  # ‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ï‡πà‡∏≠‡∏ù‡∏±‡πà‡∏á
            
            # === DYNAMIC SPACING ‡∏ï‡∏≤‡∏° VOLATILITY ===
            volatility_factor = market_data.get("volatility_factor", 1.0)
            
            if volatility_factor < 0.5:  # ‡∏ï‡∏•‡∏≤‡∏î‡πÄ‡∏á‡∏µ‡∏¢‡∏ö‡∏°‡∏≤‡∏Å
                spacing_multiplier = 0.7  # ‡∏Å‡∏£‡∏¥‡∏î‡∏´‡∏ô‡∏≤‡∏Ç‡∏∂‡πâ‡∏ô
                risk_multiplier = 1.2     # ‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡πÑ‡∏î‡πâ‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô
            elif volatility_factor < 0.8:  # ‡∏ï‡∏•‡∏≤‡∏î‡πÄ‡∏á‡∏µ‡∏¢‡∏ö
                spacing_multiplier = 0.85
                risk_multiplier = 1.1
            elif volatility_factor > 2.0:  # ‡∏ï‡∏•‡∏≤‡∏î‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô‡∏°‡∏≤‡∏Å
                spacing_multiplier = 1.8  # ‡∏Å‡∏£‡∏¥‡∏î‡πÄ‡∏ö‡∏≤‡∏•‡∏á
                risk_multiplier = 0.6     # ‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á
            elif volatility_factor > 1.5:  # ‡∏ï‡∏•‡∏≤‡∏î‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô
                spacing_multiplier = 1.4
                risk_multiplier = 0.8
            else:  # ‡∏ï‡∏•‡∏≤‡∏î‡∏õ‡∏Å‡∏ï‡∏¥
                spacing_multiplier = 1.0
                risk_multiplier = 1.0
            
            # === ADAPTIVE GRID SIZE ‡∏ï‡∏≤‡∏°‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏∏‡∏ô ===
            optimal_size = self.capital_allocation.optimal_grid_size
            
            # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏° market session
            if self.market_context:
                if self.market_context.session == MarketSession.OVERLAP:
                    optimal_size = min(optimal_size + 2, 15)  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏Ñ‡∏∂‡∏Å‡∏Ñ‡∏±‡∏Å
                elif self.market_context.session == MarketSession.QUIET:
                    optimal_size = max(optimal_size - 2, 3)   # ‡∏•‡∏î‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏á‡∏µ‡∏¢‡∏ö
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì spacing ‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
            dynamic_spacing = int(base_spacing * spacing_multiplier)
            dynamic_spacing = max(50, min(300, dynamic_spacing))  # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÑ‡∏ß‡πâ 50-300 points
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥
            min_distance = max(30, int(dynamic_spacing * 0.4))
            
            # ‡πÄ‡∏Å‡πá‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥ spacing
            self.spacing_history.append(dynamic_spacing)
            
            params = {
                "dynamic_spacing": dynamic_spacing,
                "optimal_grid_size": optimal_size,
                "min_distance_points": min_distance,
                "spacing_multiplier": spacing_multiplier,
                "risk_multiplier": risk_multiplier,
                "volatility_factor": volatility_factor,
                "point_value": getattr(self.order_manager, 'point_value', 0.01)
            }
            
            print(f"üìä Dynamic Grid Parameters:")
            print(f"   Volatility Factor: {volatility_factor:.2f}")
            print(f"   Dynamic Spacing: {dynamic_spacing} points (base: {base_spacing})")
            print(f"   Optimal Grid Size: {optimal_size} orders per side")
            print(f"   Min Distance: {min_distance} points")
            print(f"   Market Session: {self.market_context.session.value if self.market_context else 'UNKNOWN'}")
            
            return params
            
        except Exception as e:
            print(f"‚ùå Dynamic parameters calculation error: {e}")
            return {
                "dynamic_spacing": 100,
                "optimal_grid_size": 5,
                "min_distance_points": 50,
                "spacing_multiplier": 1.0,
                "risk_multiplier": 1.0,
                "volatility_factor": 1.0,
                "point_value": 0.01
            }
    
    def _analyze_current_grid_state(self, current_price: float, params: Dict) -> Dict:
        """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏£‡∏¥‡∏î‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î"""
        try:
            print("üó∫Ô∏è === GRID STATE ANALYSIS ===")
            
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å MT5
            positions = []
            pending_orders = []
            
            if self.position_manager:
                self.position_manager.update_positions()
                positions = list(self.position_manager.active_positions.values())
            
            if self.order_manager:
                pending_orders = self.order_manager.get_pending_orders()
            
            # === ‡∏™‡∏£‡πâ‡∏≤‡∏á Grid Map ===
            buy_levels = []
            sell_levels = []
            
            # ‡∏à‡∏≤‡∏Å positions (‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà fill ‡πÅ‡∏•‡πâ‡∏ß)
            for pos in positions:
                price = round(pos.open_price, 2)
                if pos.type.value == "BUY":
                    buy_levels.append(price)
                elif pos.type.value == "SELL":
                    sell_levels.append(price)
            
            # ‡∏à‡∏≤‡∏Å pending orders (‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏≠‡∏¢‡∏π‡πà)
            for order in pending_orders:
                order_type = order.get("type", "")
                price = round(order.get("price", 0), 2)
                if price > 0:
                    if "BUY" in order_type:
                        buy_levels.append(price)
                    elif "SELL" in order_type:
                        sell_levels.append(price)
            
            # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö
            buy_levels = sorted(set(buy_levels), reverse=True)  # ‡∏™‡∏π‡∏á‡πÑ‡∏õ‡∏ï‡πà‡∏≥
            sell_levels = sorted(set(sell_levels))             # ‡∏ï‡πà‡∏≥‡πÑ‡∏õ‡∏™‡∏π‡∏á
            
            # === ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Grid Template ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏° ===
            spacing_value = params["dynamic_spacing"] * params["point_value"]
            optimal_size = params["optimal_grid_size"]
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á expected levels
            expected_buy_levels = []
            expected_sell_levels = []
            
            for i in range(1, optimal_size + 1):
                buy_price = round(current_price - (spacing_value * i), 2)
                sell_price = round(current_price + (spacing_value * i), 2)
                
                expected_buy_levels.append(buy_price)
                expected_sell_levels.append(sell_price)
            
            # === ‡∏´‡∏≤ Missing Slots ===
            missing_buy_slots = [p for p in expected_buy_levels if p not in buy_levels]
            missing_sell_slots = [p for p in expected_sell_levels if p not in sell_levels]
            
            # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å slot ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
            next_buy_slot = self._select_best_grid_slot(missing_buy_slots, current_price, "BUY")
            next_sell_slot = self._select_best_grid_slot(missing_sell_slots, current_price, "SELL")
            
            # === ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Grid Quality ===
            grid_quality = self._calculate_grid_quality(buy_levels, sell_levels, 
                                                       expected_buy_levels, expected_sell_levels)
            
            # === Grid Balance Analysis ===
            total_orders = len(buy_levels) + len(sell_levels)
            buy_ratio = len(buy_levels) / total_orders if total_orders > 0 else 0.5
            
            analysis = {
                "current_price": current_price,
                "buy_levels": buy_levels,
                "sell_levels": sell_levels,
                "buy_orders": len(buy_levels),
                "sell_orders": len(sell_levels),
                "total_orders": total_orders,
                "buy_ratio": buy_ratio,
                "expected_buy_levels": expected_buy_levels,
                "expected_sell_levels": expected_sell_levels,
                "missing_buy_slots": missing_buy_slots,
                "missing_sell_slots": missing_sell_slots,
                "next_buy_slot": next_buy_slot,
                "next_sell_slot": next_sell_slot,
                "grid_completeness": len(buy_levels + sell_levels) / (optimal_size * 2),
                "grid_quality_score": grid_quality,
                "spacing_efficiency": self._calculate_spacing_efficiency(buy_levels, sell_levels, spacing_value),
                "optimal_grid_size": optimal_size
            }
            
            print(f"üìä Grid State:")
            print(f"   Current Price: {current_price:.2f}")
            print(f"   BUY: {len(buy_levels)}/{optimal_size} | SELL: {len(sell_levels)}/{optimal_size}")
            print(f"   Balance Ratio: {buy_ratio:.1%} (BUY)")
            print(f"   Completeness: {analysis['grid_completeness']:.1%}")
            print(f"   Quality Score: {grid_quality:.2f}/1.0")
            print(f"   Next BUY Slot: {next_buy_slot:.2f}" if next_buy_slot else "   Next BUY Slot: None")
            print(f"   Next SELL Slot: {next_sell_slot:.2f}" if next_sell_slot else "   Next SELL Slot: None")
            
            return analysis
            
        except Exception as e:
            print(f"‚ùå Grid state analysis error: {e}")
            return {}
    
    def _select_best_grid_slot(self, available_slots: List[float], current_price: float, direction: str) -> Optional[float]:
        """‡πÄ‡∏•‡∏∑‡∏≠‡∏Å grid slot ‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î"""
        if not available_slots:
            return None
        
        # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å current price
        if direction == "BUY":
            # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å BUY slot ‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ current price ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î (‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î)
            return max(available_slots)
        else:
            # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å SELL slot ‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ current price ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î (‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î)  
            return min(available_slots)
    
    def _calculate_grid_quality(self, buy_levels: List[float], sell_levels: List[float],
                               expected_buy: List[float], expected_sell: List[float]) -> float:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡∏Å‡∏£‡∏¥‡∏î (0.0-1.0)"""
        try:
            if not expected_buy and not expected_sell:
                return 0.0
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô
            buy_completeness = len([b for b in expected_buy if b in buy_levels]) / len(expected_buy) if expected_buy else 0
            sell_completeness = len([s for s in expected_sell if s in sell_levels]) / len(expected_sell) if expected_sell else 0
            completeness = (buy_completeness + sell_completeness) / 2
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡πà‡∏≥‡πÄ‡∏™‡∏°‡∏≠‡∏Ç‡∏≠‡∏á spacing
            spacing_uniformity = self._calculate_spacing_uniformity(buy_levels + sell_levels)
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡∏î‡∏∏‡∏•
            total = len(buy_levels) + len(sell_levels)
            balance_score = 1.0 - abs(0.5 - (len(buy_levels) / total)) * 2 if total > 0 else 0.5
            
            # ‡∏£‡∏ß‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
            quality = (completeness * 0.4 + spacing_uniformity * 0.3 + balance_score * 0.3)
            
            return min(1.0, max(0.0, quality))
            
        except Exception as e:
            print(f"‚ùå Grid quality calculation error: {e}")
            return 0.0
    
    def _calculate_spacing_uniformity(self, levels: List[float]) -> float:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡πà‡∏≥‡πÄ‡∏™‡∏°‡∏≠‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á"""
        if len(levels) < 2:
            return 1.0
        
        try:
            levels = sorted(levels)
            spacings = [levels[i+1] - levels[i] for i in range(len(levels)-1)]
            
            if not spacings:
                return 1.0
            
            avg_spacing = statistics.mean(spacings)
            spacing_variance = statistics.variance(spacings) if len(spacings) > 1 else 0
            
            # ‡∏¢‡∏¥‡πà‡∏á variance ‡∏ô‡πâ‡∏≠‡∏¢ ‡∏¢‡∏¥‡πà‡∏á‡∏™‡∏°‡πà‡∏≥‡πÄ‡∏™‡∏°‡∏≠
            uniformity = 1.0 / (1.0 + spacing_variance / (avg_spacing ** 2)) if avg_spacing > 0 else 0
            
            return min(1.0, max(0.0, uniformity))
            
        except Exception as e:
            return 0.5
    
    def _calculate_spacing_efficiency(self, buy_levels: List[float], sell_levels: List[float], 
                                    expected_spacing: float) -> float:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á spacing"""
        try:
            all_levels = sorted(buy_levels + sell_levels)
            if len(all_levels) < 2:
                return 1.0
            
            actual_spacings = [all_levels[i+1] - all_levels[i] for i in range(len(all_levels)-1)]
            
            # ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö expected spacing
            efficiency_scores = []
            for spacing in actual_spacings:
                ratio = min(spacing, expected_spacing) / max(spacing, expected_spacing)
                efficiency_scores.append(ratio)
            
            return statistics.mean(efficiency_scores) if efficiency_scores else 0.0
            
        except Exception as e:
            return 0.0
    
    def _update_grid_state(self, analysis: Dict, params: Dict):
        """‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏£‡∏¥‡∏î"""
        try:
            self.grid_state.buy_levels = analysis.get("buy_levels", [])
            self.grid_state.sell_levels = analysis.get("sell_levels", [])
            self.grid_state.missing_buy_slots = analysis.get("missing_buy_slots", [])
            self.grid_state.missing_sell_slots = analysis.get("missing_sell_slots", [])
            self.grid_state.grid_balance_ratio = analysis.get("buy_ratio", 0.5)
            self.grid_state.grid_completeness = analysis.get("grid_completeness", 0.0)
            self.grid_state.quality_score = analysis.get("grid_quality_score", 0.0)
            self.grid_state.spacing_efficiency = analysis.get("spacing_efficiency", 0.0)
            
            # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î phase ‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå
            total_orders = analysis.get("total_orders", 0)
            optimal_size = params.get("optimal_grid_size", 5)
            
            if total_orders < optimal_size:
                self.grid_state.current_phase = GridPhase.INITIALIZATION
            elif self.grid_state.quality_score < 0.6:
                self.grid_state.current_phase = GridPhase.MAINTENANCE
            elif not self.grid_state.is_balanced:
                self.grid_state.current_phase = GridPhase.REBALANCING
            else:
                self.grid_state.current_phase = GridPhase.MONITORING
            
        except Exception as e:
            print(f"‚ùå Grid state update error: {e}")
    
    # ========================================================================================
    # üèóÔ∏è 4-PHASE GRID LOGIC SYSTEM
    # ========================================================================================
    
    def _execute_grid_phase_logic(self, analysis: Dict, params: Dict, weight: float) -> Optional[RuleResult]:
        """‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏≤‡∏° Phase ‡∏Ç‡∏≠‡∏á‡∏Å‡∏£‡∏¥‡∏î"""
        try:
            current_phase = self.grid_state.current_phase
            
            print(f"üéØ EXECUTING PHASE: {current_phase.value}")
            
            if current_phase == GridPhase.INITIALIZATION:
                return self._phase_1_initialization(analysis, params, weight)
            elif current_phase == GridPhase.MONITORING:
                return self._phase_2_monitoring(analysis, params, weight)
            elif current_phase == GridPhase.REBALANCING:
                return self._phase_3_rebalancing(analysis, params, weight)
            elif current_phase == GridPhase.MAINTENANCE:
                return self._phase_4_maintenance(analysis, params, weight)
            else:
                print(f"‚ùå Unknown grid phase: {current_phase}")
                return None
                
        except Exception as e:
            print(f"‚ùå Grid phase execution error: {e}")
            return None
    
    def _phase_1_initialization(self, analysis: Dict, params: Dict, weight: float) -> Optional[RuleResult]:
        """
        üèóÔ∏è Phase 1: Grid Initialization - ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏¥‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
        
        ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢:
        - ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏¥‡∏î‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ö
        - ‡∏ß‡∏≤‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏ù‡∏±‡πà‡∏á‡πÅ‡∏ö‡∏ö‡∏™‡∏°‡∏î‡∏∏‡∏•
        - ‡πÉ‡∏ä‡πâ dynamic spacing ‡∏ï‡∏≤‡∏° volatility
        """
        try:
            print("üèóÔ∏è === PHASE 1: GRID INITIALIZATION ===")
            
            current_price = analysis["current_price"]
            total_orders = analysis["total_orders"]
            optimal_size = params["optimal_grid_size"]
            
            # ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏¥‡∏î‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏ù‡∏±‡πà‡∏á‡∏•‡∏∞ 40% ‡∏Ç‡∏≠‡∏á optimal size
            initial_target_per_side = max(2, int(optimal_size * 0.4))
            
            print(f"üéØ Initialization Target: {initial_target_per_side} orders per side")
            print(f"   Current: BUY={analysis['buy_orders']} SELL={analysis['sell_orders']}")
            
            # Priority 1: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏¥‡∏î‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö
            if analysis["buy_orders"] < initial_target_per_side and analysis["next_buy_slot"]:
                confidence = 0.85  # ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô‡∏™‡∏π‡∏á‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
                return RuleResult(
                    rule_name="grid_expansion",
                    decision=TradingDecision.BUY,
                    confidence=confidence,
                    reasoning=f"üèóÔ∏è INIT: Build BUY foundation ({analysis['buy_orders']}/{initial_target_per_side})",
                    supporting_data={
                        "target_price": analysis["next_buy_slot"],
                        "grid_phase": "INITIALIZATION",
                        "direction": "BUY",
                        "slot_priority": "FOUNDATION",
                        "spacing_used": params["dynamic_spacing"]
                    },
                    weight=weight,
                    execution_priority=1
                )
            
            if analysis["sell_orders"] < initial_target_per_side and analysis["next_sell_slot"]:
                confidence = 0.85
                return RuleResult(
                    rule_name="grid_expansion",
                    decision=TradingDecision.SELL,
                    confidence=confidence,
                    reasoning=f"üèóÔ∏è INIT: Build SELL foundation ({analysis['sell_orders']}/{initial_target_per_side})",
                    supporting_data={
                        "target_price": analysis["next_sell_slot"],
                        "grid_phase": "INITIALIZATION",
                        "direction": "SELL",
                        "slot_priority": "FOUNDATION",
                        "spacing_used": params["dynamic_spacing"]
                    },
                    weight=weight,
                    execution_priority=1
                )
            
            # ‡∏°‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡πâ‡∏ß - ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏õ phase 2
            print("‚úÖ INIT COMPLETE: Foundation grid established")
            self.grid_state.current_phase = GridPhase.MONITORING
            return None
            
        except Exception as e:
            print(f"‚ùå Phase 1 error: {e}")
            return None
    
    def _phase_2_monitoring(self, analysis: Dict, params: Dict, weight: float) -> Optional[RuleResult]:
        """
        üëÅÔ∏è Phase 2: Grid Balance Monitoring - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡∏î‡∏∏‡∏•‡πÅ‡∏•‡∏∞‡∏Ç‡∏¢‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö‡∏ä‡∏≤‡∏ç‡∏â‡∏•‡∏≤‡∏î
        
        ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢:
        - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡∏î‡∏∏‡∏• BUY/SELL
        - ‡∏Ç‡∏¢‡∏≤‡∏¢‡∏Å‡∏£‡∏¥‡∏î‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏°‡∏µ‡πÅ‡∏ú‡∏ô
        - ‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏Å‡∏£‡∏¥‡∏î
        """
        try:
            print("üëÅÔ∏è === PHASE 2: GRID MONITORING ===")
            
            buy_ratio = analysis["buy_ratio"]
            total_orders = analysis["total_orders"]
            optimal_size = params["optimal_grid_size"]
            max_total_orders = optimal_size * 2
            
            print(f"‚öñÔ∏è Balance Analysis:")
            print(f"   BUY Ratio: {buy_ratio:.1%}")
            print(f"   Grid Size: {total_orders}/{max_total_orders}")
            print(f"   Quality: {analysis['grid_quality_score']:.2f}")
            
            # === ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏Ç‡∏¢‡∏≤‡∏¢‡∏Å‡∏£‡∏¥‡∏î ===
            
            # 1. ‡πÄ‡∏ä‡πá‡∏Ñ market condition
            if not self._is_market_suitable_for_expansion():
                print("‚è∏Ô∏è Market not suitable for expansion")
                return None
            
            # 2. ‡πÄ‡∏ä‡πá‡∏Ñ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì
            if not self.capital_allocation.can_expand_grid:
                print("üí∞ Capital limit reached")
                return None
            
            # 3. ‡∏Ç‡∏¢‡∏≤‡∏¢‡∏Å‡∏£‡∏¥‡∏î‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏°‡∏î‡∏∏‡∏•
            if total_orders < max_total_orders:
                
                # ‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Å‡∏±‡∏ö‡∏ù‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤
                if buy_ratio < 0.35 and analysis["next_buy_slot"]:  # BUY ‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
                    confidence = 0.75
                    return RuleResult(
                        rule_name="grid_expansion",
                        decision=TradingDecision.BUY,
                        confidence=confidence,
                        reasoning=f"‚öñÔ∏è REBALANCE: Strengthen BUY side ({buy_ratio:.1%} ‚Üí target 50%)",
                        supporting_data={
                            "target_price": analysis["next_buy_slot"],
                            "grid_phase": "MONITORING",
                            "direction": "BUY",
                            "balance_action": "STRENGTHEN_WEAK_SIDE",
                            "spacing_used": params["dynamic_spacing"]
                        },
                        weight=weight,
                        execution_priority=2
                    )
                
                elif buy_ratio > 0.65 and analysis["next_sell_slot"]:  # SELL ‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
                    confidence = 0.75
                    return RuleResult(
                        rule_name="grid_expansion",
                        decision=TradingDecision.SELL,
                        confidence=confidence,
                        reasoning=f"‚öñÔ∏è REBALANCE: Strengthen SELL side ({buy_ratio:.1%} ‚Üí target 50%)",
                        supporting_data={
                            "target_price": analysis["next_sell_slot"],
                            "grid_phase": "MONITORING",
                            "direction": "SELL",
                            "balance_action": "STRENGTHEN_WEAK_SIDE",
                            "spacing_used": params["dynamic_spacing"]
                        },
                        weight=weight,
                        execution_priority=2
                    )
                
                # ‡∏Ç‡∏¢‡∏≤‡∏¢‡∏Å‡∏£‡∏¥‡∏î‡πÅ‡∏ö‡∏ö‡∏™‡∏°‡∏î‡∏∏‡∏• (‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏°‡∏î‡∏∏‡∏•‡∏î‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß)
                elif 0.4 <= buy_ratio <= 0.6:
                    # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ù‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
                    if analysis["buy_orders"] <= analysis["sell_orders"] and analysis["next_buy_slot"]:
                        confidence = 0.6
                        return RuleResult(
                            rule_name="grid_expansion",
                            decision=TradingDecision.BUY,
                            confidence=confidence,
                            reasoning=f"üìà EXPAND: Balanced BUY expansion ({total_orders}/{max_total_orders})",
                            supporting_data={
                                "target_price": analysis["next_buy_slot"],
                                "grid_phase": "MONITORING",
                                "direction": "BUY",
                                "balance_action": "BALANCED_EXPANSION",
                                "spacing_used": params["dynamic_spacing"]
                            },
                            weight=weight,
                            execution_priority=3
                        )
                    
                    elif analysis["sell_orders"] < analysis["buy_orders"] and analysis["next_sell_slot"]:
                        confidence = 0.6
                        return RuleResult(
                            rule_name="grid_expansion",
                            decision=TradingDecision.SELL,
                            confidence=confidence,
                            reasoning=f"üìà EXPAND: Balanced SELL expansion ({total_orders}/{max_total_orders})",
                            supporting_data={
                                "target_price": analysis["next_sell_slot"],
                                "grid_phase": "MONITORING",
                                "direction": "SELL",
                                "balance_action": "BALANCED_EXPANSION",
                                "spacing_used": params["dynamic_spacing"]
                            },
                            weight=weight,
                            execution_priority=3
                        )
            
            # ‡∏Å‡∏£‡∏¥‡∏î‡πÄ‡∏ï‡πá‡∏°‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
            print("‚úÖ MONITORING: Grid is optimal or complete")
            return None
            
        except Exception as e:
            print(f"‚ùå Phase 2 error: {e}")
            return None
    
    def _phase_3_rebalancing(self, analysis: Dict, params: Dict, weight: float) -> Optional[RuleResult]:
        """
        ‚öñÔ∏è Phase 3: Smart Rebalancing - ‡∏õ‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏î‡∏∏‡∏•‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞
        
        ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢:
        - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏°‡πà‡∏™‡∏°‡∏î‡∏∏‡∏•‡∏Ç‡∏≠‡∏á‡∏Å‡∏£‡∏¥‡∏î
        - ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå ‡πÄ‡∏ô‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á
        - ‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏Å‡∏£‡∏¥‡∏î‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏°
        """
        try:
            print("‚öñÔ∏è === PHASE 3: SMART REBALANCING ===")
            
            buy_ratio = analysis["buy_ratio"]
            
            print(f"üìä Balance Status:")
            print(f"   BUY Ratio: {buy_ratio:.1%}")
            print(f"   Target Range: 30% - 70%")
            print(f"   Action: {'STRENGTHEN BUY' if buy_ratio < 0.3 else 'STRENGTHEN SELL' if buy_ratio > 0.7 else 'MINOR ADJUSTMENT'}")
            
            # === Critical Imbalance Correction ===
            
            # BUY ‡∏ô‡πâ‡∏≠‡∏¢‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ (< 30%)
            if buy_ratio < 0.3 and analysis["next_buy_slot"]:
                confidence = 0.8  # ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
                return RuleResult(
                    rule_name="grid_expansion",
                    decision=TradingDecision.BUY,
                    confidence=confidence,
                    reasoning=f"üö® CRITICAL REBALANCE: Fix BUY shortage ({buy_ratio:.1%})",
                    supporting_data={
                        "target_price": analysis["next_buy_slot"],
                        "grid_phase": "REBALANCING",
                        "direction": "BUY",
                        "urgency": "CRITICAL",
                        "balance_target": "30-70%",
                        "spacing_used": params["dynamic_spacing"]
                    },
                    weight=weight,
                    execution_priority=1
                )
            
            # SELL ‡∏ô‡πâ‡∏≠‡∏¢‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ (> 70% BUY)
            elif buy_ratio > 0.7 and analysis["next_sell_slot"]:
                confidence = 0.8
                return RuleResult(
                    rule_name="grid_expansion",
                    decision=TradingDecision.SELL,
                    confidence=confidence,
                    reasoning=f"üö® CRITICAL REBALANCE: Fix SELL shortage ({buy_ratio:.1%})",
                    supporting_data={
                        "target_price": analysis["next_sell_slot"],
                        "grid_phase": "REBALANCING",
                        "direction": "SELL",
                        "urgency": "CRITICAL",
                        "balance_target": "30-70%",
                        "spacing_used": params["dynamic_spacing"]
                    },
                    weight=weight,
                    execution_priority=1
                )
            
            # === Moderate Imbalance Correction ===
            
            # BUY ‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢ (30-40%)
            elif 0.3 <= buy_ratio < 0.4 and analysis["next_buy_slot"]:
                confidence = 0.65
                return RuleResult(
                    rule_name="grid_expansion", 
                    decision=TradingDecision.BUY,
                    confidence=confidence,
                    reasoning=f"üìä MODERATE REBALANCE: Improve BUY side ({buy_ratio:.1%})",
                    supporting_data={
                        "target_price": analysis["next_buy_slot"],
                        "grid_phase": "REBALANCING",
                        "direction": "BUY",
                        "urgency": "MODERATE",
                        "spacing_used": params["dynamic_spacing"]
                    },
                    weight=weight,
                    execution_priority=2
                )
            
            # SELL ‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢ (60-70% BUY)
            elif 0.6 < buy_ratio <= 0.7 and analysis["next_sell_slot"]:
                confidence = 0.65
                return RuleResult(
                    rule_name="grid_expansion",
                    decision=TradingDecision.SELL,
                    confidence=confidence,
                    reasoning=f"üìä MODERATE REBALANCE: Improve SELL side ({buy_ratio:.1%})",
                    supporting_data={
                        "target_price": analysis["next_sell_slot"],
                        "grid_phase": "REBALANCING", 
                        "direction": "SELL",
                        "urgency": "MODERATE",
                        "spacing_used": params["dynamic_spacing"]
                    },
                    weight=weight,
                    execution_priority=2
                )
            
            # ‡∏™‡∏°‡∏î‡∏∏‡∏•‡πÅ‡∏•‡πâ‡∏ß - ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏õ monitoring
            else:
                print("‚úÖ REBALANCING COMPLETE: Grid is now balanced")
                self.grid_state.current_phase = GridPhase.MONITORING
                return None
            
        except Exception as e:
            print(f"‚ùå Phase 3 error: {e}")
            return None
    
    def _phase_4_maintenance(self, analysis: Dict, params: Dict, weight: float) -> Optional[RuleResult]:
        """
        üîß Phase 4: Grid Maintenance - ‡∏ö‡∏≥‡∏£‡∏∏‡∏á‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏Å‡∏£‡∏¥‡∏î‡πÉ‡∏´‡πâ‡∏°‡∏µ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û
        
        ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢:
        - ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏Å‡∏£‡∏¥‡∏î
        - ‡∏à‡∏±‡∏î‡∏£‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ö spacing ‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏µ‡∏¢‡∏£‡∏π‡∏õ
        - ‡πÄ‡∏ï‡∏¥‡∏°‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
        """
        try:
            print("üîß === PHASE 4: GRID MAINTENANCE ===")
            
            quality_score = analysis["grid_quality_score"]
            spacing_efficiency = analysis["spacing_efficiency"]
            
            print(f"üõ†Ô∏è Maintenance Analysis:")
            print(f"   Quality Score: {quality_score:.2f}/1.0")
            print(f"   Spacing Efficiency: {spacing_efficiency:.2f}/1.0")
            
            # === Quality Improvement Actions ===
            
            # 1. ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏°
            if quality_score < 0.6:
                # ‡∏´‡∏≤‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
                critical_gap = self._find_critical_grid_gap(analysis, params)
                
                if critical_gap:
                    confidence = 0.7
                    direction = critical_gap["direction"]
                    target_price = critical_gap["price"]
                    
                    decision = TradingDecision.BUY if direction == "BUY" else TradingDecision.SELL
                    
                    return RuleResult(
                        rule_name="grid_expansion",
                        decision=decision,
                        confidence=confidence,
                        reasoning=f"üîß MAINTENANCE: Fill critical gap @ {target_price:.2f} (Quality: {quality_score:.2f})",
                        supporting_data={
                            "target_price": target_price,
                            "grid_phase": "MAINTENANCE",
                            "direction": direction,
                            "maintenance_type": "QUALITY_IMPROVEMENT",
                            "gap_importance": critical_gap["importance"],
                            "spacing_used": params["dynamic_spacing"]
                        },
                        weight=weight,
                        execution_priority=2
                    )
            
            # 2. ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á spacing efficiency
            elif spacing_efficiency < 0.7:
                # ‡∏´‡∏≤‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà spacing ‡πÑ‡∏°‡πà‡∏î‡∏µ
                spacing_fix = self._find_spacing_improvement(analysis, params)
                
                if spacing_fix:
                    confidence = 0.6
                    return RuleResult(
                        rule_name="grid_expansion",
                        decision=TradingDecision.BUY if spacing_fix["direction"] == "BUY" else TradingDecision.SELL,
                        confidence=confidence,
                        reasoning=f"üìè SPACING FIX: Improve spacing efficiency ({spacing_efficiency:.2f})",
                        supporting_data={
                            "target_price": spacing_fix["price"],
                            "grid_phase": "MAINTENANCE",
                            "direction": spacing_fix["direction"],
                            "maintenance_type": "SPACING_IMPROVEMENT",
                            "spacing_used": params["dynamic_spacing"]
                        },
                        weight=weight,
                        execution_priority=3
                    )
            
            # 3. ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏î‡∏µ‡πÅ‡∏•‡πâ‡∏ß - ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ monitoring
            else:
                print("‚úÖ MAINTENANCE COMPLETE: Grid quality is good")
                self.grid_state.current_phase = GridPhase.MONITORING
                return None
            
            return None
            
        except Exception as e:
            print(f"‚ùå Phase 4 error: {e}")
            return None
    
    def _find_critical_grid_gap(self, analysis: Dict, params: Dict) -> Optional[Dict]:
        """‡∏´‡∏≤‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡∏Å‡∏£‡∏¥‡∏î"""
        try:
            current_price = analysis["current_price"]
            spacing_value = params["dynamic_spacing"] * params["point_value"]
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡πÉ‡∏Å‡∏•‡πâ current price
            critical_gaps = []
            
            # ‡πÄ‡∏ä‡πá‡∏Ñ BUY side
            for slot in analysis["missing_buy_slots"]:
                distance = abs(current_price - slot)
                importance = 1.0 / (1.0 + distance / spacing_value)  # ‡∏¢‡∏¥‡πà‡∏á‡πÉ‡∏Å‡∏•‡πâ ‡∏¢‡∏¥‡πà‡∏á‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
                critical_gaps.append({
                    "direction": "BUY",
                    "price": slot,
                    "distance": distance,
                    "importance": importance
                })
            
            # ‡πÄ‡∏ä‡πá‡∏Ñ SELL side
            for slot in analysis["missing_sell_slots"]:
                distance = abs(current_price - slot)
                importance = 1.0 / (1.0 + distance / spacing_value)
                critical_gaps.append({
                    "direction": "SELL",
                    "price": slot,
                    "distance": distance,
                    "importance": importance
                })
            
            # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
            if critical_gaps:
                critical_gaps.sort(key=lambda x: x["importance"], reverse=True)
                return critical_gaps[0]
            
            return None
            
        except Exception as e:
            print(f"‚ùå Critical gap finding error: {e}")
            return None
    
    def _find_spacing_improvement(self, analysis: Dict, params: Dict) -> Optional[Dict]:
        """‡∏´‡∏≤‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á spacing"""
        try:
            # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå spacing ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            all_levels = sorted(analysis["buy_levels"] + analysis["sell_levels"])
            expected_spacing = params["dynamic_spacing"] * params["point_value"]
            
            # ‡∏´‡∏≤‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏´‡∏ç‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
            for i in range(len(all_levels) - 1):
                gap = all_levels[i+1] - all_levels[i]
                if gap > expected_spacing * 1.8:  # ‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡πÉ‡∏´‡∏ç‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
                    # ‡∏´‡∏≤‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡πÄ‡∏ï‡∏¥‡∏°
                    fill_price = all_levels[i] + expected_spacing
                    direction = "BUY" if fill_price < analysis["current_price"] else "SELL"
                    
                    return {
                        "direction": direction,
                        "price": round(fill_price, 2),
                        "gap_size": gap,
                        "improvement_type": "FILL_LARGE_GAP"
                    }
            
            return None
            
        except Exception as e:
            print(f"‚ùå Spacing improvement error: {e}")
            return None
    
    def _is_market_suitable_for_expansion(self) -> bool:
        """‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏™‡∏†‡∏≤‡∏û‡∏ï‡∏•‡∏≤‡∏î‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ç‡∏¢‡∏≤‡∏¢‡∏Å‡∏£‡∏¥‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
        try:
            if not self.market_context:
                return True  # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÉ‡∏´‡πâ‡∏ú‡πà‡∏≤‡∏ô
            
            market_data = self.last_market_data
            
            # ‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
            unsuitable_conditions = []
            
            # 1. Spread ‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
            spread = market_data.get("spread", 0)
            normal_spread = market_data.get("avg_spread", 5)
            if spread > normal_spread * 3:
                unsuitable_conditions.append(f"Wide spread: {spread}")
            
            # 2. Volatility ‡∏™‡∏π‡∏á‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
            volatility = market_data.get("volatility_factor", 1.0)
            if volatility > 3.0:
                unsuitable_conditions.append(f"Extreme volatility: {volatility:.2f}")
            
            # 3. Low liquidity
            if self.market_context.liquidity_level == "LOW":
                unsuitable_conditions.append("Low liquidity")
            
            # 4. News events ‡∏´‡∏£‡∏∑‡∏≠ market gaps
            if market_data.get("news_impact", 0) > 0.7:
                unsuitable_conditions.append("High news impact")
            
            # 5. ‡πÄ‡∏ä‡πá‡∏Ñ momentum ‡πÅ‡∏£‡∏á‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ (‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ß‡∏¥‡πà‡∏á‡πÅ‡∏£‡∏á)
            momentum = abs(market_data.get("momentum", 0))
            if momentum > 0.8:
                unsuitable_conditions.append(f"Strong momentum: {momentum:.2f}")
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
            if unsuitable_conditions:
                print(f"‚ö†Ô∏è Market unsuitable for expansion:")
                for condition in unsuitable_conditions:
                    print(f"   - {condition}")
                return False
            
            print("‚úÖ Market conditions favorable for grid expansion")
            return True
            
        except Exception as e:
            print(f"‚ùå Market suitability check error: {e}")
            return True  # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡πÉ‡∏´‡πâ‡∏ú‡πà‡∏≤‡∏ô

    def _make_weighted_decision(self, rule_results: List[RuleResult]) -> Optional[RuleResult]:
        """‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏î‡πâ‡∏ß‡∏¢‡∏£‡∏∞‡∏ö‡∏ö‡∏ñ‡πà‡∏ß‡∏á‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô"""
        try:
            if not rule_results:
                return None
            
            print(f"üéØ === WEIGHTED DECISION ANALYSIS ===")
            print(f"üìä Processing {len(rule_results)} rule results:")
            
            # ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ï‡∏≤‡∏° decision type
            decision_groups = defaultdict(list)
            
            for result in rule_results:
                decision_groups[result.decision].append(result)
                weighted_conf = result.weighted_confidence
                print(f"   {result.rule_name}: {result.decision.value} "
                        f"(conf: {result.confidence:.2f} √ó weight: {result.weight:.2f} = {weighted_conf:.3f})")
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏°‡πÅ‡∏ï‡πà‡∏•‡∏∞ decision
            decision_scores = {}
            decision_details = {}
            
            for decision, results in decision_groups.items():
                total_score = sum(r.weighted_confidence for r in results)
                avg_confidence = statistics.mean([r.confidence for r in results])
                avg_priority = statistics.mean([r.execution_priority for r in results])
                
                decision_scores[decision] = total_score
                decision_details[decision] = {
                    "total_score": total_score,
                    "avg_confidence": avg_confidence,
                    "avg_priority": avg_priority,
                    "rule_count": len(results),
                    "results": results
                }
            
            # ‡∏´‡∏≤ decision ‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
            if not decision_scores:
                return None
            
            best_decision = max(decision_scores.keys(), key=lambda d: decision_scores[d])
            best_score = decision_scores[best_decision]
            best_details = decision_details[best_decision]
            
            # ‡πÄ‡∏ä‡πá‡∏Ñ threshold ‡∏ó‡∏µ‡πà‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô
            min_threshold = 0.15  # ‡∏•‡∏î‡∏•‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ grid ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ
            
            # ‡∏õ‡∏£‡∏±‡∏ö threshold ‡∏ï‡∏≤‡∏° urgency
            if any("CRITICAL" in r.supporting_data.get("urgency", "") for r in best_details["results"]):
                min_threshold = 0.1  # ‡∏•‡∏î threshold ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö critical actions
            elif any("FOUNDATION" in r.supporting_data.get("slot_priority", "") for r in best_details["results"]):
                min_threshold = 0.2  # ‡πÄ‡∏û‡∏¥‡πà‡∏° threshold ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö foundation building
            
            print(f"üèÜ Best Decision: {best_decision.value}")
            print(f"   Total Score: {best_score:.3f} (threshold: {min_threshold:.3f})")
            print(f"   Avg Confidence: {best_details['avg_confidence']:.2f}")
            print(f"   Rule Count: {best_details['rule_count']}")
            
            if best_score >= min_threshold:
                # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å result ‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏°
                best_result = max(best_details["results"], 
                                key=lambda r: (r.confidence, -r.execution_priority))
                
                print(f"‚úÖ DECISION APPROVED: {best_result.reasoning}")
                return best_result
            else:
                print(f"‚ùå DECISION REJECTED: Score too low ({best_score:.3f} < {min_threshold:.3f})")
                return None
            
        except Exception as e:
            print(f"‚ùå Weighted decision error: {e}")
            return None

    def _execute_trading_decision(self, decision_result: RuleResult):
        """‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à"""
        try:
            print(f"‚ö° === EXECUTING DECISION ===")
            print(f"üéØ Decision: {decision_result.decision.value}")
            print(f"üß† Reasoning: {decision_result.reasoning}")
            print(f"üìä Confidence: {decision_result.confidence:.2f}")
            
            # ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏≤‡∏° decision type
            if decision_result.decision == TradingDecision.BUY:
                self._execute_buy_decision(decision_result)
            elif decision_result.decision == TradingDecision.SELL:
                self._execute_sell_decision(decision_result)
            elif decision_result.decision == TradingDecision.CLOSE_PROFITABLE:
                self._execute_close_profitable(decision_result)
            elif decision_result.decision == TradingDecision.CLOSE_LOSING:
                print("‚ö†Ô∏è CLOSE_LOSING skipped - no stop loss system")
            elif decision_result.decision == TradingDecision.CLOSE_ALL:
                self._execute_close_all(decision_result)
            elif decision_result.decision == TradingDecision.EMERGENCY_STOP:
                self._execute_emergency_stop(decision_result)
            
            # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó grid state
            self.grid_state.last_grid_action = datetime.now()
            
        except Exception as e:
            print(f"‚ùå Decision execution error: {e}")

    def _execute_buy_decision(self, decision: RuleResult):
        """‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏≤‡∏á BUY order"""
        try:
            supporting_data = decision.supporting_data
            target_price = supporting_data.get("target_price")
            
            if not target_price or target_price <= 0:
                print("‚ùå Invalid BUY target price")
                return
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì lot size ‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå
            lot_size = self._calculate_adaptive_lot_size(decision)
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á order request
            order_request = {
                "order_type": "BUY_LIMIT",
                "volume": lot_size,
                "price": target_price,
                "reasoning": decision.reasoning,
                "confidence": decision.confidence
            }
            
            # ‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á Order Manager
            if self.order_manager:
                result = self.order_manager.place_smart_order(**order_request)
                
                if result and result.get("success"):
                    print(f"‚úÖ BUY order placed: {lot_size:.3f} lots @ {target_price:.2f}")
                    self._track_rule_performance(decision.rule_name, True)
                else:
                    print(f"‚ùå BUY order failed: {result.get('error', 'Unknown error')}")
                    self._track_rule_performance(decision.rule_name, False)
        
        except Exception as e:
            print(f"‚ùå BUY execution error: {e}")

    def _execute_sell_decision(self, decision: RuleResult):
        """‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏≤‡∏á SELL order"""
        try:
            supporting_data = decision.supporting_data
            target_price = supporting_data.get("target_price")
            
            if not target_price or target_price <= 0:
                print("‚ùå Invalid SELL target price")
                return
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì lot size ‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå
            lot_size = self._calculate_adaptive_lot_size(decision)
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á order request
            order_request = {
                "order_type": "SELL_LIMIT",
                "volume": lot_size,
                "price": target_price,
                "reasoning": decision.reasoning,
                "confidence": decision.confidence
            }
            
            # ‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á Order Manager
            if self.order_manager:
                result = self.order_manager.place_smart_order(**order_request)
                
                if result and result.get("success"):
                    print(f"‚úÖ SELL order placed: {lot_size:.3f} lots @ {target_price:.2f}")
                    self._track_rule_performance(decision.rule_name, True)
                else:
                    print(f"‚ùå SELL order failed: {result.get('error', 'Unknown error')}")
                    self._track_rule_performance(decision.rule_name, False)
        
        except Exception as e:
            print(f"‚ùå SELL execution error: {e}")

    def _calculate_adaptive_lot_size(self, decision: RuleResult) -> float:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì lot size ‡πÅ‡∏ö‡∏ö adaptive ‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå"""
        try:
            # Base lot ‡∏à‡∏≤‡∏Å Lot Calculator
            base_lot = 0.01
            if self.lot_calculator:
                base_lot = self.lot_calculator.calculate_optimal_lot_size()
            
            # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏° confidence
            confidence_multiplier = 0.5 + (decision.confidence * 0.5)  # 0.5-1.0
            
            # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏° grid phase
            phase_multipliers = {
                GridPhase.INITIALIZATION: 1.0,    # ‡∏Ç‡∏ô‡∏≤‡∏î‡∏õ‡∏Å‡∏ï‡∏¥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
                GridPhase.MONITORING: 0.8,       # ‡πÄ‡∏•‡πá‡∏Å‡∏•‡∏á‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
                GridPhase.REBALANCING: 1.2,      # ‡πÉ‡∏´‡∏ç‡πà‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏°‡∏î‡∏∏‡∏•
                GridPhase.MAINTENANCE: 0.7       # ‡πÄ‡∏•‡πá‡∏Å‡∏•‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á
            }
            
            phase_multiplier = phase_multipliers.get(self.grid_state.current_phase, 1.0)
            
            # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏° volatility
            volatility = self.last_market_data.get("volatility_factor", 1.0)
            if volatility > 2.0:
                volatility_multiplier = 0.6  # ‡∏•‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠ volatile
            elif volatility < 0.5:
                volatility_multiplier = 1.3  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏á‡∏µ‡∏¢‡∏ö
            else:
                volatility_multiplier = 1.0
            
            # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠
            budget_ratio = self.capital_allocation.risk_budget / self.capital_allocation.total_balance
            budget_multiplier = min(1.5, max(0.5, budget_ratio * 10))
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì lot size ‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
            final_lot = base_lot * confidence_multiplier * phase_multiplier * volatility_multiplier * budget_multiplier
            
            # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥‡πÅ‡∏•‡∏∞‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
            min_lot = 0.01
            max_lot = min(1.0, self.capital_allocation.available_margin / 1000)  # ‡∏Ç‡∏∂‡πâ‡∏ô‡∏Å‡∏±‡∏ö margin
            
            final_lot = max(min_lot, min(max_lot, round(final_lot, 2)))
            
            print(f"üí∞ Adaptive Lot Calculation:")
            print(f"   Base: {base_lot:.3f}")
            print(f"   Confidence: √ó{confidence_multiplier:.2f}")
            print(f"   Phase: √ó{phase_multiplier:.2f}")
            print(f"   Volatility: √ó{volatility_multiplier:.2f}")
            print(f"   Budget: √ó{budget_multiplier:.2f}")
            print(f"   Final: {final_lot:.3f} lots")
            
            return final_lot
            
        except Exception as e:
            print(f"‚ùå Adaptive lot calculation error: {e}")
            return 0.01

# ========================================================================================
# üéØ OTHER TRADING RULES
# ========================================================================================

    def _rule_portfolio_balance(self, config: Dict, weight: float) -> Optional[RuleResult]:
        """üìä Portfolio Balance Rule - ‡πÄ‡∏ô‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏Å‡∏≥‡πÑ‡∏£‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏°‡πâ"""
        try:
            portfolio_data = self.last_portfolio_data
            
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• positions
            profitable_positions = portfolio_data.get("profitable_positions", [])
            losing_positions = portfolio_data.get("losing_positions", [])
            
            total_profit = sum(pos.get("profit", 0) for pos in profitable_positions)
            total_loss = sum(pos.get("profit", 0) for pos in losing_positions)
            net_profit = total_profit + total_loss
            
            print(f"üí∞ Portfolio Analysis:")
            print(f"   Profitable: {len(profitable_positions)} positions (+{total_profit:.2f})")
            print(f"   Losing: {len(losing_positions)} positions ({total_loss:.2f})")
            print(f"   Net P&L: {net_profit:.2f}")
            
            # === ‡πÄ‡∏Å‡πá‡∏ö‡∏Å‡∏≥‡πÑ‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™ ===
            profit_threshold = config["parameters"].get("profit_take_threshold", 50.0)
            
            if total_profit >= profit_threshold and len(profitable_positions) > 0:
                confidence = min(0.9, 0.5 + (total_profit / profit_threshold) * 0.4)
                
                return RuleResult(
                    rule_name="portfolio_balance",
                    decision=TradingDecision.CLOSE_PROFITABLE,
                    confidence=confidence,
                    reasoning=f"üí∞ PROFIT TAKE: Secure ${total_profit:.2f} profit (threshold: ${profit_threshold})",
                    supporting_data={
                        "profitable_count": len(profitable_positions),
                        "total_profit": total_profit,
                        "profit_threshold": profit_threshold,
                        "action_type": "PROFIT_SECURING"
                    },
                    weight=weight,
                    execution_priority=1
                )
            
            # === ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏°‡πâ‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞ ===
            # ‡∏´‡∏≤‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡πÅ‡∏Å‡πâ‡πÑ‡∏°‡πâ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏Å‡∏≥‡πÑ‡∏£‡∏à‡∏≤‡∏Å‡∏ù‡∏±‡πà‡∏á‡∏´‡∏ô‡∏∂‡πà‡∏á‡πÑ‡∏õ‡∏õ‡∏¥‡∏î‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏≠‡∏µ‡∏Å‡∏ù‡∏±‡πà‡∏á
            if total_profit > 0 and total_loss < 0 and abs(total_loss) < total_profit * 0.8:
                hedge_confidence = 0.7
                
                return RuleResult(
                    rule_name="portfolio_balance",
                    decision=TradingDecision.CLOSE_PROFITABLE,  # ‡∏õ‡∏¥‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏Ñ‡∏π‡πà‡πÄ‡∏õ‡πá‡∏ô net profit
                    confidence=hedge_confidence,
                    reasoning=f"üîÑ SMART HEDGE: Use ${total_profit:.2f} profit to offset ${total_loss:.2f} loss",
                    supporting_data={
                        "hedge_type": "PROFIT_OFFSET",
                        "profit_amount": total_profit,
                        "loss_amount": total_loss,
                        "net_result": net_profit,
                        "action_type": "HEDGE_RECOVERY"
                    },
                    weight=weight,
                    execution_priority=2
                )
            
            return None
            
        except Exception as e:
            print(f"‚ùå Portfolio balance rule error: {e}")
            return None

    def _rule_trend_following(self, config: Dict, weight: float) -> Optional[RuleResult]:
        """üìà Trend Following Rule - ‡πÄ‡∏ô‡πâ‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô"""
        try:
            market_data = self.last_market_data
            
            trend_strength = market_data.get("trend_strength", 0)
            trend_direction = market_data.get("trend_direction", "SIDEWAYS")
            rsi = market_data.get("rsi", 50)
            
            # ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ó‡∏µ‡πà‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô
            if trend_strength > 0.6 and trend_direction != "SIDEWAYS":
                
                if trend_direction == "UP" and rsi < 70:
                    confidence = min(0.8, trend_strength)
                    return RuleResult(
                        rule_name="trend_following",
                        decision=TradingDecision.BUY,
                        confidence=confidence,
                        reasoning=f"üìà TREND BUY: {trend_direction} trend (strength: {trend_strength:.2f})",
                        supporting_data={
                            "trend_direction": trend_direction,
                            "trend_strength": trend_strength,
                            "rsi": rsi
                        },
                        weight=weight
                    )
                
                elif trend_direction == "DOWN" and rsi > 30:
                    confidence = min(0.8, trend_strength)
                    return RuleResult(
                        rule_name="trend_following",
                        decision=TradingDecision.SELL,
                        confidence=confidence,
                        reasoning=f"üìâ TREND SELL: {trend_direction} trend (strength: {trend_strength:.2f})",
                        supporting_data={
                            "trend_direction": trend_direction,
                            "trend_strength": trend_strength,
                            "rsi": rsi
                        },
                        weight=weight
                    )
            
            return None
            
        except Exception as e:
            print(f"‚ùå Trend following rule error: {e}")
            return None

    def _rule_mean_reversion(self, config: Dict, weight: float) -> Optional[RuleResult]:
        """üîÑ Mean Reversion Rule"""
        try:
            market_data = self.last_market_data
            
            bb_position = market_data.get("bollinger_position", 0.5)  # 0=lower, 1=upper
            rsi = market_data.get("rsi", 50)
            
            # Oversold condition
            if bb_position < 0.2 and rsi < 35:
                confidence = 0.7
                return RuleResult(
                    rule_name="mean_reversion",
                    decision=TradingDecision.BUY,
                    confidence=confidence,
                    reasoning=f"üîÑ MEAN REVERSION BUY: Oversold (BB: {bb_position:.2f}, RSI: {rsi:.1f})",
                    supporting_data={
                        "bollinger_position": bb_position,
                        "rsi": rsi,
                        "reversion_type": "OVERSOLD"
                    },
                    weight=weight
                )
            
            # Overbought condition
            elif bb_position > 0.8 and rsi > 65:
                confidence = 0.7
                return RuleResult(
                    rule_name="mean_reversion",
                    decision=TradingDecision.SELL,
                    confidence=confidence,
                    reasoning=f"üîÑ MEAN REVERSION SELL: Overbought (BB: {bb_position:.2f}, RSI: {rsi:.1f})",
                    supporting_data={
                        "bollinger_position": bb_position,
                        "rsi": rsi,
                        "reversion_type": "OVERBOUGHT"
                    },
                    weight=weight
                )
            
            return None
            
        except Exception as e:
            print(f"‚ùå Mean reversion rule error: {e}")
            return None

    def _rule_support_resistance(self, config: Dict, weight: float) -> Optional[RuleResult]:
        """üèõÔ∏è Support Resistance Rule"""
        try:
            market_data = self.last_market_data
            current_price = market_data.get("current_price", 0)
            
            support_levels = market_data.get("support_levels", [])
            resistance_levels = market_data.get("resistance_levels", [])
            
            # ‡∏´‡∏≤ level ‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
            closest_support = None
            closest_resistance = None
            
            for level in support_levels:
                distance = abs(current_price - level["level"])
                if distance < 50 * 0.01:  # ‡πÉ‡∏Å‡∏•‡πâ support
                    closest_support = level
                    break
            
            for level in resistance_levels:
                distance = abs(current_price - level["level"])
                if distance < 50 * 0.01:  # ‡πÉ‡∏Å‡∏•‡πâ resistance
                    closest_resistance = level
                    break
            
            # Near support = BUY opportunity
            if closest_support and current_price <= closest_support["level"] + 20 * 0.01:
                confidence = min(0.8, closest_support["strength"])
                return RuleResult(
                    rule_name="support_resistance",
                    decision=TradingDecision.BUY,
                    confidence=confidence,
                    reasoning=f"üèõÔ∏è SUPPORT BUY: Near support @ {closest_support['level']:.2f}",
                    supporting_data={
                        "level": closest_support["level"],
                        "strength": closest_support["strength"],
                        "level_type": "SUPPORT"
                    },
                    weight=weight
                )
            
            # Near resistance = SELL opportunity
            elif closest_resistance and current_price >= closest_resistance["level"] - 20 * 0.01:
                confidence = min(0.8, closest_resistance["strength"])
                return RuleResult(
                    rule_name="support_resistance",
                    decision=TradingDecision.SELL,
                    confidence=confidence,
                    reasoning=f"üèõÔ∏è RESISTANCE SELL: Near resistance @ {closest_resistance['level']:.2f}",
                    supporting_data={
                        "level": closest_resistance["level"],
                        "strength": closest_resistance["strength"],
                        "level_type": "RESISTANCE"
                    },
                    weight=weight
                )
            
            return None
            
        except Exception as e:
            print(f"‚ùå Support resistance rule error: {e}")
            return None

# ========================================================================================
# üéñÔ∏è PERFORMANCE AND LEARNING SYSTEM
# ========================================================================================

    def _track_rule_performance(self, rule_name: str, success: bool):
        """‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á rule"""
        try:
            if rule_name not in self.rule_performances:
                self.rule_performances[rule_name] = {
                    "success_count": 0,
                    "total_count": 0,
                    "avg_confidence": 0.0,
                    "last_updated": datetime.now()
                }
            
            perf = self.rule_performances[rule_name]
            perf["total_count"] += 1
            if success:
                perf["success_count"] += 1
            perf["last_updated"] = datetime.now()
            
            success_rate = perf["success_count"] / perf["total_count"]
            print(f"üìä Rule Performance Update: {rule_name}")
            print(f"   Success Rate: {success_rate:.1%} ({perf['success_count']}/{perf['total_count']})")
            
        except Exception as e:
            print(f"‚ùå Performance tracking error: {e}")

    def _adaptive_learning_update(self):
        """‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡πÅ‡∏ö‡∏ö adaptive"""
        try:
            if not self.rule_performances:
                return
            
            print("üß† === ADAPTIVE LEARNING UPDATE ===")
            
            # ‡∏õ‡∏£‡∏±‡∏ö weight ‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û
            for rule_name, perf in self.rule_performances.items():
                if perf["total_count"] >= 5:  # ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠
                    success_rate = perf["success_count"] / perf["total_count"]
                    
                    # ‡∏õ‡∏£‡∏±‡∏ö weight ‡πÉ‡∏ô config
                    if rule_name in self.rules_config.get("rules", {}):
                        current_weight = self.rules_config["rules"][rule_name].get("weight", 1.0)
                        
                        if success_rate > 0.7:
                            new_weight = min(2.0, current_weight * 1.1)  # ‡πÄ‡∏û‡∏¥‡πà‡∏° weight
                        elif success_rate < 0.4:
                            new_weight = max(0.3, current_weight * 0.9)  # ‡∏•‡∏î weight
                        else:
                            new_weight = current_weight
                        
                        self.rules_config["rules"][rule_name]["weight"] = new_weight
                        
                        if new_weight != current_weight:
                            print(f"‚ö° Weight Update: {rule_name}")
                            print(f"   Success Rate: {success_rate:.1%}")
                            print(f"   Weight: {current_weight:.2f} ‚Üí {new_weight:.2f}")
            
        except Exception as e:
            print(f"‚ùå Adaptive learning error: {e}")

    def get_rule_engine_status(self) -> Dict:
        """‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á Rule Engine"""
        try:
            return {
                "is_running": self.is_running,
                "current_mode": self.current_mode.value,
                "grid_phase": self.grid_state.current_phase.value,
                "grid_quality": self.grid_state.quality_score,
                "grid_balance": self.grid_state.grid_balance_ratio,
                "grid_completeness": self.grid_state.grid_completeness,
                "total_decisions": len(self.decision_history),
                "recent_decisions": len(self.recent_decisions),
                "rule_performances": dict(self.rule_performances),
                "capital_allocation": {
                    "optimal_grid_size": self.capital_allocation.optimal_grid_size if self.capital_allocation else 0,
                    "can_expand": self.capital_allocation.can_expand_grid if self.capital_allocation else False,
                    "margin_usage": self.capital_allocation.margin_usage_ratio if self.capital_allocation else 0
                } if self.capital_allocation else {},
                "market_context": {
                    "session": self.market_context.session.value if self.market_context else "UNKNOWN",
                    "volatility": self.market_context.volatility_level if self.market_context else "UNKNOWN",
                    "suitable_for_expansion": self._is_market_suitable_for_expansion()
                } if self.market_context else {}
            }
            
        except Exception as e:
            print(f"‚ùå Status retrieval error: {e}")
            return {"error": str(e)}