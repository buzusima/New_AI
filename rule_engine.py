"""
üß† Modern Rule Engine - Complete Flexible System
rule_engine.py
‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Modern AI Gold Grid Trading System - ‡∏£‡∏∞‡∏ö‡∏ö Rule-based ‡∏ó‡∏µ‡πà‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö Dynamic Spacing, Adaptive Grid Size, ‡πÅ‡∏•‡∏∞ Smart Resource Management
** PRODUCTION READY - NO MOCK DATA - WITH ALL MISSING METHODS **
"""

import time
import threading
import os
from datetime import datetime, timedelta
from typing import Dict, List, Tuple, Optional, Any, Union
from dataclasses import dataclass, field
from enum import Enum, auto
import json
import numpy as np
from collections import deque, defaultdict
import statistics
import math

# ========================================================================================
# üéØ ENUMS ‡πÅ‡∏•‡∏∞ DATA CLASSES
# ========================================================================================

class TradingDecision(Enum):
    """‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡πÄ‡∏ó‡∏£‡∏î"""
    BUY = "BUY"
    SELL = "SELL"
    CLOSE_PROFITABLE = "CLOSE_PROFITABLE"
    CLOSE_LOSING = "CLOSE_LOSING"
    CLOSE_ALL = "CLOSE_ALL"
    HOLD = "HOLD"
    EMERGENCY_STOP = "EMERGENCY_STOP"

class TradingMode(Enum):
    """‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î"""
    CONSERVATIVE = "CONSERVATIVE"
    MODERATE = "MODERATE" 
    AGGRESSIVE = "AGGRESSIVE"
    ADAPTIVE = "ADAPTIVE"
    EMERGENCY = "EMERGENCY"

class GridPhase(Enum):
    """‡πÄ‡∏ü‡∏™‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏¥‡∏î - 4 Phase System"""
    INITIALIZATION = "INITIALIZATION"    # Phase 1: ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
    MONITORING = "MONITORING"            # Phase 2: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡∏î‡∏∏‡∏•
    REBALANCING = "REBALANCING"          # Phase 3: ‡∏õ‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏î‡∏∏‡∏•‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞
    MAINTENANCE = "MAINTENANCE"          # Phase 4: ‡∏ö‡∏≥‡∏£‡∏∏‡∏á‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏Å‡∏£‡∏¥‡∏î

class MarketSession(Enum):
    """‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô‡∏ï‡∏•‡∏≤‡∏î"""
    ASIAN = "ASIAN"
    LONDON = "LONDON"
    NEW_YORK = "NEW_YORK"
    OVERLAP = "OVERLAP"
    QUIET = "QUIET"

class RiskLevel(Enum):
    """‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á"""
    VERY_LOW = "VERY_LOW"
    LOW = "LOW"
    MEDIUM = "MEDIUM"
    HIGH = "HIGH"
    CRITICAL = "CRITICAL"

@dataclass
class RuleResult:
    """‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å Rule"""
    rule_name: str
    decision: TradingDecision
    confidence: float  # 0.0 - 1.0
    reasoning: str
    supporting_data: Dict = field(default_factory=dict)
    weight: float = 1.0
    execution_priority: int = 1  # 1=highest, 5=lowest
    market_context: Dict = field(default_factory=dict)
    risk_assessment: Dict = field(default_factory=dict)
    timestamp: datetime = field(default_factory=datetime.now)
    
    @property
    def weighted_confidence(self) -> float:
        """‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô‡∏ñ‡πà‡∏ß‡∏á‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å"""
        return self.confidence * self.weight

@dataclass
class GridState:
    """‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á Grid ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"""
    current_phase: GridPhase
    buy_levels: List[float] = field(default_factory=list)
    sell_levels: List[float] = field(default_factory=list)
    missing_buy_slots: List[float] = field(default_factory=list)
    missing_sell_slots: List[float] = field(default_factory=list)
    grid_balance_ratio: float = 0.5  # 0.0=all sell, 1.0=all buy
    grid_completeness: float = 0.0   # 0.0-1.0
    last_grid_action: datetime = field(default_factory=datetime.now)
    quality_score: float = 0.0       # ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡∏Å‡∏£‡∏¥‡∏î‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    spacing_efficiency: float = 0.0  # ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á spacing
    
    @property
    def total_orders(self) -> int:
        """‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏£‡∏ß‡∏°"""
        return len(self.buy_levels) + len(self.sell_levels)
    
    @property
    def is_balanced(self) -> bool:
        """‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏Å‡∏£‡∏¥‡∏î‡∏™‡∏°‡∏î‡∏∏‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
        return 0.3 <= self.grid_balance_ratio <= 0.7

@dataclass
class CapitalAllocation:
    """‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡∏£‡∏£‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏∏‡∏ô"""
    total_balance: float
    available_margin: float
    used_margin: float
    free_margin: float
    max_grid_allocation: float  # % ‡∏Ç‡∏≠‡∏á‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏∏‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö‡∏Å‡∏£‡∏¥‡∏î
    optimal_grid_size: int     # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
    risk_budget: float         # ‡∏á‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠
    
    @property
    def margin_usage_ratio(self) -> float:
        """‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ margin"""
        return self.used_margin / self.available_margin if self.available_margin > 0 else 0
    
    @property
    def can_expand_grid(self) -> bool:
        """‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ç‡∏¢‡∏≤‡∏¢‡∏Å‡∏£‡∏¥‡∏î‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
        return self.margin_usage_ratio < 0.7 and self.risk_budget > 0

@dataclass
class MarketContext:
    """‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡∏ï‡∏•‡∏≤‡∏î‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"""
    session: MarketSession
    volatility_level: str  # VERY_LOW, LOW, MEDIUM, HIGH, VERY_HIGH
    trend_direction: str   # UP, DOWN, SIDEWAYS
    trend_strength: float  # 0.0-1.0
    liquidity_level: str   # HIGH, MEDIUM, LOW
    spread_condition: str  # NORMAL, WIDE, VERY_WIDE
    momentum: float        # -1.0 to 1.0
    
    @property
    def is_favorable_for_grid(self) -> bool:
        """‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏™‡∏†‡∏≤‡∏û‡∏ï‡∏•‡∏≤‡∏î‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏Å‡∏£‡∏¥‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
        return (self.volatility_level in ["LOW", "MEDIUM"] and 
                self.liquidity_level in ["HIGH", "MEDIUM"] and
                self.spread_condition == "NORMAL")

# ========================================================================================
# üß† MODERN RULE ENGINE CLASS
# ========================================================================================

class ModernRuleEngine:
    """
    üß† Modern Rule Engine - Flexible & Adaptive Edition
    
    ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏´‡∏°‡πà:
    - 4-Phase Grid Management System
    - Dynamic Spacing ‡∏ï‡∏≤‡∏° Volatility  
    - Adaptive Grid Size ‡∏ï‡∏≤‡∏°‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏∏‡∏ô
    - Smart Resource Allocation
    - Context-Aware Decision Making
    - Flexible Balance Management
    - Quality-Driven Grid Building
    ** NO STOP LOSS - FOCUS ON PROFIT & RECOVERY **
    """
    
    def __init__(self, config: Dict, market_analyzer, order_manager, 
                 position_manager, performance_tracker):
        # Core components - REAL connections only
        self.rules_config = config
        self.market_analyzer = market_analyzer
        self.order_manager = order_manager
        self.position_manager = position_manager
        self.performance_tracker = performance_tracker
        
        # Grid state management
        self.grid_state = GridState(current_phase=GridPhase.INITIALIZATION)
        self.capital_allocation = None
        self.market_context = None
        
        # Engine state
        self.is_running = False
        self.current_mode = TradingMode.MODERATE
        self.engine_thread = None
        
        # Data tracking
        self.last_market_data = {}
        self.last_portfolio_data = {}
        self.recent_decisions = deque(maxlen=100)
        self.decision_history = []
        
        # Performance tracking
        self.rule_performances = defaultdict(lambda: {
            "success_count": 0,
            "total_count": 0,
            "avg_confidence": 0.0,
            "last_updated": datetime.now()
        })
        
        # Grid management
        self.last_grid_analysis_time = datetime.now()
        self.grid_analysis_interval = 30  # ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
        self.spacing_history = deque(maxlen=50)
        
        print("üß† Modern Rule Engine initialized with Flexible Grid System")
    
    # ========================================================================================
    # üéÆ ENGINE CONTROL METHODS
    # ========================================================================================
    
    def start(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Rule Engine"""
        if self.is_running:
            print("‚ö†Ô∏è Rule engine already running")
            return
            
        self.is_running = True
        self.engine_thread = threading.Thread(target=self._engine_loop, daemon=True)
        self.engine_thread.start()
        print("üöÄ Flexible Rule Engine started")
    
    def stop(self):
        """‡∏´‡∏¢‡∏∏‡∏î Rule Engine"""
        self.is_running = False
        if self.engine_thread:
            self.engine_thread.join(timeout=5)
        print("üõë Rule engine stopped")
    
    def set_trading_mode(self, mode: TradingMode):
        """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î"""
        if isinstance(mode, str):
            # ‡πÅ‡∏õ‡∏•‡∏á string ‡πÄ‡∏õ‡πá‡∏ô enum ‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
            mode_mapping = {
                "CONSERVATIVE": TradingMode.CONSERVATIVE,
                "MODERATE": TradingMode.MODERATE,
                "BALANCED": TradingMode.MODERATE,
                "AGGRESSIVE": TradingMode.AGGRESSIVE,
                "ADAPTIVE": TradingMode.ADAPTIVE
            }
            mode = mode_mapping.get(mode, TradingMode.MODERATE)
        
        self.current_mode = mode
        print(f"üéØ Trading mode set to: {mode.value}")
    
    # ========================================================================================
    # üîÑ MAIN ENGINE LOOP  
    # ========================================================================================
    
    def _engine_loop(self):
        """Main engine loop - ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô GUI version"""
        print("üîÑ Rule engine loop started (background)")
        while self.is_running:
            try:
                # Execute one decision cycle
                decision_result = self._execute_rule_based_decision()
                
                if decision_result:
                    self._execute_trading_decision(decision_result)
                
                # Performance updates
                self._update_rule_performances()
                
                # Sleep based on mode
                sleep_time = self._get_sleep_time()
                time.sleep(sleep_time)
                
            except Exception as e:
                print(f"‚ùå Engine loop error: {e}")
                time.sleep(10)  # Error recovery
    
    def _get_sleep_time(self) -> int:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏¢‡∏∏‡∏î‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏£‡∏≠‡∏ö"""
        mode_timings = {
            TradingMode.CONSERVATIVE: 60,
            TradingMode.MODERATE: 30,
            TradingMode.AGGRESSIVE: 15,
            TradingMode.ADAPTIVE: 20,
            TradingMode.EMERGENCY: 5
        }
        return mode_timings.get(self.current_mode, 30)
    
    # ========================================================================================
    # üéØ MAIN DECISION MAKING SYSTEM
    # ========================================================================================
    
    def _execute_rule_based_decision(self) -> Optional[RuleResult]:
        """
        ‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏ï‡∏≤‡∏° Rules - ‡∏´‡∏±‡∏ß‡πÉ‡∏à‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö
        
        Returns:
            RuleResult ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£, None ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£
        """
        try:
            # ‡πÄ‡∏Å‡πá‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å rules
            rule_results = []
            
            # ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏ï‡πà‡∏•‡∏∞ rule
            for rule_name, rule_config in self.rules_config.get("rules", {}).items():
                if not rule_config.get("enabled", True):
                    continue
                
                rule_result = self._execute_individual_rule(rule_name, rule_config)
                if rule_result:
                    rule_results.append(rule_result)
            
            if not rule_results:
                return None
            
            # ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏î‡πâ‡∏ß‡∏¢‡∏£‡∏∞‡∏ö‡∏ö‡∏ñ‡πà‡∏ß‡∏á‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å
            final_decision = self._make_weighted_decision(rule_results)
            
            return final_decision
            
        except Exception as e:
            print(f"‚ùå Rule execution error: {e}")
            return None
    
    def _execute_individual_rule(self, rule_name: str, rule_config: Dict) -> Optional[RuleResult]:
        """
        ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£ rule ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡∏±‡∏ß
        
        Args:
            rule_name: ‡∏ä‡∏∑‡πà‡∏≠ rule
            rule_config: ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ rule
            
        Returns:
            RuleResult ‡∏ñ‡πâ‡∏≤ rule trigger, None ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà
        """
        try:
            confidence_threshold = rule_config.get("confidence_threshold", 0.6)
            weight = rule_config.get("weight", 1.0)
            
            # ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£ rule logic ‡πÄ‡∏â‡∏û‡∏≤‡∏∞
            if rule_name == "grid_expansion":
                return self._rule_grid_expansion(rule_config, weight)
            elif rule_name == "portfolio_balance":
                return self._rule_portfolio_balance(rule_config, weight)
            elif rule_name == "trend_following":
                return self._rule_trend_following(rule_config, weight)
            elif rule_name == "mean_reversion":
                return self._rule_mean_reversion(rule_config, weight)
            elif rule_name == "support_resistance":
                return self._rule_support_resistance(rule_config, weight)
            elif rule_name == "volatility_adaptation":
                return self._rule_volatility_adaptation(rule_config, weight)
            elif rule_name == "session_timing":
                return self._rule_session_timing(rule_config, weight)
            else:
                print(f"‚ö†Ô∏è Unknown rule: {rule_name}")
                return None
                
        except Exception as e:
            print(f"‚ùå Individual rule error ({rule_name}): {e}")
            return None
    
    def _make_weighted_decision(self, rule_results: List[RuleResult]) -> Optional[RuleResult]:
        """
        ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏î‡πâ‡∏ß‡∏¢‡∏£‡∏∞‡∏ö‡∏ö‡∏ñ‡πà‡∏ß‡∏á‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å
        
        Args:
            rule_results: ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å‡πÅ‡∏ï‡πà‡∏•‡∏∞ rule
            
        Returns:
            RuleResult ‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢ ‡∏´‡∏£‡∏∑‡∏≠ None
        """
        try:
            if not rule_results:
                return None
            
            print("üéØ === WEIGHTED DECISION MAKING ===")
            
            # ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡∏°‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à
            decision_groups = defaultdict(list)
            for result in rule_results:
                decision_groups[result.decision].append(result)
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ñ‡πà‡∏ß‡∏á‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
            decision_scores = {}
            for decision_type, results in decision_groups.items():
                total_weighted_confidence = sum(r.weighted_confidence for r in results)
                decision_scores[decision_type] = {
                    "score": total_weighted_confidence,
                    "results": results,
                    "avg_confidence": total_weighted_confidence / len(results)
                }
                print(f"   {decision_type.value}: {total_weighted_confidence:.3f} ({len(results)} rules)")
            
            # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
            if decision_scores:
                best_decision = max(decision_scores.keys(), key=lambda k: decision_scores[k]["score"])
                best_results = decision_scores[best_decision]["results"]
                
                # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å result ‡∏ó‡∏µ‡πà‡∏°‡∏µ confidence ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏°
                final_result = max(best_results, key=lambda r: r.confidence)
                
                print(f"üèÜ Final Decision: {final_result.decision.value}")
                print(f"   Confidence: {final_result.confidence:.1%}")
                print(f"   Reasoning: {final_result.reasoning}")
                
                return final_result
            
            return None
            
        except Exception as e:
            print(f"‚ùå Weighted decision error: {e}")
            return None

    # ========================================================================================
    # üìä INDIVIDUAL RULE IMPLEMENTATIONS
    # ========================================================================================
    
    def _rule_grid_expansion(self, rule_config: Dict, weight: float) -> Optional[RuleResult]:
        """Rule: ‡∏Å‡∏≤‡∏£‡∏Ç‡∏¢‡∏≤‡∏¢‡∏Å‡∏£‡∏¥‡∏î‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞"""
        try:
            if not self.last_market_data or not self.last_portfolio_data:
                return None
            
            analysis = self._get_grid_analysis()
            
            # ‡πÉ‡∏ä‡πâ Grid Phase Logic
            return self._execute_grid_phase_logic(analysis, rule_config, weight)
            
        except Exception as e:
            print(f"‚ùå Grid expansion rule error: {e}")
            return None
    
    def _rule_portfolio_balance(self, rule_config: Dict, weight: float) -> Optional[RuleResult]:
        """Rule: ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏î‡∏∏‡∏• Portfolio"""
        try:
            if not self.last_portfolio_data:
                return None
            
            positions = self.last_portfolio_data.get("positions", [])
            if not positions:
                return None
            
            # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏õ‡∏¥‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÅ‡∏ö‡∏ö intelligent
            profitable_positions = [p for p in positions if p.get("profit", 0) > 0]
            losing_positions = [p for p in positions if p.get("profit", 0) < 0]
            
            if profitable_positions and losing_positions:
                # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡πÅ‡∏ö‡∏ö optimal combination
                best_combination = self._find_optimal_close_combination(profitable_positions, losing_positions)
                
                if best_combination and best_combination["net_profit"] > 0:
                    confidence = min(0.9, best_combination["confidence"])
                    
                    return RuleResult(
                        rule_name="portfolio_balance",
                        decision=TradingDecision.CLOSE_PROFITABLE,
                        confidence=confidence,
                        reasoning=f"üí∞ PORTFOLIO BALANCE: Close {len(best_combination['positions'])} positions for ${best_combination['net_profit']:.2f}",
                        supporting_data=best_combination,
                        weight=weight
                    )
            
            return None
            
        except Exception as e:
            print(f"‚ùå Portfolio balance rule error: {e}")
            return None
    
    def _rule_trend_following(self, rule_config: Dict, weight: float) -> Optional[RuleResult]:
        """Rule: ‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏ï‡∏≤‡∏°‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå"""
        try:
            if not self.last_market_data:
                return None
            
            trend_direction = self.last_market_data.get("trend_direction")
            trend_strength = self.last_market_data.get("trend_strength", 0)
            
            if not trend_direction or trend_strength < 0.6:
                return None
            
            current_price = self.last_market_data.get("current_price", 0)
            analysis = self._get_grid_analysis()
            
            # ‡πÄ‡∏ó‡∏£‡∏î‡∏ï‡∏≤‡∏°‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå
            if trend_direction == "UP" and analysis.get("next_buy_slot"):
                confidence = min(0.8, trend_strength)
                return RuleResult(
                    rule_name="trend_following",
                    decision=TradingDecision.BUY,
                    confidence=confidence,
                    reasoning=f"üìà TREND FOLLOW: Strong uptrend (strength: {trend_strength:.1%})",
                    supporting_data={"trend_direction": trend_direction, "trend_strength": trend_strength},
                    weight=weight
                )
            
            elif trend_direction == "DOWN" and analysis.get("next_sell_slot"):
                confidence = min(0.8, trend_strength)
                return RuleResult(
                    rule_name="trend_following",
                    decision=TradingDecision.SELL,
                    confidence=confidence,
                    reasoning=f"üìâ TREND FOLLOW: Strong downtrend (strength: {trend_strength:.1%})",
                    supporting_data={"trend_direction": trend_direction, "trend_strength": trend_strength},
                    weight=weight
                )
            
            return None
            
        except Exception as e:
            print(f"‚ùå Trend following rule error: {e}")
            return None

    def _rule_mean_reversion(self, rule_config: Dict, weight: float) -> Optional[RuleResult]:
        """Rule: ‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î Mean Reversion"""
        try:
            if not self.last_market_data:
                return None
            
            rsi = self.last_market_data.get("rsi")
            bollinger_position = self.last_market_data.get("bollinger_position")
            
            if rsi is None or bollinger_position is None:
                return None
            
            analysis = self._get_grid_analysis()
            
            # Oversold condition - ‡πÄ‡∏ß‡∏•‡∏≤‡∏ã‡∏∑‡πâ‡∏≠
            if rsi < 30 or bollinger_position < -1.5:
                if analysis.get("next_buy_slot"):
                    oversold_strength = max((30 - rsi) / 30, abs(bollinger_position + 1.5) / 1.0) if rsi < 30 else abs(bollinger_position + 1.5) / 1.0
                    confidence = min(0.85, 0.5 + oversold_strength * 0.4)
                    
                    return RuleResult(
                        rule_name="mean_reversion",
                        decision=TradingDecision.BUY,
                        confidence=confidence,
                        reasoning=f"üìâ‚û°Ô∏èüìà MEAN REVERT BUY: RSI {rsi:.1f}, BB {bollinger_position:.2f}",
                        supporting_data={"rsi": rsi, "bollinger_position": bollinger_position},
                        weight=weight
                    )
            
            # Overbought condition - ‡πÄ‡∏ß‡∏•‡∏≤‡∏Ç‡∏≤‡∏¢
            elif rsi > 70 or bollinger_position > 1.5:
                if analysis.get("next_sell_slot"):
                    overbought_strength = max((rsi - 70) / 30, (bollinger_position - 1.5) / 1.0) if rsi > 70 else (bollinger_position - 1.5) / 1.0
                    confidence = min(0.85, 0.5 + overbought_strength * 0.4)
                    
                    return RuleResult(
                        rule_name="mean_reversion",
                        decision=TradingDecision.SELL,
                        confidence=confidence,
                        reasoning=f"üìà‚û°Ô∏èüìâ MEAN REVERT SELL: RSI {rsi:.1f}, BB {bollinger_position:.2f}",
                        supporting_data={"rsi": rsi, "bollinger_position": bollinger_position},
                        weight=weight
                    )
            
            return None
            
        except Exception as e:
            print(f"‚ùå Mean reversion rule error: {e}")
            return None

    def _rule_support_resistance(self, rule_config: Dict, weight: float) -> Optional[RuleResult]:
        """Rule: ‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏ï‡∏≤‡∏° Support/Resistance"""
        try:
            if not self.last_market_data:
                return None
            
            current_price = self.last_market_data.get("current_price", 0)
            support_levels = self.last_market_data.get("support_levels", [])
            resistance_levels = self.last_market_data.get("resistance_levels", [])
            
            if not support_levels and not resistance_levels:
                return None
            
            analysis = self._get_grid_analysis()
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Support levels - ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏ã‡∏∑‡πâ‡∏≠
            if support_levels and analysis.get("next_buy_slot"):
                closest_support = min(support_levels, key=lambda x: abs(x["level"] - current_price))
                distance_pct = abs(closest_support["level"] - current_price) / current_price * 100
                
                if distance_pct < 0.1:  # ‡πÉ‡∏Å‡∏•‡πâ support < 0.1%
                    confidence = min(0.8, closest_support["strength"])
                    
                    return RuleResult(
                        rule_name="support_resistance",
                        decision=TradingDecision.BUY,
                        confidence=confidence,
                        reasoning=f"üõ°Ô∏è SUPPORT BUY: Near support @ {closest_support['level']:.2f}",
                        supporting_data={
                            "level": closest_support["level"],
                            "strength": closest_support["strength"],
                            "level_type": "SUPPORT"
                        },
                        weight=weight
                    )
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Resistance levels - ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏Ç‡∏≤‡∏¢
            if resistance_levels and analysis.get("next_sell_slot"):
                closest_resistance = min(resistance_levels, key=lambda x: abs(x["level"] - current_price))
                distance_pct = abs(closest_resistance["level"] - current_price) / current_price * 100
                
                if distance_pct < 0.1:  # ‡πÉ‡∏Å‡∏•‡πâ resistance < 0.1%
                    confidence = min(0.8, closest_resistance["strength"])
                    
                    return RuleResult(
                        rule_name="support_resistance",
                        decision=TradingDecision.SELL,
                        confidence=confidence,
                        reasoning=f"üèõÔ∏è RESISTANCE SELL: Near resistance @ {closest_resistance['level']:.2f}",
                        supporting_data={
                            "level": closest_resistance["level"],
                            "strength": closest_resistance["strength"],
                            "level_type": "RESISTANCE"
                        },
                        weight=weight
                    )
            
            return None
            
        except Exception as e:
            print(f"‚ùå Support resistance rule error: {e}")
            return None

    def _rule_volatility_adaptation(self, rule_config: Dict, weight: float) -> Optional[RuleResult]:
        """Rule: ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡∏ï‡∏≤‡∏° Volatility"""
        try:
            if not self.last_market_data:
                return None
            
            volatility = self.last_market_data.get("volatility", 0)
            atr = self.last_market_data.get("atr", 0)
            
            if volatility == 0 or atr == 0:
                return None
            
            analysis = self._get_grid_analysis()
            
            # Volatility ‡∏™‡∏π‡∏á = ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ç‡∏¢‡∏≤‡∏¢‡∏Å‡∏£‡∏¥‡∏î
            if volatility > 0.7 and analysis["total_orders"] < analysis.get("optimal_grid_size", 10):
                confidence = min(0.75, volatility)
                
                # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏ï‡∏≤‡∏° momentum
                momentum = self.last_market_data.get("momentum", 0)
                
                if momentum > 0 and analysis.get("next_buy_slot"):
                    return RuleResult(
                        rule_name="volatility_adaptation",
                        decision=TradingDecision.BUY,
                        confidence=confidence,
                        reasoning=f"‚ö° VOLATILITY BUY: High vol {volatility:.1%}, positive momentum",
                        supporting_data={"volatility": volatility, "momentum": momentum},
                        weight=weight
                    )
                elif momentum < 0 and analysis.get("next_sell_slot"):
                    return RuleResult(
                        rule_name="volatility_adaptation",
                        decision=TradingDecision.SELL,
                        confidence=confidence,
                        reasoning=f"‚ö° VOLATILITY SELL: High vol {volatility:.1%}, negative momentum",
                        supporting_data={"volatility": volatility, "momentum": momentum},
                        weight=weight
                    )
            
            return None
            
        except Exception as e:
            print(f"‚ùå Volatility adaptation rule error: {e}")
            return None

    def _rule_session_timing(self, rule_config: Dict, weight: float) -> Optional[RuleResult]:
        """Rule: ‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏ï‡∏≤‡∏°‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô"""
        try:
            if not self.last_market_data:
                return None
            
            session = self.last_market_data.get("session", "QUIET")
            liquidity = self.last_market_data.get("liquidity_level", "LOW")
            
            analysis = self._get_grid_analysis()
            
            # ‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ç‡∏¢‡∏≤‡∏¢‡∏Å‡∏£‡∏¥‡∏î
            if session in ["LONDON", "NEW_YORK", "OVERLAP"] and liquidity in ["HIGH", "MEDIUM"]:
                if analysis["total_orders"] < analysis.get("optimal_grid_size", 10):
                    confidence = 0.6
                    
                    # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏ï‡∏≤‡∏° bias ‡∏Ç‡∏≠‡∏á‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô
                    session_bias = self._get_session_bias(session)
                    
                    if session_bias == "BUY" and analysis.get("next_buy_slot"):
                        return RuleResult(
                            rule_name="session_timing",
                            decision=TradingDecision.BUY,
                            confidence=confidence,
                            reasoning=f"üïê SESSION BUY: {session} session, high liquidity",
                            supporting_data={"session": session, "liquidity": liquidity},
                            weight=weight
                        )
                    elif session_bias == "SELL" and analysis.get("next_sell_slot"):
                        return RuleResult(
                            rule_name="session_timing",
                            decision=TradingDecision.SELL,
                            confidence=confidence,
                            reasoning=f"üïê SESSION SELL: {session} session, high liquidity",
                            supporting_data={"session": session, "liquidity": liquidity},
                            weight=weight
                        )
            
            return None
            
        except Exception as e:
            print(f"‚ùå Session timing rule error: {e}")
            return None

    # ========================================================================================
    # üèóÔ∏è 4-PHASE GRID LOGIC SYSTEM
    # ========================================================================================
    
    def _execute_grid_phase_logic(self, analysis: Dict, params: Dict, weight: float) -> Optional[RuleResult]:
        """‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏≤‡∏° Phase ‡∏Ç‡∏≠‡∏á‡∏Å‡∏£‡∏¥‡∏î"""
        try:
            current_phase = self.grid_state.current_phase
            
            print(f"üéØ EXECUTING PHASE: {current_phase.value}")
            
            if current_phase == GridPhase.INITIALIZATION:
                return self._phase_1_initialization(analysis, params, weight)
            elif current_phase == GridPhase.MONITORING:
                return self._phase_2_monitoring(analysis, params, weight)
            elif current_phase == GridPhase.REBALANCING:
                return self._phase_3_rebalancing(analysis, params, weight)
            elif current_phase == GridPhase.MAINTENANCE:
                return self._phase_4_maintenance(analysis, params, weight)
            else:
                print(f"‚ùå Unknown grid phase: {current_phase}")
                return None
                
        except Exception as e:
            print(f"‚ùå Grid phase execution error: {e}")
            return None
    
    def _phase_1_initialization(self, analysis: Dict, params: Dict, weight: float) -> Optional[RuleResult]:
            """
            üèóÔ∏è Phase 1: Grid Initialization - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡πâ‡∏ô‡∏±‡∏ö positions ‡∏î‡πâ‡∏ß‡∏¢
            """
            try:
                print("üèóÔ∏è === PHASE 1: GRID INITIALIZATION ===")
                
                current_price = analysis["current_price"]
                total_orders = analysis["total_orders"]
                buy_orders = analysis["buy_orders"]    # ‡∏£‡∏ß‡∏° positions + pending
                sell_orders = analysis["sell_orders"]  # ‡∏£‡∏ß‡∏° positions + pending
                optimal_size = params.get("optimal_grid_size", 10)
                
                # ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏¥‡∏î‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏ù‡∏±‡πà‡∏á‡∏•‡∏∞ 40% ‡∏Ç‡∏≠‡∏á optimal size
                initial_target_per_side = max(2, int(optimal_size * 0.4))
                
                print(f"üéØ Initialization Target: {initial_target_per_side} orders per side")
                print(f"   Current: BUY={buy_orders} (including positions) SELL={sell_orders} (including positions)")
                
                # Priority 1: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏¥‡∏î‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö
                if buy_orders < initial_target_per_side and analysis.get("next_buy_slot"):
                    confidence = 0.85  # ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô‡∏™‡∏π‡∏á‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
                    return RuleResult(
                        rule_name="grid_expansion",
                        decision=TradingDecision.BUY,
                        confidence=confidence,
                        reasoning=f"üèóÔ∏è INIT: Build BUY foundation ({buy_orders}/{initial_target_per_side})",
                        supporting_data={
                            "target_price": analysis["next_buy_slot"],
                            "phase": "INITIALIZATION",
                            "target": initial_target_per_side,
                            "current": buy_orders
                        },
                        weight=weight
                    )
                
                elif sell_orders < initial_target_per_side and analysis.get("next_sell_slot"):
                    confidence = 0.85
                    return RuleResult(
                        rule_name="grid_expansion",
                        decision=TradingDecision.SELL,
                        confidence=confidence,
                        reasoning=f"üèóÔ∏è INIT: Build SELL foundation ({sell_orders}/{initial_target_per_side})",
                        supporting_data={
                            "target_price": analysis["next_sell_slot"],
                            "phase": "INITIALIZATION",
                            "target": initial_target_per_side,
                            "current": sell_orders
                        },
                        weight=weight
                    )
                
                # ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏£‡∏¥‡∏î‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß -> ‡πÑ‡∏õ Phase 2
                if (buy_orders >= initial_target_per_side and 
                    sell_orders >= initial_target_per_side):
                    self.grid_state.current_phase = GridPhase.MONITORING
                    print("üéØ Phase 1 Complete -> Moving to Phase 2: MONITORING")
                    
                # ‡∏´‡∏£‡∏∑‡∏≠‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏°‡πà‡∏™‡∏°‡∏î‡∏∏‡∏•‡∏°‡∏≤‡∏Å -> ‡πÑ‡∏õ Rebalancing
                elif total_orders > 0:
                    balance_ratio = buy_orders / total_orders
                    if abs(balance_ratio - 0.5) > 0.3:  # ‡πÑ‡∏°‡πà‡∏™‡∏°‡∏î‡∏∏‡∏•‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 30%
                        self.grid_state.current_phase = GridPhase.REBALANCING
                        print(f"üéØ Severe Imbalance Detected ({balance_ratio:.1%}) -> Moving to REBALANCING")
                
                return None
                
            except Exception as e:
                print(f"‚ùå Phase 1 error: {e}")
                return None

    def _phase_2_monitoring(self, analysis: Dict, params: Dict, weight: float) -> Optional[RuleResult]:
        """
        üëÄ Phase 2: Grid Monitoring - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡∏î‡∏∏‡∏•‡πÅ‡∏•‡∏∞‡πÇ‡∏≠‡∏Å‡∏≤‡∏™
        
        ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢:
        - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡∏î‡∏∏‡∏•‡∏Ç‡∏≠‡∏á‡∏Å‡∏£‡∏¥‡∏î
        - ‡∏´‡∏≤‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ç‡∏¢‡∏≤‡∏¢‡∏Å‡∏£‡∏¥‡∏î‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ä‡∏≤‡∏ç‡∏â‡∏•‡∏≤‡∏î
        - ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡∏Å‡∏£‡∏¥‡∏î
        """
        try:
            print("üëÄ === PHASE 2: GRID MONITORING ===")
            
            balance_ratio = analysis.get("balance_ratio", 0.5)
            grid_quality = analysis.get("grid_quality", 0.0)
            optimal_size = params.get("optimal_grid_size", 10)
            
            print(f"üìä Grid Status: Balance {balance_ratio:.1%}, Quality {grid_quality:.1%}")
            
            # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏°‡πà‡∏™‡∏°‡∏î‡∏∏‡∏•
            if balance_ratio < 0.3:  # ‡∏°‡∏µ SELL ‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
                if analysis.get("next_buy_slot"):
                    confidence = 0.7
                    return RuleResult(
                        rule_name="grid_expansion",
                        decision=TradingDecision.BUY,
                        confidence=confidence,
                        reasoning=f"‚öñÔ∏è BALANCE: Too many sells ({balance_ratio:.1%}), add BUY",
                        supporting_data={
                            "phase": "MONITORING",
                            "balance_issue": "TOO_MANY_SELLS",
                            "balance_ratio": balance_ratio
                        },
                        weight=weight
                    )
            
            elif balance_ratio > 0.7:  # ‡∏°‡∏µ BUY ‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
                if analysis.get("next_sell_slot"):
                    confidence = 0.7
                    return RuleResult(
                        rule_name="grid_expansion",
                        decision=TradingDecision.SELL,
                        confidence=confidence,
                        reasoning=f"‚öñÔ∏è BALANCE: Too many buys ({balance_ratio:.1%}), add SELL",
                        supporting_data={
                            "phase": "MONITORING",
                            "balance_issue": "TOO_MANY_BUYS",
                            "balance_ratio": balance_ratio
                        },
                        weight=weight
                    )
            
            # ‡∏Ç‡∏¢‡∏≤‡∏¢‡∏Å‡∏£‡∏¥‡∏î‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡πÅ‡∏•‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏∏‡∏ô‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠
            if (analysis["total_orders"] < optimal_size * 0.8 and 
                self.capital_allocation and self.capital_allocation.can_expand_grid):
                
                # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤
                if balance_ratio < 0.5 and analysis.get("next_buy_slot"):
                    confidence = 0.65
                    return RuleResult(
                        rule_name="grid_expansion",
                        decision=TradingDecision.BUY,
                        confidence=confidence,
                        reasoning=f"üìà EXPAND: Opportunity expansion, need more BUY orders",
                        supporting_data={
                            "phase": "MONITORING",
                            "expansion_reason": "OPPORTUNITY",
                            "grid_utilization": analysis["total_orders"] / optimal_size
                        },
                        weight=weight
                    )
                elif balance_ratio > 0.5 and analysis.get("next_sell_slot"):
                    confidence = 0.65
                    return RuleResult(
                        rule_name="grid_expansion",
                        decision=TradingDecision.SELL,
                        confidence=confidence,
                        reasoning=f"üìâ EXPAND: Opportunity expansion, need more SELL orders",
                        supporting_data={
                            "phase": "MONITORING",
                            "expansion_reason": "OPPORTUNITY",
                            "grid_utilization": analysis["total_orders"] / optimal_size
                        },
                        weight=weight
                    )
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏õ Phase 3 ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            needs_rebalancing = (
                abs(balance_ratio - 0.5) > 0.25 or  # ‡πÑ‡∏°‡πà‡∏™‡∏°‡∏î‡∏∏‡∏•‡∏°‡∏≤‡∏Å
                grid_quality < 0.6 or                # ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏ï‡πà‡∏≥
                analysis["total_orders"] > optimal_size * 1.2  # ‡∏°‡∏µ‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô
            )
            
            if needs_rebalancing:
                self.grid_state.current_phase = GridPhase.REBALANCING
                print("üéØ Moving to Phase 3: REBALANCING")
            
            return None
            
        except Exception as e:
            print(f"‚ùå Phase 2 error: {e}")
            return None

    def _phase_3_rebalancing(self, analysis: Dict, params: Dict, weight: float) -> Optional[RuleResult]:
        """
        ‚öñÔ∏è Phase 3: Grid Rebalancing - ‡∏õ‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏î‡∏∏‡∏•‡∏Å‡∏£‡∏¥‡∏î‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ä‡∏≤‡∏ç‡∏â‡∏•‡∏≤‡∏î
        
        ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢:
        - ‡∏õ‡∏¥‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
        - ‡∏õ‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏î‡∏∏‡∏•‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á BUY/SELL
        - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏Å‡∏£‡∏¥‡∏î
        """
        try:
            print("‚öñÔ∏è === PHASE 3: GRID REBALANCING ===")
            
            if not self.last_portfolio_data:
                return None
            
            positions = self.last_portfolio_data.get("positions", [])
            balance_ratio = analysis.get("balance_ratio", 0.5)
            
            # Priority 1: ‡∏õ‡∏¥‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏¥‡∏î‡∏ô‡∏≤‡∏ô
            old_losing_positions = [
                p for p in positions 
                if (p.get("profit", 0) < 0 and 
                    (datetime.now() - p.get("open_time", datetime.now())).total_seconds() > 3600)
            ]
            
            if old_losing_positions:
                # ‡∏´‡∏≤‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏Å‡∏≥‡πÑ‡∏£‡∏°‡∏≤‡∏´‡∏±‡∏Å‡∏•‡∏ö
                profitable_positions = [p for p in positions if p.get("profit", 0) > 0]
                
                if profitable_positions:
                    optimal_close = self._find_optimal_close_combination(
                        profitable_positions, old_losing_positions
                    )
                    
                    if optimal_close and optimal_close.get("net_profit", 0) > 0:
                        confidence = 0.8
                        return RuleResult(
                            rule_name="portfolio_balance",
                            decision=TradingDecision.CLOSE_PROFITABLE,
                            confidence=confidence,
                            reasoning=f"‚öñÔ∏è REBALANCE: Close old positions for ${optimal_close['net_profit']:.2f}",
                            supporting_data={
                                "phase": "REBALANCING",
                                "close_combination": optimal_close
                            },
                            weight=weight
                        )
            
            # Priority 2: ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏°‡πà‡∏™‡∏°‡∏î‡∏∏‡∏•
            if abs(balance_ratio - 0.5) > 0.3:
                if balance_ratio < 0.3:  # ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ BUY ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤
                    if analysis.get("next_buy_slot"):
                        confidence = 0.75
                        return RuleResult(
                            rule_name="grid_expansion",
                            decision=TradingDecision.BUY,
                            confidence=confidence,
                            reasoning=f"‚öñÔ∏è REBALANCE: Severe imbalance, add BUY ({balance_ratio:.1%})",
                            supporting_data={
                                "phase": "REBALANCING",
                                "balance_ratio": balance_ratio,
                                "action": "ADD_BUY"
                            },
                            weight=weight
                        )
                
                elif balance_ratio > 0.7:  # ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ SELL ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤
                    if analysis.get("next_sell_slot"):
                        confidence = 0.75
                        return RuleResult(
                            rule_name="grid_expansion",
                            decision=TradingDecision.SELL,
                            confidence=confidence,
                            reasoning=f"‚öñÔ∏è REBALANCE: Severe imbalance, add SELL ({balance_ratio:.1%})",
                            supporting_data={
                                "phase": "REBALANCING",
                                "balance_ratio": balance_ratio,
                                "action": "ADD_SELL"
                            },
                            weight=weight
                        )
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏õ‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏î‡∏∏‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if abs(balance_ratio - 0.5) < 0.2:
                self.grid_state.current_phase = GridPhase.MAINTENANCE
                print("üéØ Rebalancing Complete -> Moving to Phase 4: MAINTENANCE")
            
            return None
            
        except Exception as e:
            print(f"‚ùå Phase 3 error: {e}")
            return None

    def _phase_4_maintenance(self, analysis: Dict, params: Dict, weight: float) -> Optional[RuleResult]:
        """
        üîß Phase 4: Grid Maintenance - ‡∏ö‡∏≥‡∏£‡∏∏‡∏á‡∏£‡∏±‡∏Å‡∏©‡∏≤‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û
        
        ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢:
        - ‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏Å‡∏£‡∏¥‡∏î
        - ‡∏´‡∏≤‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏õ‡∏¥‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡πá‡∏ö‡∏Å‡∏≥‡πÑ‡∏£
        - ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û
        """
        try:
            print("üîß === PHASE 4: GRID MAINTENANCE ===")
            
            if not self.last_portfolio_data:
                return None
            
            positions = self.last_portfolio_data.get("positions", [])
            grid_quality = analysis.get("grid_quality", 0.0)
            
            # Priority 1: ‡πÄ‡∏Å‡πá‡∏ö‡∏Å‡∏≥‡πÑ‡∏£‡∏à‡∏≤‡∏Å‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡πÑ‡∏£‡∏î‡∏µ
            highly_profitable = [
                p for p in positions 
                if p.get("profit", 0) > 50  # ‡∏Å‡∏≥‡πÑ‡∏£‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ $50
            ]
            
            if highly_profitable:
                # ‡∏´‡∏≤‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡∏°‡∏≤‡∏õ‡∏¥‡∏î‡∏î‡πâ‡∏ß‡∏¢
                small_losses = [
                    p for p in positions 
                    if -20 <= p.get("profit", 0) < 0  # ‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô $20
                ]
                
                if small_losses:
                    combination = self._find_profitable_close_combination(highly_profitable, small_losses)
                    
                    if combination and combination.get("net_profit", 0) > 30:
                        confidence = 0.85
                        return RuleResult(
                            rule_name="portfolio_balance",
                            decision=TradingDecision.CLOSE_PROFITABLE,
                            confidence=confidence,
                            reasoning=f"üíé MAINTENANCE: Harvest profits ${combination['net_profit']:.2f}",
                            supporting_data={
                                "phase": "MAINTENANCE",
                                "harvest_combination": combination
                            },
                            weight=weight
                        )
            
            # Priority 2: ‡∏Ç‡∏¢‡∏≤‡∏¢‡∏Å‡∏£‡∏¥‡∏î‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏î‡∏µ
            if (grid_quality > 0.7 and 
                analysis["total_orders"] < params.get("optimal_grid_size", 10) * 0.9):
                
                # ‡πÉ‡∏ä‡πâ market momentum ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á
                momentum = self.last_market_data.get("momentum", 0)
                
                if momentum > 0.1 and analysis.get("next_buy_slot"):
                    confidence = 0.7
                    return RuleResult(
                        rule_name="grid_expansion",
                        decision=TradingDecision.BUY,
                        confidence=confidence,
                        reasoning=f"üöÄ MAINTENANCE: Quality expansion BUY (momentum: {momentum:.2f})",
                        supporting_data={
                            "phase": "MAINTENANCE",
                            "expansion_reason": "QUALITY_MOMENTUM",
                            "momentum": momentum
                        },
                        weight=weight
                    )
                
                elif momentum < -0.1 and analysis.get("next_sell_slot"):
                    confidence = 0.7
                    return RuleResult(
                        rule_name="grid_expansion",
                        decision=TradingDecision.SELL,
                        confidence=confidence,
                        reasoning=f"üöÄ MAINTENANCE: Quality expansion SELL (momentum: {momentum:.2f})",
                        supporting_data={
                            "phase": "MAINTENANCE",
                            "expansion_reason": "QUALITY_MOMENTUM",
                            "momentum": momentum
                        },
                        weight=weight
                    )
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ Phase 2 ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if grid_quality < 0.5 or abs(analysis.get("balance_ratio", 0.5) - 0.5) > 0.25:
                self.grid_state.current_phase = GridPhase.MONITORING
                print("üéØ Quality degraded -> Moving back to Phase 2: MONITORING")
            
            return None
            
        except Exception as e:
            print(f"‚ùå Phase 4 error: {e}")
            return None

    # ========================================================================================
    # üìä ANALYSIS AND HELPER METHODS
    # ========================================================================================
    
    def _get_grid_analysis(self) -> Dict:
        """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏£‡∏¥‡∏î‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡πâ‡∏ô‡∏±‡∏ö positions ‡∏î‡πâ‡∏ß‡∏¢"""
        try:
            if not self.last_portfolio_data or not self.last_market_data:
                return {"error": "No data available"}
            
            current_price = self.last_market_data.get("current_price", 0)
            
            # ‡∏î‡∏∂‡∏á‡∏ó‡∏±‡πâ‡∏á positions ‡πÅ‡∏•‡∏∞ pending orders
            positions = self.last_portfolio_data.get("positions", [])
            pending_orders = self.last_portfolio_data.get("pending_orders", [])
            
            print(f"üìä === GRID ANALYSIS DEBUG ===")
            print(f"   Current Price: {current_price:.2f}")
            print(f"   Active Positions: {len(positions)}")
            print(f"   Pending Orders: {len(pending_orders)}")
            
            # ‡πÅ‡∏¢‡∏Å positions ‡∏ï‡∏≤‡∏°‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á
            buy_positions = []
            sell_positions = []
            
            for position in positions:
                pos_type = position.get("type", "").upper()
                if pos_type in ["BUY", "POSITION_TYPE_BUY", "0"]:
                    buy_positions.append(position)
                elif pos_type in ["SELL", "POSITION_TYPE_SELL", "1"]:
                    sell_positions.append(position)
            
            # ‡πÅ‡∏¢‡∏Å pending orders ‡∏ï‡∏≤‡∏°‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á
            buy_pending = []
            sell_pending = []
            
            for order in pending_orders:
                order_type = order.get("type", "").upper()
                if "BUY" in order_type:
                    buy_pending.append(order)
                elif "SELL" in order_type:
                    sell_pending.append(order)
            
            # ‡∏£‡∏ß‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            total_buy_orders = len(buy_positions) + len(buy_pending)
            total_sell_orders = len(sell_positions) + len(sell_pending)
            total_orders = total_buy_orders + total_sell_orders
            
            print(f"   üìä Breakdown:")
            print(f"      BUY Positions: {len(buy_positions)}")
            print(f"      BUY Pending: {len(buy_pending)}")
            print(f"      SELL Positions: {len(sell_positions)}")
            print(f"      SELL Pending: {len(sell_pending)}")
            print(f"   üìä Totals:")
            print(f"      Total BUY: {total_buy_orders}")
            print(f"      Total SELL: {total_sell_orders}")
            print(f"      Total Orders: {total_orders}")
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì balance ratio
            balance_ratio = total_buy_orders / total_orders if total_orders > 0 else 0.5
            
            print(f"   ‚öñÔ∏è Balance Ratio: {balance_ratio:.1%} BUY")
            
            # ‡∏£‡∏ß‡∏° levels ‡∏à‡∏≤‡∏Å positions ‡πÅ‡∏•‡∏∞ pending orders
            all_buy_levels = []
            all_sell_levels = []
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏° buy levels
            for pos in buy_positions:
                price = pos.get("price_open", pos.get("price", 0))
                if price > 0:
                    all_buy_levels.append(price)
            
            for order in buy_pending:
                price = order.get("price", 0)
                if price > 0:
                    all_buy_levels.append(price)
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏° sell levels
            for pos in sell_positions:
                price = pos.get("price_open", pos.get("price", 0))
                if price > 0:
                    all_sell_levels.append(price)
            
            for order in sell_pending:
                price = order.get("price", 0)
                if price > 0:
                    all_sell_levels.append(price)
            
            print(f"   üìç Price Levels:")
            print(f"      BUY Levels: {len(all_buy_levels)} prices")
            print(f"      SELL Levels: {len(all_sell_levels)} prices")
            
            # ‡∏´‡∏≤ slot ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
            next_buy_slot = self._find_next_buy_slot(all_buy_levels, current_price)
            next_sell_slot = self._find_next_sell_slot(all_sell_levels, current_price)
            
            print(f"   üéØ Next Slots:")
            print(f"      Next BUY: {next_buy_slot:.2f}" if next_buy_slot else "      Next BUY: None")
            print(f"      Next SELL: {next_sell_slot:.2f}" if next_sell_slot else "      Next SELL: None")
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏Å‡∏£‡∏¥‡∏î
            grid_quality = self._calculate_grid_quality(all_buy_levels, all_sell_levels, current_price)
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡∏ô‡∏≤‡∏î‡∏Å‡∏£‡∏¥‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
            optimal_grid_size = self._calculate_optimal_grid_size()
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì completeness
            grid_completeness = total_orders / (optimal_grid_size * 2) if optimal_grid_size > 0 else 0.0
            
            result = {
                "current_price": current_price,
                "total_orders": total_orders,
                "buy_orders": total_buy_orders,
                "sell_orders": total_sell_orders,
                "balance_ratio": balance_ratio,
                "next_buy_slot": next_buy_slot,
                "next_sell_slot": next_sell_slot,
                "grid_quality": grid_quality,
                "optimal_grid_size": optimal_grid_size,
                "can_expand": total_orders < optimal_grid_size * 2,
                "positions_count": len(positions),
                "pending_count": len(pending_orders),
                "total_profit": sum(p.get("profit", 0) for p in positions),
                "grid_completeness": grid_completeness,
                "buy_levels": all_buy_levels,
                "sell_levels": all_sell_levels,
                "analysis_time": datetime.now()
            }
            
            print(f"üìä Analysis Result: {total_buy_orders} BUY, {total_sell_orders} SELL, Balance: {balance_ratio:.1%}")
            
            return result
            
        except Exception as e:
            print(f"‚ùå Grid analysis error: {e}")
            return {"error": str(e)}
    
    def _find_next_buy_slot(self, existing_levels: List[float], current_price: float) -> Optional[float]:
        """‡∏´‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á BUY ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ - ‡∏£‡∏±‡∏ö list ‡∏Ç‡∏≠‡∏á price levels"""
        try:
            if not existing_levels:
                # ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå BUY -> ‡∏ß‡∏≤‡∏á‡πÉ‡∏ï‡πâ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
                spacing = self._calculate_dynamic_spacing()
                new_slot = current_price - spacing * 0.01
                print(f"üéØ No existing BUY levels -> placing {spacing} points below current price")
                return new_slot
            
            # ‡∏´‡∏≤‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏π‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÉ‡∏ô BUY levels
            highest_buy = max(existing_levels)
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
            spacing = self._calculate_dynamic_spacing()
            
            # slot ‡πÉ‡∏´‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
            new_slot = highest_buy - spacing * 0.01
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏´‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏û‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            min_distance = spacing * 0.01
            if abs(new_slot - current_price) < min_distance:
                new_slot = current_price - min_distance
            
            print(f"üéØ Next BUY slot: {new_slot:.2f} (spacing: {spacing} points)")
            return new_slot
            
        except Exception as e:
            print(f"‚ùå Find next buy slot error: {e}")
            return None
    
    def _find_next_sell_slot(self, existing_levels: List[float], current_price: float) -> Optional[float]:
        """‡∏´‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á SELL ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ - ‡∏£‡∏±‡∏ö list ‡∏Ç‡∏≠‡∏á price levels"""
        try:
            if not existing_levels:
                # ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå SELL -> ‡∏ß‡∏≤‡∏á‡πÄ‡∏´‡∏ô‡∏∑‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
                spacing = self._calculate_dynamic_spacing()
                new_slot = current_price + spacing * 0.01
                print(f"üéØ No existing SELL levels -> placing {spacing} points above current price")
                return new_slot
            
            # ‡∏´‡∏≤‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πà‡∏≥‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÉ‡∏ô SELL levels
            lowest_sell = min(existing_levels)
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
            spacing = self._calculate_dynamic_spacing()
            
            # slot ‡πÉ‡∏´‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
            new_slot = lowest_sell + spacing * 0.01
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏´‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏û‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            min_distance = spacing * 0.01
            if abs(new_slot - current_price) < min_distance:
                new_slot = current_price + min_distance
            
            print(f"üéØ Next SELL slot: {new_slot:.2f} (spacing: {spacing} points)")
            return new_slot
            
        except Exception as e:
            print(f"‚ùå Find next sell slot error: {e}")
            return None
    
    def _calculate_dynamic_spacing(self) -> float:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡πÅ‡∏ö‡∏ö dynamic"""
        try:
            # Base spacing
            base_spacing = 100  # points
            
            # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏° volatility
            volatility = self.last_market_data.get("volatility", 0.5)
            volatility_multiplier = 0.8 + (volatility * 0.6)  # 0.8-1.4
            
            # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏° spread
            spread = self.last_market_data.get("spread", 20)
            spread_multiplier = max(1.0, spread / 20)  # ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1.0
            
            # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏° session
            session = self.last_market_data.get("session", "QUIET")
            session_multipliers = {
                "LONDON": 0.9,
                "NEW_YORK": 0.9,
                "OVERLAP": 0.8,
                "ASIAN": 1.1,
                "QUIET": 1.3
            }
            session_multiplier = session_multipliers.get(session, 1.0)
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
            dynamic_spacing = base_spacing * volatility_multiplier * spread_multiplier * session_multiplier
            
            # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
            min_spacing = 50   # points
            max_spacing = 300  # points
            
            final_spacing = max(min_spacing, min(max_spacing, dynamic_spacing))
            
            return final_spacing
            
        except Exception as e:
            print(f"‚ùå Dynamic spacing calculation error: {e}")
            return 100  # Default spacing
    
    def _calculate_grid_quality(self, buy_levels: List[float], sell_levels: List[float], current_price: float) -> float:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡∏Å‡∏£‡∏¥‡∏î - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡πâ‡∏£‡∏±‡∏ö price levels"""
        try:
            if not buy_levels and not sell_levels:
                return 0.0
            
            quality_factors = []
            
            # Factor 1: ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡∏î‡∏∏‡∏•‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á BUY/SELL
            total_levels = len(buy_levels) + len(sell_levels)
            if total_levels > 0:
                balance_ratio = len(buy_levels) / total_levels
                balance_score = 1.0 - abs(balance_ratio - 0.5) * 2  # ‡∏¢‡∏¥‡πà‡∏á‡πÉ‡∏Å‡∏•‡πâ 0.5 ‡∏¢‡∏¥‡πà‡∏á‡∏î‡∏µ
                quality_factors.append(balance_score)
                print(f"üìä Quality Factor 1 (Balance): {balance_score:.2f}")
            
            # Factor 2: ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡πà‡∏≥‡πÄ‡∏™‡∏°‡∏≠‡∏Ç‡∏≠‡∏á spacing
            all_levels = sorted(buy_levels + sell_levels)
            
            if len(all_levels) > 2:
                spacings = [all_levels[i+1] - all_levels[i] for i in range(len(all_levels)-1)]
                spacing_std = statistics.stdev(spacings) if len(spacings) > 1 else 0
                avg_spacing = statistics.mean(spacings)
                spacing_consistency = 1.0 - min(1.0, spacing_std / avg_spacing) if avg_spacing > 0 else 0
                quality_factors.append(spacing_consistency)
                print(f"üìä Quality Factor 2 (Spacing): {spacing_consistency:.2f}")
            
            # Factor 3: ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°‡∏£‡∏≠‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            if all_levels:
                price_range = max(all_levels) - min(all_levels)
                price_coverage = min(1.0, price_range / (current_price * 0.1))  # ‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏° 10% ‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤
                quality_factors.append(price_coverage)
                print(f"üìä Quality Factor 3 (Coverage): {price_coverage:.2f}")
            
            # Factor 4: ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡∏£‡∏≠‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            if all_levels:
                distances = [abs(p - current_price) for p in all_levels]
                avg_distance = statistics.mean(distances)
                distribution_score = min(1.0, avg_distance / (current_price * 0.02))  # ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ 2%
                quality_factors.append(distribution_score)
                print(f"üìä Quality Factor 4 (Distribution): {distribution_score:.2f}")
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏°
            if quality_factors:
                overall_quality = statistics.mean(quality_factors)
                print(f"üìä Overall Grid Quality: {overall_quality:.2f}")
                return max(0.0, min(1.0, overall_quality))
            else:
                return 0.0
            
        except Exception as e:
            print(f"‚ùå Grid quality calculation error: {e}")
            return 0.0
    
    def _calculate_optimal_grid_size(self) -> int:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡∏ô‡∏≤‡∏î‡∏Å‡∏£‡∏¥‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°"""
        try:
            if not self.capital_allocation:
                return 10  # Default
            
            # ‡∏Ç‡∏∂‡πâ‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏∏‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ
            available_margin = self.capital_allocation.free_margin
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≤‡∏Å‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì
            base_size = max(6, min(20, int(available_margin / 1000)))
            
            # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏° trading mode
            mode_multipliers = {
                TradingMode.CONSERVATIVE: 0.7,
                TradingMode.MODERATE: 1.0,
                TradingMode.AGGRESSIVE: 1.3,
                TradingMode.ADAPTIVE: 1.1
            }
            
            multiplier = mode_multipliers.get(self.current_mode, 1.0)
            optimal_size = int(base_size * multiplier)
            
            return max(4, min(25, optimal_size))  # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á 4-25
            
        except Exception as e:
            print(f"‚ùå Optimal grid size calculation error: {e}")
            return 10

    def _find_optimal_close_combination(self, profitable_positions: List[Dict], losing_positions: List[Dict]) -> Optional[Dict]:
        """‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÅ‡∏ö‡∏ö optimal combination"""
        try:
            if not profitable_positions or not losing_positions:
                return None
            
            best_combination = None
            best_net_profit = 0
            
            # ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡∏£‡∏ß‡∏°‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
            for profit_pos in profitable_positions:
                profit_amount = profit_pos.get("profit", 0)
                
                # ‡∏´‡∏≤‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
                suitable_losses = [
                    loss_pos for loss_pos in losing_positions
                    if abs(loss_pos.get("profit", 0)) < profit_amount  # ‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤‡∏Å‡∏≥‡πÑ‡∏£
                ]
                
                if suitable_losses:
                    # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏ú‡∏•‡∏£‡∏ß‡∏°‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
                    for loss_pos in suitable_losses:
                        net_profit = profit_amount + loss_pos.get("profit", 0)
                        
                        if net_profit > best_net_profit:
                            best_net_profit = net_profit
                            best_combination = {
                                "net_profit": net_profit,
                                "positions": [profit_pos, loss_pos],
                                "confidence": min(0.9, net_profit / profit_amount)
                            }
            
            return best_combination
            
        except Exception as e:
            print(f"‚ùå Optimal close combination error: {e}")
            return None
    
    def _find_profitable_close_combination(self, profitable_positions: List[Dict], small_losses: List[Dict]) -> Optional[Dict]:
        """‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡πá‡∏ö‡∏Å‡∏≥‡πÑ‡∏£"""
        try:
            best_combination = None
            best_net_profit = 0
            
            for profit_pos in profitable_positions:
                profit_amount = profit_pos.get("profit", 0)
                
                # ‡∏£‡∏ß‡∏°‡∏Å‡∏±‡∏ö‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
                total_loss = sum(loss_pos.get("profit", 0) for loss_pos in small_losses)
                net_profit = profit_amount + total_loss
                
                if net_profit > best_net_profit and net_profit > 20:  # ‡∏Å‡∏≥‡πÑ‡∏£‡∏™‡∏∏‡∏ó‡∏ò‡∏¥‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ $20
                    best_net_profit = net_profit
                    positions_to_close = [profit_pos] + small_losses
                    
                    best_combination = {
                        "net_profit": net_profit,
                        "positions": positions_to_close,
                        "confidence": min(0.9, net_profit / profit_amount)
                    }
            
            return best_combination
            
        except Exception as e:
            print(f"‚ùå Profitable close combination error: {e}")
            return None
    
    def _get_session_bias(self, session: str) -> str:
        """‡∏î‡∏∂‡∏á bias ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô"""
        session_biases = {
            "ASIAN": "SELL",      # ‡∏°‡∏±‡∏Å‡∏à‡∏∞ consolidate
            "LONDON": "BUY",      # ‡∏°‡∏±‡∏Å‡∏à‡∏∞ breakout
            "NEW_YORK": "SELL",   # ‡∏°‡∏±‡∏Å‡∏à‡∏∞ profit taking
            "OVERLAP": "BUY"      # volatility ‡∏™‡∏π‡∏á
        }
        return session_biases.get(session, "NEUTRAL")
    
    def _execute_trading_decision(self, decision_result: RuleResult):
        """‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à"""
        try:
            print(f"üéØ === EXECUTING DECISION ===")
            print(f"   Decision: {decision_result.decision.value}")
            print(f"   Rule: {decision_result.rule_name}")
            print(f"   Confidence: {decision_result.confidence:.1%}")
            print(f"   Reasoning: {decision_result.reasoning}")
            
            success = False
            
            if decision_result.decision == TradingDecision.BUY:
                success = self._execute_buy_order(decision_result)
                
            elif decision_result.decision == TradingDecision.SELL:
                success = self._execute_sell_order(decision_result)
                
            elif decision_result.decision == TradingDecision.CLOSE_PROFITABLE:
                success = self._execute_close_orders(decision_result)
            
            # Track performance
            if self.performance_tracker:
                self.performance_tracker.track_decision(decision_result, success)
            
            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à
            self.decision_history.append(decision_result)
            self.recent_decisions.append(decision_result)
            
            return success
            
        except Exception as e:
            print(f"‚ùå Execute decision error: {e}")
            return False
    
    def _execute_buy_order(self, decision_result: RuleResult) -> bool:
        """‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå BUY"""
        try:
            if not self.order_manager:
                return False
            
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å decision
            supporting_data = decision_result.supporting_data
            current_price = self.last_market_data.get("current_price", 0)
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤‡πÅ‡∏•‡∏∞ lot size
            order_price = supporting_data.get("target_price")
            if not order_price:
                analysis = self._get_grid_analysis()
                order_price = analysis.get("next_buy_slot", current_price - 100 * 0.01)
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì lot size
            lot_size = self._calculate_position_size(decision_result)
            
            # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö order manager
            market_data = dict(self.last_market_data)
            market_data["target_price"] = order_price
            market_data["rule_volume"] = lot_size
            
            # ‡πÉ‡∏ä‡πâ method ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
            result = self.order_manager.place_smart_buy_order(
                confidence=decision_result.confidence,
                reasoning=decision_result.reasoning,
                market_data=market_data
            )
            
            if result:
                print(f"‚úÖ BUY order placed: {lot_size} lots @ {order_price:.2f}")
                return True
            else:
                print(f"‚ùå BUY order failed")
                return False
            
        except Exception as e:
            print(f"‚ùå Execute buy order error: {e}")
            return False
    
    def _execute_sell_order(self, decision_result: RuleResult) -> bool:
        """‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå SELL"""
        try:
            if not self.order_manager:
                return False
            
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å decision
            supporting_data = decision_result.supporting_data
            current_price = self.last_market_data.get("current_price", 0)
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤‡πÅ‡∏•‡∏∞ lot size
            order_price = supporting_data.get("target_price")
            if not order_price:
                analysis = self._get_grid_analysis()
                order_price = analysis.get("next_sell_slot", current_price + 100 * 0.01)
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì lot size
            lot_size = self._calculate_position_size(decision_result)
            
            # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö order manager
            market_data = dict(self.last_market_data)
            market_data["target_price"] = order_price
            market_data["rule_volume"] = lot_size
            
            # ‡πÉ‡∏ä‡πâ method ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
            result = self.order_manager.place_smart_sell_order(
                confidence=decision_result.confidence,
                reasoning=decision_result.reasoning,
                market_data=market_data
            )
            
            if result:
                print(f"‚úÖ SELL order placed: {lot_size} lots @ {order_price:.2f}")
                return True
            else:
                print(f"‚ùå SELL order failed")
                return False
            
        except Exception as e:
            print(f"‚ùå Execute sell order error: {e}")
            return False
    
    def _execute_close_orders(self, decision_result: RuleResult) -> bool:
        """‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå"""
        try:
            if not self.position_manager:
                return False
            
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î
            supporting_data = decision_result.supporting_data
            positions_to_close = supporting_data.get("positions", [])
            
            if not positions_to_close:
                return False
            
            # ‡∏õ‡∏¥‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡∏±‡∏ß
            success_count = 0
            for position in positions_to_close:
                ticket = position.get("ticket")
                if ticket:
                    result = self.position_manager.close_position(ticket)
                    if result.get("success"):
                        success_count += 1
            
            # ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏ñ‡πâ‡∏≤‡∏õ‡∏¥‡∏î‡πÑ‡∏î‡πâ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏Ñ‡∏£‡∏∂‡πà‡∏á
            success_ratio = success_count / len(positions_to_close)
            
            if success_ratio > 0.5:
                print(f"‚úÖ Closed {success_count}/{len(positions_to_close)} positions")
                return True
            else:
                print(f"‚ö†Ô∏è Partial close: {success_count}/{len(positions_to_close)} positions")
                return False
            
        except Exception as e:
            print(f"‚ùå Execute close orders error: {e}")
            return False
    
    def _calculate_position_size(self, decision_result: RuleResult) -> float:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡∏ô‡∏≤‡∏î position"""
        try:
            if not self.order_manager or not hasattr(self.order_manager, 'lot_calculator'):
                return 0.01  # Default
            
            # ‡πÉ‡∏ä‡πâ lot calculator ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
            lot_calculator = self.order_manager.lot_calculator
            
            # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì
            market_data = {
                "condition": self.last_market_data.get("condition", "UNKNOWN"),
                "volatility_factor": self.last_market_data.get("volatility", 0.5)
            }
            
            # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ method ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
            lot_size = lot_calculator.calculate_optimal_lot_size(
                market_data=market_data,
                confidence=decision_result.confidence,
                order_type=decision_result.decision.value,
                reasoning=decision_result.reasoning
            )
            
            return max(0.01, lot_size)  # ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 0.01 lot
            
        except Exception as e:
            print(f"‚ùå Position size calculation error: {e}")
            return 0.01

    # ========================================================================================
    # üéñÔ∏è PERFORMANCE AND LEARNING
    # ========================================================================================
    
    def _track_rule_performance(self, rule_name: str, success: bool):
        """‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á rule"""
        try:
            if rule_name not in self.rule_performances:
                self.rule_performances[rule_name] = {
                    "success_count": 0,
                    "total_count": 0,
                    "avg_confidence": 0.0,
                    "last_updated": datetime.now()
                }
            
            perf = self.rule_performances[rule_name]
            perf["total_count"] += 1
            if success:
                perf["success_count"] += 1
            perf["last_updated"] = datetime.now()
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì success rate
            success_rate = perf["success_count"] / perf["total_count"]
            print(f"üìä Rule Performance Update: {rule_name}")
            print(f"   Success Rate: {success_rate:.1%} ({perf['success_count']}/{perf['total_count']})")
            
        except Exception as e:
            print(f"‚ùå Performance tracking error: {e}")
    
    def _update_rule_performances(self):
        """‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á rules"""
        try:
            # ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
            for decision in list(self.recent_decisions):
                if hasattr(decision, 'timestamp') and decision.timestamp < datetime.now() - timedelta(minutes=30):
                    # ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
                    if self.performance_tracker:
                        outcome = self.performance_tracker.get_decision_outcome(decision)
                        if outcome is not None:
                            # Track performance ‡∏ï‡∏≤‡∏° rule ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à
                            success = (outcome == "SUCCESS")
                            if hasattr(decision, 'rule_name'):
                                self._track_rule_performance(decision.rule_name, success)
                            
                            # ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å queue ‡∏´‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß
                            self.recent_decisions.remove(decision)
                            
            # ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡πÅ‡∏ö‡∏ö adaptive ‡∏ó‡∏∏‡∏Å 10 ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à
            if len(self.decision_history) % 10 == 0 and len(self.decision_history) > 0:
                self._adaptive_learning_update()
                            
        except Exception as e:
            print(f"‚ùå Rule performance update error: {e}")

    def _adaptive_learning_update(self):
        """‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡πÅ‡∏ö‡∏ö adaptive"""
        try:
            if not self.rule_performances:
                return
            
            print("üß† === ADAPTIVE LEARNING UPDATE ===")
            
            # ‡∏õ‡∏£‡∏±‡∏ö weight ‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û
            for rule_name, perf in self.rule_performances.items():
                if perf["total_count"] >= 5:  # ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠
                    success_rate = perf["success_count"] / perf["total_count"]
                    
                    # ‡∏õ‡∏£‡∏±‡∏ö weight ‡πÉ‡∏ô config
                    if rule_name in self.rules_config.get("rules", {}):
                        current_weight = self.rules_config["rules"][rule_name].get("weight", 1.0)
                        
                        if success_rate > 0.7:
                            new_weight = min(2.0, current_weight * 1.1)  # ‡πÄ‡∏û‡∏¥‡πà‡∏° weight
                        elif success_rate < 0.4:
                            new_weight = max(0.3, current_weight * 0.9)  # ‡∏•‡∏î weight
                        else:
                            new_weight = current_weight
                        
                        self.rules_config["rules"][rule_name]["weight"] = new_weight
                        
                        if new_weight != current_weight:
                            print(f"‚ö° Weight Update: {rule_name}")
                            print(f"   Success Rate: {success_rate:.1%}")
                            print(f"   Weight: {current_weight:.2f} ‚Üí {new_weight:.2f}")
            
        except Exception as e:
            print(f"‚ùå Adaptive learning error: {e}")

    # ========================================================================================
    # üéØ GUI INTERFACE METHODS (Missing Methods)
    # ========================================================================================
    
    def get_overall_confidence(self) -> float:
        """
        ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö
        
        Returns:
            float: ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô‡∏£‡∏ß‡∏° (0.0-1.0)
        """
        try:
            if not self.rule_performances:
                # ‡πÉ‡∏ä‡πâ baseline confidence ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û
                return 0.5
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì weighted confidence ‡∏à‡∏≤‡∏Å rule performances
            total_weight = 0.0
            weighted_confidence = 0.0
            
            for rule_name, perf in self.rule_performances.items():
                if perf.get("total_count", 0) > 0:
                    # ‡∏î‡∏∂‡∏á weight ‡∏à‡∏≤‡∏Å rules config
                    rule_weight = self.rules_config.get("rules", {}).get(rule_name, {}).get("weight", 1.0)
                    
                    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì success rate
                    success_rate = perf.get("success_count", 0) / perf.get("total_count", 1)
                    
                    # ‡∏£‡∏ß‡∏° weight
                    total_weight += rule_weight
                    weighted_confidence += success_rate * rule_weight
            
            if total_weight > 0:
                overall_confidence = weighted_confidence / total_weight
            else:
                overall_confidence = 0.5  # Default
            
            # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ï‡∏•‡∏≤‡∏î‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏¥‡∏î
            market_factor = 1.0
            if self.market_context:
                if self.market_context.is_favorable_for_grid:
                    market_factor = 1.1  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô‡∏ñ‡πâ‡∏≤‡∏ï‡∏•‡∏≤‡∏î‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
                else:
                    market_factor = 0.9  # ‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô‡∏ñ‡πâ‡∏≤‡∏ï‡∏•‡∏≤‡∏î‡πÑ‡∏°‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
            
            # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏Å‡∏£‡∏¥‡∏î
            grid_factor = 1.0
            if self.grid_state.quality_score > 0:
                grid_factor = 0.8 + (self.grid_state.quality_score * 0.4)  # 0.8-1.2
            
            final_confidence = overall_confidence * market_factor * grid_factor
            return max(0.0, min(1.0, final_confidence))  # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á 0-1
            
        except Exception as e:
            print(f"‚ùå Overall confidence calculation error: {e}")
            return 0.5  # Safe default
    
    def get_rules_status(self) -> Dict[str, Dict]:
        """
        ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á rules ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö GUI
        
        Returns:
            Dict: ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ rule
        """
        try:
            rules_status = {}
            
            # ‡∏ß‡∏ô‡∏ú‡πà‡∏≤‡∏ô rules ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÉ‡∏ô config
            for rule_name, rule_config in self.rules_config.get("rules", {}).items():
                # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏à‡∏≤‡∏Å config
                enabled = rule_config.get("enabled", True)
                weight = rule_config.get("weight", 1.0)
                confidence_threshold = rule_config.get("confidence_threshold", 0.6)
                
                # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û
                perf = self.rule_performances.get(rule_name, {})
                total_count = perf.get("total_count", 0)
                success_count = perf.get("success_count", 0)
                
                # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì metrics
                success_rate = success_count / total_count if total_count > 0 else 0.0
                avg_confidence = perf.get("avg_confidence", 0.0)
                
                # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤ rule active ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î)
                last_updated = perf.get("last_updated")
                is_recently_active = False
                if last_updated:
                    time_diff = (datetime.now() - last_updated).total_seconds()
                    is_recently_active = time_diff < 3600  # ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
                
                # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á rule
                rules_status[rule_name] = {
                    "enabled": enabled,
                    "active": enabled and is_recently_active,
                    "weight": weight,
                    "confidence_threshold": confidence_threshold,
                    "confidence": success_rate,  # ‡πÉ‡∏ä‡πâ success rate ‡πÄ‡∏õ‡πá‡∏ô confidence
                    "total_decisions": total_count,
                    "successful_decisions": success_count,
                    "success_rate": success_rate,
                    "avg_confidence": avg_confidence,
                    "last_updated": last_updated,
                    "status": self._get_rule_status_text(rule_name, success_rate, total_count)
                }
            
            return rules_status
            
        except Exception as e:
            print(f"‚ùå Rules status error: {e}")
            return {}
    
    def _get_rule_status_text(self, rule_name: str, success_rate: float, total_count: int) -> str:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á rule"""
        try:
            if total_count == 0:
                return "üî∂ No Data"
            elif total_count < 5:
                return f"üî∏ Learning ({total_count} samples)"
            elif success_rate > 0.7:
                return "üü¢ Performing Well"
            elif success_rate > 0.5:
                return "üü° Average Performance"
            elif success_rate > 0.3:
                return "üü† Below Average"
            else:
                return "üî¥ Poor Performance"
                
        except Exception as e:
            return "‚ùì Status Unknown"
    
    def get_system_status(self) -> Dict:
        """
        ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö GUI
        
        Returns:
            Dict: ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        """
        try:
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì metrics ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
            overall_confidence = self.get_overall_confidence()
            
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å market data ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
            market_condition = "UNKNOWN"
            current_price = 0.0
            if self.last_market_data:
                market_condition = self.last_market_data.get("condition", "UNKNOWN")
                current_price = self.last_market_data.get("current_price", 0.0)
            
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å portfolio data ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
            total_profit = 0.0
            active_positions = 0
            pending_orders = 0
            if self.last_portfolio_data:
                total_profit = self.last_portfolio_data.get("total_profit", 0.0)
                active_positions = self.last_portfolio_data.get("total_positions", 0)
                pending_orders = self.last_portfolio_data.get("pending_orders", 0)
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì risk level
            risk_level = 0.0
            if self.capital_allocation:
                risk_level = self.capital_allocation.margin_usage_ratio
            
            # ‡∏î‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
            last_action = "NONE"
            action_reason = "System initializing..."
            if self.recent_decisions:
                latest_decision = self.recent_decisions[-1]
                last_action = latest_decision.decision.value
                action_reason = latest_decision.reasoning
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì survivability
            survivability_usage = 0.0
            if hasattr(self, 'survivability_points_used') and hasattr(self, 'total_survivability_points'):
                if self.total_survivability_points > 0:
                    survivability_usage = (self.survivability_points_used / self.total_survivability_points) * 100
            
            return {
                'rule_confidence': overall_confidence,
                'market_condition': market_condition,
                'portfolio_health': max(0.0, min(1.0, 1.0 - risk_level)),  # ‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û portfolio
                'total_profit': total_profit,
                'active_positions': active_positions,
                'pending_orders': pending_orders,
                'risk_level': risk_level,
                'last_action': last_action,
                'action_reason': action_reason,
                'survivability_usage': survivability_usage,
                'engine_running': self.is_running,
                'current_price': current_price,
                'grid_quality': self.grid_state.quality_score,
                'grid_balance': self.grid_state.grid_balance_ratio,
                'grid_phase': self.grid_state.current_phase.value
            }
            
        except Exception as e:
            print(f"‚ùå System status error: {e}")
            return {
                'rule_confidence': 0.5,
                'market_condition': 'ERROR',
                'portfolio_health': 0.5,
                'total_profit': 0.0,
                'active_positions': 0,
                'pending_orders': 0,
                'risk_level': 0.0,
                'last_action': 'ERROR',
                'action_reason': f'System error: {e}',
                'survivability_usage': 0.0,
                'engine_running': False
            }

    # ========================================================================================
    # üîß UTILITY AND HELPER METHODS
    # ========================================================================================
    
    def save_performance_data(self, filepath: str = "performance_data.json"):
        """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå"""
        try:
            performance_data = {
                "rule_performances": dict(self.rule_performances),
                "total_decisions": len(self.decision_history),
                "last_updated": datetime.now().isoformat(),
                "rules_config": self.rules_config
            }
            
            with open(filepath, 'w', encoding='utf-8') as f:
                json.dump(performance_data, f, indent=2, ensure_ascii=False, default=str)
            
            print(f"üíæ Performance data saved to {filepath}")
            
        except Exception as e:
            print(f"‚ùå Save performance data error: {e}")
    
    def load_performance_data(self, filepath: str = "performance_data.json"):
        """‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå"""
        try:
            if not os.path.exists(filepath):
                print(f"‚ö†Ô∏è Performance data file not found: {filepath}")
                return
            
            with open(filepath, 'r', encoding='utf-8') as f:
                performance_data = json.load(f)
            
            # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û
            if "rule_performances" in performance_data:
                self.rule_performances = performance_data["rule_performances"]
                
                # ‡πÅ‡∏õ‡∏•‡∏á datetime strings ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô datetime objects
                for rule_name, perf in self.rule_performances.items():
                    if "last_updated" in perf and isinstance(perf["last_updated"], str):
                        perf["last_updated"] = datetime.fromisoformat(perf["last_updated"])
            
            # ‡πÇ‡∏´‡∏•‡∏î rules config ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
            if "rules_config" in performance_data:
                self.rules_config.update(performance_data["rules_config"])
            
            print(f"üìÅ Performance data loaded from {filepath}")
            print(f"   Loaded {len(self.rule_performances)} rule performances")
            
        except Exception as e:
            print(f"‚ùå Load performance data error: {e}")
    
    def reset_performance_data(self):
        """‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        try:
            self.rule_performances = {}
            self.decision_history = []
            self.recent_decisions = deque(maxlen=20)
            
            print("üîÑ Performance data reset complete")
            
        except Exception as e:
            print(f"‚ùå Reset performance data error: {e}")
    
    def get_performance_summary(self) -> Dict:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡πÅ‡∏ö‡∏ö‡∏¢‡πà‡∏≠"""
        try:
            if not self.rule_performances:
                return {"message": "No performance data available"}
            
            summary = {}
            total_decisions = 0
            total_successes = 0
            
            for rule_name, perf in self.rule_performances.items():
                rule_total = perf.get("total_count", 0)
                rule_success = perf.get("success_count", 0)
                rule_rate = rule_success / rule_total if rule_total > 0 else 0.0
                
                summary[rule_name] = {
                    "decisions": rule_total,
                    "success_rate": round(rule_rate, 3),
                    "status": "üü¢" if rule_rate > 0.6 else "üü°" if rule_rate > 0.4 else "üî¥"
                }
                
                total_decisions += rule_total
                total_successes += rule_success
            
            overall_rate = total_successes / total_decisions if total_decisions > 0 else 0.0
            
            summary["_overall"] = {
                "total_decisions": total_decisions,
                "overall_success_rate": round(overall_rate, 3),
                "confidence_level": self.get_overall_confidence()
            }
            
            return summary
            
        except Exception as e:
            print(f"‚ùå Performance summary error: {e}")
            return {"error": str(e)}

    def _update_context_awareness(self):
        """‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏£‡∏∞‡∏´‡∏ô‡∏±‡∏Å‡πÉ‡∏ô‡∏ö‡∏£‡∏¥‡∏ö‡∏ó"""
        try:
            if not self.last_market_data:
                return
            
            # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó market context
            self.market_context = MarketContext(
                session=MarketSession(self.last_market_data.get("session", "QUIET")),
                volatility_level=self.last_market_data.get("volatility_level", "MEDIUM"),
                trend_direction=self.last_market_data.get("trend_direction", "SIDEWAYS"),
                trend_strength=self.last_market_data.get("trend_strength", 0.5),
                liquidity_level=self.last_market_data.get("liquidity_level", "MEDIUM"),
                spread_condition=self.last_market_data.get("spread_condition", "NORMAL"),
                momentum=self.last_market_data.get("momentum", 0.0)
            )
            
            # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó capital allocation
            if self.last_portfolio_data:
                account_data = self.last_portfolio_data.get("account_info", {})
                self.capital_allocation = CapitalAllocation(
                    total_balance=account_data.get("balance", 0),
                    available_margin=account_data.get("margin", 0),
                    used_margin=account_data.get("margin_used", 0),
                    free_margin=account_data.get("margin_free", 0),
                    max_grid_allocation=0.6,  # ‡πÉ‡∏ä‡πâ 60% ‡∏Ç‡∏≠‡∏á‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏∏‡∏ô‡∏Å‡∏±‡∏ö‡∏Å‡∏£‡∏¥‡∏î
                    optimal_grid_size=self._calculate_optimal_grid_size(),
                    risk_budget=account_data.get("margin_free", 0) * 0.1  # 10% ‡∏Ç‡∏≠‡∏á free margin
                )
            
        except Exception as e:
            print(f"‚ùå Context awareness update error: {e}")

    def _is_market_suitable_for_expansion(self) -> bool:
        """‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏ï‡∏•‡∏≤‡∏î‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ç‡∏¢‡∏≤‡∏¢‡∏Å‡∏£‡∏¥‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
        try:
            if not self.market_context:
                return True  # Default: ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï
            
            # ‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ï‡∏•‡∏≤‡∏î
            suitable_volatility = self.market_context.volatility_level in ["LOW", "MEDIUM", "HIGH"]
            suitable_liquidity = self.market_context.liquidity_level in ["HIGH", "MEDIUM"]
            suitable_spread = self.market_context.spread_condition in ["NORMAL", "WIDE"]
            
            return suitable_volatility and suitable_liquidity and suitable_spread
            
        except Exception as e:
            print(f"‚ùå Market suitability check error: {e}")
            return True  # Default: ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï

    def get_rule_engine_status(self) -> Dict:
        """‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á Rule Engine"""
        try:
            return {
                "is_running": self.is_running,
                "current_mode": self.current_mode.value,
                "grid_phase": self.grid_state.current_phase.value,
                "grid_quality": self.grid_state.quality_score,
                "grid_balance": self.grid_state.grid_balance_ratio,
                "grid_completeness": self.grid_state.grid_completeness,
                "total_decisions": len(self.decision_history),
                "recent_decisions": len(self.recent_decisions),
                "rule_performances": dict(self.rule_performances),
                "capital_allocation": {
                    "optimal_grid_size": self.capital_allocation.optimal_grid_size if self.capital_allocation else 0,
                    "can_expand": self.capital_allocation.can_expand_grid if self.capital_allocation else False,
                    "margin_usage": self.capital_allocation.margin_usage_ratio if self.capital_allocation else 0
                } if self.capital_allocation else {},
                "market_context": {
                    "session": self.market_context.session.value if self.market_context else "UNKNOWN",
                    "volatility": self.market_context.volatility_level if self.market_context else "UNKNOWN",
                    "suitable_for_expansion": self._is_market_suitable_for_expansion()
                } if self.market_context else {}
            }
            
        except Exception as e:
            print(f"‚ùå Status retrieval error: {e}")
            return {"error": str(e)}

    def _check_emergency_conditions(self) -> bool:
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô"""
        try:
            if not self.last_portfolio_data:
                return False
            
            # ‡πÄ‡∏ä‡πá‡∏Ñ margin level
            account_info = self.last_portfolio_data.get("account_info", {})
            margin_level = account_info.get("margin_level", 1000)
            
            if margin_level < 200:  # Margin call risk
                print("üö® EMERGENCY: Low margin level!")
                return True
            
            # ‡πÄ‡∏ä‡πá‡∏Ñ total loss
            total_profit = self.last_portfolio_data.get("total_profit", 0)
            if total_profit < -1000:  # Loss ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ $1000
                print("üö® EMERGENCY: High total loss!")
                return True
            
            return False
            
        except Exception as e:
            print(f"‚ùå Emergency check error: {e}")
            return False

    def force_emergency_stop(self) -> bool:
        """‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏´‡∏¢‡∏∏‡∏î‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô"""
        try:
            print("üö® === EMERGENCY STOP ACTIVATED ===")
            
            self.is_running = False
            self.current_mode = TradingMode.EMERGENCY
            
            # ‡∏õ‡∏¥‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏´‡∏ô‡∏±‡∏Å
            if self.position_manager and self.last_portfolio_data:
                positions = self.last_portfolio_data.get("positions", [])
                heavy_losses = [p for p in positions if p.get("profit", 0) < -100]
                
                for position in heavy_losses:
                    ticket = position.get("ticket")
                    if ticket:
                        self.position_manager.close_position(ticket)
            
            print("üö® Emergency stop completed")
            return True
            
        except Exception as e:
            print(f"‚ùå Emergency stop error: {e}")
            return False

    def __del__(self):
        """Cleanup ‡πÄ‡∏°‡∏∑‡πà‡∏≠ object ‡∏ñ‡∏π‡∏Å‡∏•‡∏ö"""
        try:
            if self.is_running:
                self.stop()
        except:
            pass  # ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏™‡∏î‡∏á error ‡∏ï‡∏≠‡∏ô cleanup