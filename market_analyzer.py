"""
üìä Market Analyzer - Enhanced with OHLC + Volume Analysis
market_analyzer.py

üéØ NEW FEATURES FOR CANDLESTICK ANALYSIS:
‚úÖ Current OHLC Data Retrieval  
‚úÖ Previous OHLC Data Comparison
‚úÖ Volume Analysis (with fallback support)
‚úÖ Candlestick Pattern Analysis
‚úÖ Dynamic Volume Factor Calculation
‚úÖ Candle Strength Assessment

** ENHANCED FOR SIMPLE CANDLESTICK TRADING RULES **
"""

import MetaTrader5 as mt5
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
from typing import Dict, List, Tuple, Optional, Any
from collections import deque
import statistics

class MarketAnalyzer:
    """
    üìä Enhanced Market Analyzer with OHLC + Volume Analysis
    
    üÜï CANDLESTICK FEATURES:
    - Real-time OHLC data retrieval
    - Volume analysis with broker compatibility
    - Candlestick pattern recognition
    - Dynamic volume factor calculation
    - Candle strength assessment
    """
    
    def __init__(self, mt5_connector, config: Dict):
        self.mt5_connector = mt5_connector
        self.config = config
        
        # Trading symbol ‡πÅ‡∏•‡∏∞ timeframe
        self.symbol = config.get("trading", {}).get("symbol", "XAUUSD.v")
        self.main_timeframe = mt5.TIMEFRAME_M5  # ‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö candlestick analysis
        
        # Volume analysis settings
        self.volume_lookback = 20  # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ó‡πà‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö average volume
        self.volume_available = True  # ‡∏à‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏ô runtime
        
        # Cache ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û
        self.last_analysis_time = datetime.min
        self.cached_analysis = {}
        self.cache_duration = 30  # ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
        
        self.log("üìä Market Analyzer Enhanced with OHLC + Volume Analysis")
    
    # ========================================================================================
    # üÜï NEW CANDLESTICK ANALYSIS METHODS
    # ========================================================================================
    
    def get_current_ohlc(self) -> Dict:
        """üìä ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• OHLC ‡πÅ‡∏ó‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô - FIXED: Symbol + Numpy handling"""
        try:
            self.log("üìä Requesting current OHLC data...")
            
            if not self.mt5_connector or not self.mt5_connector.is_connected:
                self.log("‚ùå MT5 connector not available or not connected")
                return self._get_fallback_ohlc()
            
            # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏´‡∏≤ symbol ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡πà‡∏≠‡∏ô
            actual_symbol = self._find_correct_gold_symbol()
            if not actual_symbol:
                self.log("‚ùå Cannot find valid gold symbol")
                return self._get_fallback_ohlc()
            
            self.log(f"üîç Using symbol: {actual_symbol}")
            
            # ‚úÖ Select symbol ‡∏Å‡πà‡∏≠‡∏ô‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            if not mt5.symbol_select(actual_symbol, True):
                self.log(f"‚ùå Failed to select symbol {actual_symbol}")
                return self._get_fallback_ohlc()
            
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 5 ‡πÅ‡∏ó‡πà‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
            rates = mt5.copy_rates_from_pos(actual_symbol, self.main_timeframe, 0, 5)
            
            if rates is None or len(rates) < 1:
                self.log(f"‚ùå Failed to get rates for {actual_symbol}")
                error_info = mt5.last_error()
                self.log(f"üîß MT5 Error: {error_info}")
                return self._get_fallback_ohlc()
            
            # ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: Handle numpy array correctly
            current_bar = rates[-1]  # ‡πÑ‡∏î‡πâ numpy.void object
            
            ohlc_data = {
                "time": datetime.fromtimestamp(current_bar['time']),
                "open": float(current_bar['open']),
                "high": float(current_bar['high']),
                "low": float(current_bar['low']),
                "close": float(current_bar['close']),
                "volume": int(current_bar['tick_volume']),  # ‚úÖ ‡πÉ‡∏ä‡πâ direct access ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà .get()
                "valid": True
            }
            
            # ‚úÖ LOG SUCCESS
            self.log(f"‚úÖ Current OHLC Retrieved ({actual_symbol}):")
            self.log(f"   ‚è∞ Time: {ohlc_data['time'].strftime('%Y-%m-%d %H:%M:%S')}")
            self.log(f"   üìà OHLC: {ohlc_data['open']:.5f} | {ohlc_data['high']:.5f} | {ohlc_data['low']:.5f} | {ohlc_data['close']:.5f}")
            self.log(f"   üîä Volume: {ohlc_data['volume']}")
            
            return ohlc_data
            
        except Exception as e:
            self.log(f"‚ùå Current OHLC error: {e}")
            return self._get_fallback_ohlc()

    def get_previous_ohlc(self) -> Dict:
        """üìä ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• OHLC ‡πÅ‡∏ó‡πà‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤ - FIXED: Symbol + Numpy handling"""
        try:
            self.log("üìä Requesting previous OHLC data...")
            
            if not self.mt5_connector or not self.mt5_connector.is_connected:
                self.log("‚ùå MT5 connector not available or not connected")
                return self._get_fallback_ohlc()
            
            # ‡πÉ‡∏ä‡πâ symbol ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
            actual_symbol = self._find_correct_gold_symbol()
            if not actual_symbol:
                self.log("‚ùå Cannot find valid gold symbol")
                return self._get_fallback_ohlc()
            
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 5 ‡πÅ‡∏ó‡πà‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
            rates = mt5.copy_rates_from_pos(actual_symbol, self.main_timeframe, 0, 5)
            
            if rates is None or len(rates) < 2:
                self.log(f"‚ùå Insufficient rates for previous candle")
                return self._get_fallback_ohlc()
            
            # ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: Handle numpy array correctly
            previous_bar = rates[-2]  # ‡πÅ‡∏ó‡πà‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
            
            ohlc_data = {
                "time": datetime.fromtimestamp(previous_bar['time']),
                "open": float(previous_bar['open']),
                "high": float(previous_bar['high']),
                "low": float(previous_bar['low']),
                "close": float(previous_bar['close']),
                "volume": int(previous_bar['tick_volume']),  # ‚úÖ ‡πÉ‡∏ä‡πâ direct access
                "valid": True
            }
            
            self.log(f"‚úÖ Previous OHLC Retrieved ({actual_symbol}):")
            self.log(f"   üìà OHLC: {ohlc_data['open']:.5f} | {ohlc_data['high']:.5f} | {ohlc_data['low']:.5f} | {ohlc_data['close']:.5f}")
            
            return ohlc_data
            
        except Exception as e:
            self.log(f"‚ùå Previous OHLC error: {e}")
            return self._get_fallback_ohlc()

    def get_volume_data(self) -> Dict:
        """üîä ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Volume - FIXED: Numpy handling"""
        try:
            self.log("üìä Step 3: Getting volume data...")
            
            if not self.mt5_connector or not self.mt5_connector.is_connected:
                self.log("‚ùå MT5 connector not available")
                self.volume_available = False
                return self._get_fallback_volume_data()
            
            # ‡πÉ‡∏ä‡πâ symbol ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
            actual_symbol = self._find_correct_gold_symbol()
            if not actual_symbol:
                self.volume_available = False
                return self._get_fallback_volume_data()
            
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• volume ‡∏´‡∏•‡∏≤‡∏¢‡πÅ‡∏ó‡πà‡∏á
            rates = mt5.copy_rates_from_pos(actual_symbol, self.main_timeframe, 0, self.volume_lookback + 2)
            
            if rates is None or len(rates) < 2:
                self.log("‚ùå Failed to get volume data")
                self.volume_available = False
                return self._get_fallback_volume_data()
            
            # ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: Handle numpy array volumes correctly
            volumes = []
            for rate in rates:
                volume = int(rate['tick_volume'])  # ‚úÖ Direct access ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà .get()
                if volume > 0:
                    volumes.append(volume)
            
            if not volumes:
                self.log("‚ùå No valid volume data")
                self.volume_available = False
                return self._get_fallback_volume_data()
            
            current_volume = volumes[-1] if volumes else 0
            average_volume = sum(volumes) / len(volumes) if volumes else 1
            volume_ratio = current_volume / average_volume if average_volume > 0 else 1.0
            
            self.volume_available = True
            
            return {
                "current_volume": current_volume,
                "average_volume": average_volume,
                "volume_ratio": volume_ratio,
                "volume_available": True,
                "lookback_periods": len(volumes)
            }
            
        except Exception as e:
            self.log(f"‚ùå Volume data error: {e}")
            self.volume_available = False
            return self._get_fallback_volume_data()
    
    def _find_correct_gold_symbol(self) -> Optional[str]:
        """üîç ‡∏´‡∏≤ Gold Symbol ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ô‡πÇ‡∏ö‡∏£‡∏Å‡πÄ‡∏Å‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ"""
        try:
            # 1. ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ symbol ‡∏ó‡∏µ‡πà mt5_connector detect ‡πÑ‡∏ß‡πâ
            if hasattr(self.mt5_connector, 'gold_symbol') and self.mt5_connector.gold_symbol:
                detected_symbol = self.mt5_connector.gold_symbol
                self.log(f"üîç Trying detected symbol: {detected_symbol}")
                
                symbol_info = mt5.symbol_info(detected_symbol)
                if symbol_info:
                    self.symbol = detected_symbol  # Update internal symbol
                    return detected_symbol
            
            # 2. ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠ symbol ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            self.log("üîç Searching all available symbols...")
            all_symbols = mt5.symbols_get()
            
            if not all_symbols:
                self.log("‚ùå No symbols available")
                return None
            
            # ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ pattern ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏≤
            gold_patterns = [
                'XAUUSD.v',     # ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
                'XAUUSD.',      # ‡∏°‡∏µ dot ‡∏´‡∏•‡∏±‡∏á
                'XAUUSD',       # standard
                'GOLD',         # ‡∏ä‡∏∑‡πà‡∏≠ GOLD ‡πÄ‡∏â‡∏¢‡πÜ
                'XAU/USD',      # ‡∏°‡∏µ slash
                'XAUUSD#',      # ‡∏°‡∏µ # ‡∏´‡∏•‡∏±‡∏á
                'XAUUSD-',      # ‡∏°‡∏µ dash ‡∏´‡∏•‡∏±‡∏á
            ]
            
            # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡∏≤‡∏° pattern
            for pattern in gold_patterns:
                for symbol in all_symbols:
                    if symbol.name.upper() == pattern.upper():
                        self.log(f"üîç Found exact match: {symbol.name}")
                        
                        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ
                        if self._test_symbol_usability(symbol.name):
                            self.symbol = symbol.name  # Update internal
                            return symbol.name
            
            # 3. ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏ö‡∏ö contains
            for symbol in all_symbols:
                name_upper = symbol.name.upper()
                if ('XAU' in name_upper and 'USD' in name_upper) or 'GOLD' in name_upper:
                    self.log(f"üîç Testing symbol: {symbol.name}")
                    
                    if self._test_symbol_usability(symbol.name):
                        self.symbol = symbol.name
                        return symbol.name
            
            self.log("‚ùå No valid gold symbol found")
            return None
            
        except Exception as e:
            self.log(f"‚ùå Find symbol error: {e}")
            return None

    def _test_symbol_usability(self, symbol_name: str) -> bool:
        """üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ symbol ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
        try:
            # Select symbol
            if not mt5.symbol_select(symbol_name, True):
                return False
            
            # Get tick data
            tick = mt5.symbol_info_tick(symbol_name)
            if not tick:
                return False
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ó‡∏≠‡∏á‡∏Ñ‡∏≥
            if tick.bid < 1000 or tick.bid > 10000:
                return False
            
            # ‡∏•‡∏≠‡∏á‡∏î‡∏∂‡∏á rates
            rates = mt5.copy_rates_from_pos(symbol_name, mt5.TIMEFRAME_M5, 0, 2)
            if rates is None or len(rates) < 1:
                return False
            
            self.log(f"‚úÖ Symbol {symbol_name} is usable - Price: {tick.bid:.2f}")
            return True
            
        except Exception as e:
            self.log(f"‚ùå Test symbol {symbol_name} error: {e}")
            return False

    # ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° Debug method
    def debug_available_symbols(self):
        """üîç Debug ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠ symbol ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        try:
            self.log("üîç === ALL AVAILABLE SYMBOLS ===")
            
            all_symbols = mt5.symbols_get()
            if not all_symbols:
                self.log("‚ùå No symbols available")
                return
            
            # ‡πÅ‡∏™‡∏î‡∏á gold-related symbols
            gold_symbols = []
            for symbol in all_symbols:
                name = symbol.name.upper()
                if ('XAU' in name or 'GOLD' in name):
                    gold_symbols.append(symbol.name)
            
            self.log(f"ü•á Gold-related symbols found: {len(gold_symbols)}")
            for symbol in gold_symbols[:10]:  # ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏Ñ‡πà 10 ‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å
                self.log(f"   üìä {symbol}")
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡πÅ‡∏Ñ‡πà 50 ‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å)
            self.log(f"üìä Total symbols: {len(all_symbols)}")
            self.log("üìã First 50 symbols:")
            for i, symbol in enumerate(all_symbols[:50]):
                self.log(f"   {i+1:2d}. {symbol.name}")
            
            self.log("=" * 50)
            
        except Exception as e:
            self.log(f"‚ùå Debug symbols error: {e}")

    def get_candlestick_info(self) -> Dict:
        """üÜï ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• candlestick ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î - ‡∏û‡∏£‡πâ‡∏≠‡∏° comprehensive logging"""
        try:
            self.log("üïØÔ∏è  === STARTING CANDLESTICK ANALYSIS ===")
            
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
            self.log("üìä Step 1: Getting current OHLC...")
            current_ohlc = self.get_current_ohlc()
            
            self.log("üìä Step 2: Getting previous OHLC...")
            previous_ohlc = self.get_previous_ohlc()
            
            self.log("üìä Step 3: Getting volume data...")
            volume_data = self.get_volume_data()
            
            if not current_ohlc.get("valid") or not previous_ohlc.get("valid"):
                self.log("‚ùå Invalid OHLC data - using fallback")
                return self._get_fallback_candlestick_info()
            
            self.log("üìä Step 4: Analyzing candlestick pattern...")
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì candlestick metrics
            candlestick_analysis = self._analyze_candlestick_pattern(
                current_ohlc, previous_ohlc
            )
            
            self.log("‚úÖ Candlestick analysis completed successfully")
            
            # ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            result = {
                "current_ohlc": current_ohlc,
                "previous_ohlc": previous_ohlc,
                "volume_data": volume_data,
                "candlestick_analysis": candlestick_analysis,
                "timestamp": datetime.now(),
                "valid": True
            }
            
            # ‚úÖ LOG COMPREHENSIVE SUMMARY
            self.log("üéØ === CANDLESTICK ANALYSIS SUMMARY ===")
            self.log(f"‚úÖ Analysis Valid: {result['valid']}")
            self.log(f"üé® Candle Color: {candlestick_analysis.get('candle_color', 'N/A')}")
            self.log(f"üìä Price Direction: {candlestick_analysis.get('price_direction', 'N/A')}")
            self.log(f"üí™ Body Ratio: {candlestick_analysis.get('body_ratio', 0):.3f}")
            self.log(f"üéØ Pattern: {candlestick_analysis.get('pattern_detected', 'N/A')}")
            self.log(f"üîä Volume Available: {volume_data.get('volume_available', False)}")
            self.log("=" * 50)
            
            return result
            
        except Exception as e:
            self.log(f"‚ùå Candlestick info error: {e}")
            self.log(f"üîß Error details: {str(e)}")
            return self._get_fallback_candlestick_info()

    def _analyze_candlestick_pattern(self, current: Dict, previous: Dict) -> Dict:
        """üÜï ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå pattern ‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô - ‡∏û‡∏£‡πâ‡∏≠‡∏° detailed logging"""
        try:
            self.log("üîç Analyzing candlestick pattern details...")
            
            # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ó‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            open_price = current["open"]
            high_price = current["high"]
            low_price = current["low"]
            close_price = current["close"]
            
            # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ó‡πà‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
            previous_close = previous["close"]
            previous_open = previous["open"]
            
            self.log(f"üìä Current: O={open_price:.5f}, H={high_price:.5f}, L={low_price:.5f}, C={close_price:.5f}")
            self.log(f"üìä Previous: O={previous_open:.5f}, C={previous_close:.5f}")
            
            # 1. ‡∏™‡∏µ‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô
            candle_color = "GREEN" if close_price > open_price else "RED" if close_price < open_price else "DOJI"
            previous_color = "GREEN" if previous_close > previous_open else "RED" if previous_close < previous_open else "DOJI"
            
            self.log(f"üé® Candle Colors: Previous={previous_color}, Current={candle_color}")
            
            # 2. ‡∏Ç‡∏ô‡∏≤‡∏î body
            body_size = abs(close_price - open_price)
            previous_body_size = abs(previous_close - previous_open)
            
            # 3. ‡∏Ç‡∏ô‡∏≤‡∏î‡∏ä‡πà‡∏ß‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏ï‡πá‡∏°
            full_range = high_price - low_price
            previous_full_range = previous["high"] - previous["low"]
            
            # 4. ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏™‡πà‡∏ß‡∏ô body ‡∏ï‡πà‡∏≠ range
            body_ratio = body_size / full_range if full_range > 0 else 0
            
            self.log(f"üìè Body Size: {body_size:.5f} | Full Range: {full_range:.5f} | Ratio: {body_ratio:.3f}")
            
            # 5. ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤
            price_direction = "UP" if close_price > previous_close else "DOWN" if close_price < previous_close else "SIDEWAYS"
            price_change = close_price - previous_close
            price_change_pct = (price_change / previous_close * 100) if previous_close > 0 else 0
            
            self.log(f"üìä Price Direction: {price_direction} | Change: {price_change:.5f} ({price_change_pct:.2f}%)")
            
            # 6. ‚ú® ENHANCED PATTERN RECOGNITION
            pattern_info = self._detect_candlestick_patterns(current, previous)
            self.log(f"üéØ Pattern Detected: {pattern_info.get('pattern_name', 'STANDARD')}")
            
            # 7. ‚ú® TREND CONTEXT
            trend_context = self._get_short_term_trend_context(current, previous)
            self.log(f"üìà Trend Alignment: {trend_context.get('trend_alignment', 0.5):.3f}")
            
            # 8. ‚úÖ ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏Å‡∏£‡πà‡∏á‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô
            candle_strength = self._calculate_enhanced_candle_strength(
                body_ratio, full_range, price_change_pct, pattern_info
            )
            self.log(f"üí™ Candle Strength: {candle_strength:.3f}")
            
            result = {
                # Basic candlestick info
                "candle_color": candle_color,
                "previous_color": previous_color,
                "body_size": body_size,
                "full_range": full_range,
                "body_ratio": body_ratio,
                "price_direction": price_direction,
                "close_vs_previous": price_change,
                "price_change_pct": price_change_pct,
                
                # ‚ú® Enhanced analysis
                "pattern_detected": pattern_info.get("pattern_name", "STANDARD"),
                "pattern_strength": pattern_info.get("pattern_strength", 0.5),
                "trend_alignment": trend_context.get("trend_alignment", 0.5),
                "momentum_score": trend_context.get("momentum_score", 0.5),
                "candle_strength": candle_strength,
                
                # Multi-candle context
                "candle_sequence": f"{previous_color}-{candle_color}",
                "body_size_comparison": "LARGER" if body_size > previous_body_size else "SMALLER",
                "range_comparison": "WIDER" if full_range > previous_full_range else "NARROWER"
            }
            
            self.log("‚úÖ Candlestick pattern analysis completed")
            return result
            
        except Exception as e:
            self.log(f"‚ùå Enhanced candlestick pattern analysis error: {e}")
            return {
                "candle_color": "NEUTRAL", "body_size": 0, "full_range": 0,
                "body_ratio": 0, "price_direction": "NEUTRAL", 
                "candle_strength": 0.5, "pattern_detected": "NONE",
                "trend_alignment": 0.5
            }
    
    def _analyze_candlestick_pattern(self, current: Dict, previous: Dict) -> Dict:
        """üÜï ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå pattern ‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô - ENHANCED VERSION"""
        try:
            # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ó‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            open_price = current["open"]
            high_price = current["high"]
            low_price = current["low"]
            close_price = current["close"]
            
            # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ó‡πà‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
            previous_open = previous["open"]
            previous_high = previous["high"]
            previous_low = previous["low"]
            previous_close = previous["close"]
            
            # 1. ‡∏™‡∏µ‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô
            candle_color = "GREEN" if close_price > open_price else "RED"
            previous_color = "GREEN" if previous_close > previous_open else "RED"
            
            # 2. ‡∏Ç‡∏ô‡∏≤‡∏î body
            body_size = abs(close_price - open_price)
            previous_body_size = abs(previous_close - previous_open)
            
            # 3. ‡∏Ç‡∏ô‡∏≤‡∏î‡∏ä‡πà‡∏ß‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏ï‡πá‡∏°
            full_range = high_price - low_price
            previous_full_range = previous_high - previous_low
            
            # 4. ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏™‡πà‡∏ß‡∏ô body ‡∏ï‡πà‡∏≠ range
            body_ratio = body_size / full_range if full_range > 0 else 0
            previous_body_ratio = previous_body_size / previous_full_range if previous_full_range > 0 else 0
            
            # 5. ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤
            price_direction = "UP" if close_price > previous_close else "DOWN"
            price_change = close_price - previous_close
            price_change_pct = (price_change / previous_close * 100) if previous_close > 0 else 0
            
            # 6. ‚ú® ENHANCED PATTERN RECOGNITION
            pattern_info = self._detect_candlestick_patterns(current, previous)
            
            # 7. ‚ú® TREND CONTEXT
            trend_context = self._get_short_term_trend_context(current, previous)
            
            # 8. ‚ú® STRENGTH ASSESSMENT
            candle_strength = self._calculate_enhanced_candle_strength(
                body_ratio, full_range, price_change_pct, pattern_info
            )
            
            return {
                # Basic candlestick info
                "candle_color": candle_color,
                "previous_color": previous_color,
                "body_size": body_size,
                "full_range": full_range,
                "body_ratio": body_ratio,
                "price_direction": price_direction,
                "close_vs_previous": price_change,
                "price_change_pct": price_change_pct,
                
                # ‚ú® Enhanced analysis
                "pattern_detected": pattern_info["pattern_name"],
                "pattern_strength": pattern_info["pattern_strength"],
                "trend_alignment": trend_context["trend_alignment"],
                "momentum_score": trend_context["momentum_score"],
                "candle_strength": candle_strength,
                
                # Multi-candle context
                "candle_sequence": f"{previous_color}-{candle_color}",
                "body_size_comparison": "LARGER" if body_size > previous_body_size else "SMALLER",
                "range_comparison": "WIDER" if full_range > previous_full_range else "NARROWER"
            }
            
        except Exception as e:
            self.log(f"‚ùå Enhanced candlestick pattern analysis error: {e}")
            return {
                "candle_color": "NEUTRAL", "body_size": 0, "full_range": 0,
                "body_ratio": 0, "price_direction": "NEUTRAL", 
                "candle_strength": 0.5, "pattern_detected": "NONE",
                "trend_alignment": 0.5
            }
    
    def _detect_candlestick_patterns(self, current: Dict, previous: Dict) -> Dict:
        """üÜï ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö candlestick patterns ‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç"""
        try:
            c_open, c_high, c_low, c_close = current["open"], current["high"], current["low"], current["close"]
            p_open, p_high, p_low, p_close = previous["open"], previous["high"], previous["low"], previous["close"]
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡πà‡∏ß‡∏ô‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á‡πÅ‡∏ó‡πà‡∏á
            c_body = abs(c_close - c_open)
            c_range = c_high - c_low
            c_upper_shadow = c_high - max(c_open, c_close)
            c_lower_shadow = min(c_open, c_close) - c_low
            
            # ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì p_body ‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡∏´‡∏≤‡∏¢
            p_body = abs(p_close - p_open)
            
            pattern_name = "STANDARD"
            pattern_strength = 0.5
            
            # ‚ú® DOJI DETECTION
            if c_body < (c_range * 0.1):  # Body < 10% ‡∏Ç‡∏≠‡∏á range
                pattern_name = "DOJI"
                pattern_strength = 0.3
            
            # ‚ú® HAMMER DETECTION (‡∏Å‡∏•‡∏±‡∏ö‡∏ï‡∏±‡∏ß bullish)
            elif (c_lower_shadow > c_body * 2 and c_upper_shadow < c_body * 0.5 and 
                  c_close > c_open and c_close > p_close):
                pattern_name = "HAMMER"
                pattern_strength = 0.8
            
            # ‚ú® SHOOTING STAR DETECTION (‡∏Å‡∏•‡∏±‡∏ö‡∏ï‡∏±‡∏ß bearish)
            elif (c_upper_shadow > c_body * 2 and c_lower_shadow < c_body * 0.5 and 
                  c_close < c_open and c_close < p_close):
                pattern_name = "SHOOTING_STAR"
                pattern_strength = 0.8
            
            # ‚ú® STRONG BULLISH ENGULFING
            elif (c_close > c_open and p_close < p_open and 
                  c_close > p_open and c_open < p_close and c_body > p_body):
                pattern_name = "BULLISH_ENGULFING"
                pattern_strength = 0.9
            
            # ‚ú® STRONG BEARISH ENGULFING  
            elif (c_close < c_open and p_close > p_open and
                  c_close < p_open and c_open > p_close and c_body > p_body):
                pattern_name = "BEARISH_ENGULFING"
                pattern_strength = 0.9
            
            # ‚ú® STRONG MOMENTUM CANDLES
            elif c_body > (c_range * 0.7):  # Body > 70% ‡∏Ç‡∏≠‡∏á range
                if c_close > c_open:
                    pattern_name = "STRONG_BULL"
                    pattern_strength = 0.8
                else:
                    pattern_name = "STRONG_BEAR"
                    pattern_strength = 0.8
            
            return {
                "pattern_name": pattern_name,
                "pattern_strength": pattern_strength,
                "body_dominance": c_body / c_range if c_range > 0 else 0,
                "shadow_analysis": {
                    "upper_shadow_ratio": c_upper_shadow / c_range if c_range > 0 else 0,
                    "lower_shadow_ratio": c_lower_shadow / c_range if c_range > 0 else 0
                }
            }
            
        except Exception as e:
            self.log(f"‚ùå Pattern detection error: {e}")
            return {"pattern_name": "ERROR", "pattern_strength": 0.5}
    
    def _get_short_term_trend_context(self, current: Dict, previous: Dict) -> Dict:
        """üÜï ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå trend context ‡∏£‡∏∞‡∏¢‡∏∞‡∏™‡∏±‡πâ‡∏ô"""
        try:
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 10 ‡πÅ‡∏ó‡πà‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö trend
            rates = mt5.copy_rates_from_pos(self.symbol, self.main_timeframe, 0, 10)
            
            if rates is None or len(rates) < 5:
                return {"trend_alignment": 0.5, "momentum_score": 0.5}
            
            closes = [float(rate['close']) for rate in rates]
            
            # Simple trend direction
            trend_up_count = sum(1 for i in range(1, len(closes)) if closes[i] > closes[i-1])
            trend_strength = trend_up_count / (len(closes) - 1)
            
            # Momentum (‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á)
            if len(closes) >= 5:
                recent_momentum = (closes[-1] - closes[-5]) / closes[-5] * 100
                momentum_score = min(1.0, abs(recent_momentum) / 0.5)  # 0.5% = max momentum
            else:
                momentum_score = 0.5
            
            # Trend alignment with current signal
            current_direction = "UP" if current["close"] > previous["close"] else "DOWN"
            if trend_strength > 0.6:
                major_trend = "UP"
            elif trend_strength < 0.4:
                major_trend = "DOWN"
            else:
                major_trend = "SIDEWAYS"
            
            alignment_score = 1.0 if current_direction == major_trend else 0.3
            
            return {
                "trend_alignment": alignment_score,
                "momentum_score": momentum_score,
                "major_trend": major_trend,
                "trend_strength": trend_strength,
                "recent_momentum": recent_momentum if 'recent_momentum' in locals() else 0.0
            }
            
        except Exception as e:
            self.log(f"‚ùå Trend context error: {e}")
            return {"trend_alignment": 0.5, "momentum_score": 0.5}
    
    def _calculate_enhanced_candle_strength(self, body_ratio: float, full_range: float, 
                                          price_change_pct: float, pattern_info: Dict) -> float:
        """üÜï ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏£‡∏á‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô‡πÅ‡∏ö‡∏ö enhanced"""
        try:
            # Base strength from body ratio
            if body_ratio > 0.7:
                base_strength = 1.0
            elif body_ratio >= 0.4:
                base_strength = 0.7
            elif body_ratio >= 0.2:
                base_strength = 0.4
            else:
                base_strength = 0.1
            
            # Pattern bonus
            pattern_bonus = pattern_info.get("pattern_strength", 0.5) - 0.5  # -0.5 to +0.5
            
            # Price movement bonus
            movement_bonus = min(0.2, abs(price_change_pct) / 0.5)  # max 0.2 bonus for 0.5% move
            
            # Range significance (‡πÅ‡∏ó‡πà‡∏á‡πÉ‡∏´‡∏ç‡πà = ‡πÅ‡∏£‡∏á‡∏Å‡∏ß‡πà‡∏≤)
            range_bonus = min(0.1, full_range / 10.0)  # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏° symbol
            
            # Combined strength
            total_strength = base_strength + pattern_bonus + movement_bonus + range_bonus
            
            return max(0.1, min(1.0, total_strength))
            
        except Exception as e:
            self.log(f"‚ùå Enhanced candle strength error: {e}")
            return 0.5
    
    def _classify_candle_type(self, body_ratio: float) -> str:
        """üÜï ‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô"""
        try:
            if body_ratio > 0.7:
                return "STRONG_BODY"
            elif body_ratio > 0.4:
                return "MEDIUM_BODY"  
            elif body_ratio > 0.2:
                return "WEAK_BODY"
            else:
                return "DOJI_SPINNING"
        except:
            return "UNKNOWN"
    
    def calculate_volume_factor(self, volume_data: Dict) -> float:
        """üÜï ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Volume Factor ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Dynamic Lot Sizing - ENHANCED"""
        try:
            if not volume_data.get("volume_available", False):
                self.log("üìä Volume not available - using smart fallback")
                return self._calculate_volume_fallback()
            
            volume_ratio = volume_data.get("volume_ratio", 1.0)
            current_volume = volume_data.get("current_volume", 0)
            
            # ‚ú® Enhanced Volume Factor with validation
            if volume_ratio > 2.0:      # Volume > 200% avg
                factor = 2.0
                level = "EXTREMELY_HIGH"
                confidence = 0.9
            elif volume_ratio > 1.5:    # Volume > 150% avg
                factor = 1.5
                level = "HIGH"
                confidence = 0.8
            elif volume_ratio > 1.2:    # Volume > 120% avg
                factor = 1.2
                level = "ABOVE_AVERAGE"
                confidence = 0.7
            elif volume_ratio >= 0.8:   # Volume 80-120% avg
                factor = 1.0
                level = "NORMAL"
                confidence = 0.8
            elif volume_ratio >= 0.5:   # Volume 50-80% avg
                factor = 0.7
                level = "LOW"
                confidence = 0.6
            else:                       # Volume < 50% avg
                factor = 0.5
                level = "VERY_LOW"
                confidence = 0.5
            
            # ‚ú® Volume quality check
            if current_volume == 0:
                factor = 1.0  # Fallback
                level = "NO_DATA"
                confidence = 0.3
            
            self.log(f"üìä Volume Factor: {factor}x ({level}, Confidence: {confidence:.1f}) - Ratio: {volume_ratio:.2f}")
            
            return {
                "factor": factor,
                "level": level,
                "confidence": confidence,
                "volume_ratio": volume_ratio,
                "current_volume": current_volume
            }
            
        except Exception as e:
            self.log(f"‚ùå Enhanced volume factor calculation error: {e}")
            return {"factor": 1.0, "level": "ERROR", "confidence": 0.3}
    
    def _calculate_volume_fallback(self) -> Dict:
        """üîß ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì volume factor ‡∏ó‡∏î‡πÅ‡∏ó‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• volume"""
        try:
            # ‡πÉ‡∏ä‡πâ price movement ‡πÄ‡∏õ‡πá‡∏ô proxy
            current_ohlc = self.get_current_ohlc()
            if not current_ohlc.get("valid"):
                return {"factor": 1.0, "level": "FALLBACK_DEFAULT", "confidence": 0.5}
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì price movement intensity
            price_range = current_ohlc["high"] - current_ohlc["low"]
            body_size = abs(current_ohlc["close"] - current_ohlc["open"])
            
            # Proxy factor based on price action
            if body_size > price_range * 0.8:      # ‡πÅ‡∏ó‡πà‡∏á‡πÉ‡∏´‡∏ç‡πà‡∏°‡∏≤‡∏Å
                proxy_factor = 1.5
                level = "HIGH_MOVEMENT"
            elif body_size > price_range * 0.5:    # ‡πÅ‡∏ó‡πà‡∏á‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á
                proxy_factor = 1.2
                level = "MEDIUM_MOVEMENT"
            elif body_size > price_range * 0.2:    # ‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏•‡πá‡∏Å
                proxy_factor = 1.0
                level = "LOW_MOVEMENT"
            else:                                  # ‡πÅ‡∏ó‡πà‡∏á doji
                proxy_factor = 0.8
                level = "MINIMAL_MOVEMENT"
            
            return {
                "factor": proxy_factor,
                "level": level,
                "confidence": 0.6,  # Lower confidence for fallback
                "is_fallback": True
            }
            
        except Exception as e:
            self.log(f"‚ùå Volume fallback calculation error: {e}")
            return {"factor": 1.0, "level": "ERROR", "confidence": 0.3}
    
    def calculate_candle_strength_factor(self, candlestick_data: Dict) -> float:
        """üÜï ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Candle Strength Factor - ENHANCED VERSION"""
        try:
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
            body_ratio = candlestick_data.get("body_ratio", 0.5)
            pattern_strength = candlestick_data.get("pattern_strength", 0.5)
            trend_alignment = candlestick_data.get("trend_alignment", 0.5)
            
            # ‚ú® Enhanced calculation with pattern recognition
            base_factor = self._get_base_candle_factor(body_ratio)
            pattern_modifier = self._get_pattern_modifier(
                candlestick_data.get("pattern_detected", "STANDARD"),
                pattern_strength
            )
            trend_modifier = self._get_trend_alignment_modifier(trend_alignment)
            
            # Combined factor
            enhanced_factor = base_factor * pattern_modifier * trend_modifier
            
            # Bounds checking
            final_factor = max(0.3, min(1.5, enhanced_factor))
            
            pattern_name = candlestick_data.get("pattern_detected", "STANDARD")
            self.log(f"üìä Enhanced Candle Factor: {final_factor:.2f}x (Pattern: {pattern_name}, Trend: {trend_alignment:.2f})")
            
            return final_factor
            
        except Exception as e:
            self.log(f"‚ùå Enhanced candle strength factor error: {e}")
            return 1.0
    
    def _get_base_candle_factor(self, body_ratio: float) -> float:
        """üîß Base factor ‡∏à‡∏≤‡∏Å body ratio"""
        if body_ratio > 0.7:        # Strong Body
            return 1.5
        elif body_ratio >= 0.4:     # Medium Body  
            return 1.0
        elif body_ratio >= 0.2:     # Weak Body
            return 0.6
        else:                       # Doji/Spinning
            return 0.3
    
    def _get_pattern_modifier(self, pattern_name: str, pattern_strength: float) -> float:
        """üîß Modifier ‡∏à‡∏≤‡∏Å pattern ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö"""
        pattern_modifiers = {
            "HAMMER": 1.2,
            "SHOOTING_STAR": 1.2,
            "BULLISH_ENGULFING": 1.3,
            "BEARISH_ENGULFING": 1.3,
            "STRONG_BULL": 1.1,
            "STRONG_BEAR": 1.1,
            "DOJI": 0.5,
            "STANDARD": 1.0
        }
        
        base_modifier = pattern_modifiers.get(pattern_name, 1.0)
        return base_modifier * (0.5 + pattern_strength * 0.5)  # 0.5-1.5 range
    
    def _get_trend_alignment_modifier(self, trend_alignment: float) -> float:
        """üîß Modifier ‡∏à‡∏≤‡∏Å trend alignment"""
        # ‡πÄ‡∏°‡∏∑‡πà‡∏≠ signal ‡πÑ‡∏õ‡∏ó‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö trend = ‡πÅ‡∏£‡∏á‡∏Ç‡∏∂‡πâ‡∏ô
        return 0.8 + (trend_alignment * 0.4)  # 0.8-1.2 range
    
    # ========================================================================================
    # üîÑ EXISTING METHODS (KEPT FOR COMPATIBILITY) 
    # ========================================================================================
    
    def get_comprehensive_analysis(self) -> Dict:
        """‡∏£‡∏±‡∏Å‡∏©‡∏≤ interface ‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏ß‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ"""
        try:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö cache
            now = datetime.now()
            if (now - self.last_analysis_time).seconds < self.cache_duration:
                if self.cached_analysis:
                    return self.cached_analysis
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á analysis ‡πÉ‡∏´‡∏°‡πà
            analysis = {}
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• candlestick ‡πÉ‡∏´‡∏°‡πà
            candlestick_info = self.get_candlestick_info()
            analysis["candlestick_data"] = candlestick_info
            
            # ‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°
            analysis.update(self._get_basic_technical_analysis())
            analysis.update(self._get_market_context())
            
            # Cache ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
            self.cached_analysis = analysis
            self.last_analysis_time = now
            
            return analysis
            
        except Exception as e:
            self.log(f"‚ùå Comprehensive analysis error: {e}")
            return self._get_fallback_analysis()
    
    def _get_basic_technical_analysis(self) -> Dict:
        """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô - ‡∏£‡∏±‡∏Å‡∏©‡∏≤‡πÑ‡∏ß‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ"""
        try:
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤
            rates = mt5.copy_rates_from_pos(self.symbol, self.main_timeframe, 0, 50)
            if rates is None:
                return {}
            
            df = pd.DataFrame(rates)
            close_prices = df['close'].values
            
            if len(close_prices) < 20:
                return {}
            
            # RSI
            rsi = self._calculate_rsi(close_prices, 14)
            
            # Moving averages
            ma_fast = np.mean(close_prices[-5:])
            ma_slow = np.mean(close_prices[-20:])
            
            return {
                "rsi": rsi,
                "rsi_condition": self._classify_rsi(rsi),
                "ma_direction": "BULLISH" if ma_fast > ma_slow else "BEARISH",
                "trend_strength": abs(ma_fast - ma_slow) / ma_slow if ma_slow > 0 else 0,
                "volatility_level": "NORMAL"
            }
            
        except Exception as e:
            self.log(f"‚ùå Technical analysis error: {e}")
            return {}
    
    def _get_market_context(self) -> Dict:
        """‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡∏ï‡∏•‡∏≤‡∏î - ‡∏£‡∏±‡∏Å‡∏©‡∏≤‡πÑ‡∏ß‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ"""
        try:
            now = datetime.now()
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö session
            session = self._get_trading_session(now)
            
            return {
                "session": session,
                "spread_score": 0.7,  # Placeholder
                "volume_score": 0.6   # Placeholder
            }
            
        except Exception as e:
            self.log(f"‚ùå Market context error: {e}")
            return {"session": "UNKNOWN"}
    
    # ========================================================================================
    # üõ°Ô∏è FALLBACK METHODS
    # ========================================================================================
    
    def _get_fallback_ohlc(self) -> Dict:
        """Fallback OHLC data ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ"""
        return {
            "time": datetime.now(),
            "open": 2000.0, "high": 2000.0, "low": 2000.0, "close": 2000.0,
            "volume": 0, "valid": False
        }
    
    def _get_fallback_volume_data(self) -> Dict:
        """Fallback volume data ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ volume"""
        return {
            "current_volume": 0, "average_volume": 0, "volume_ratio": 1.0,
            "volume_available": False, "lookback_periods": 0
        }
    
    def _get_fallback_candlestick_info(self) -> Dict:
        """Fallback candlestick info"""
        return {
            "current_ohlc": self._get_fallback_ohlc(),
            "previous_ohlc": self._get_fallback_ohlc(),
            "volume_data": self._get_fallback_volume_data(),
            "candlestick_analysis": {
                "candle_color": "NEUTRAL", "price_direction": "NEUTRAL",
                "body_ratio": 0.5, "candle_strength": 0.5
            },
            "valid": False
        }
    
    def _get_fallback_analysis(self) -> Dict:
        """Fallback analysis ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î"""
        return {
            "candlestick_data": self._get_fallback_candlestick_info(),
            "trend_strength": 0.5, "volatility_level": "NORMAL",
            "session": "UNKNOWN"
        }
    
    # ========================================================================================
    # üîß HELPER METHODS
    # ========================================================================================
    
    def _calculate_rsi(self, prices: np.array, period: int = 14) -> float:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì RSI"""
        try:
            if len(prices) < period + 1:
                return 50.0
                
            deltas = np.diff(prices)
            gains = np.where(deltas > 0, deltas, 0)
            losses = np.where(deltas < 0, -deltas, 0)
            
            avg_gain = np.mean(gains[-period:])
            avg_loss = np.mean(losses[-period:])
            
            if avg_loss == 0:
                return 100.0
                
            rs = avg_gain / avg_loss
            rsi = 100 - (100 / (1 + rs))
            
            return float(np.clip(rsi, 0, 100))
            
        except Exception as e:
            self.log(f"‚ùå RSI calculation error: {e}")
            return 50.0
    
    def _classify_rsi(self, rsi: float) -> str:
        """‡∏à‡∏≥‡πÅ‡∏ô‡∏Å RSI condition"""
        if rsi < 30:
            return "OVERSOLD"
        elif rsi < 40:
            return "WEAK"
        elif rsi < 60:
            return "NEUTRAL"
        elif rsi < 70:
            return "STRONG"
        else:
            return "OVERBOUGHT"
    
    def _get_trading_session(self, current_time: datetime) -> str:
        """‡∏£‡∏∞‡∏ö‡∏∏ trading session ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"""
        try:
            hour = current_time.hour
            
            if 0 <= hour < 8:
                return "ASIAN"
            elif 8 <= hour < 16:
                return "LONDON"
            elif 16 <= hour < 24:
                return "NEW_YORK"
            else:
                return "QUIET"
                
        except:
            return "UNKNOWN"
    
    def log(self, message: str):
        """Log message with timestamp"""
        timestamp = datetime.now().strftime("%H:%M:%S.%f")[:-3]
        print(f"[{timestamp}] üìä MarketAnalyzer: {message}")


# ========================================================================================
# üß™ TEST FUNCTIONS
# ========================================================================================

if __name__ == "__main__":
    print("üß™ Testing Enhanced Market Analyzer...")
    print("‚úÖ OHLC Data Retrieval")
    print("‚úÖ Volume Analysis with Fallback")  
    print("‚úÖ Candlestick Pattern Recognition")
    print("‚úÖ Dynamic Volume Factor Calculation")
    print("‚úÖ Candle Strength Assessment")
    print("‚úÖ Ready for Simple Candlestick Trading Rules")