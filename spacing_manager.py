"""
üìè Spacing Manager - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡∏ß‡∏≤‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ã‡πâ‡∏≥‡πÅ‡∏•‡πâ‡∏ß
spacing_manager.py

üîß ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏¥‡∏°:
- ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
- Collision detection ‡πÅ‡∏•‡∏∞ avoidance
- Smart distribution logic
- Alternative price suggestion
"""

import time
import math
from datetime import datetime, timedelta
from typing import Dict, List, Tuple, Optional, Any
from dataclasses import dataclass
from enum import Enum
import numpy as np
from collections import deque
import statistics

class SpacingMode(Enum):
    """‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á 4D"""
    FIXED_4D = "FIXED_4D"                      
    VOLATILITY_4D = "VOLATILITY_4D"            
    TREND_4D = "TREND_4D"                      
    SESSION_4D = "SESSION_4D"                  
    ADAPTIVE_4D = "ADAPTIVE_4D"                
    OPPORTUNITY_4D = "OPPORTUNITY_4D"          

class GridBuildingStrategy(Enum):
    """‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏¥‡∏î 4D"""
    UNLIMITED_PLACEMENT = "UNLIMITED_PLACEMENT"  
    DYNAMIC_EXPANSION = "DYNAMIC_EXPANSION"      
    OPPORTUNITY_DRIVEN = "OPPORTUNITY_DRIVEN"    
    BALANCE_FOCUSED = "BALANCE_FOCUSED"          

@dataclass
class SpacingParameters4D:
    """‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå 4D ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß"""
    base_spacing: int = 80              
    preferred_spacing: int = 120        
    max_spacing: int = 600              
    no_minimum_spacing: bool = False    # ‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ minimum spacing
    
    # 4D AI factors
    volatility_multiplier: float = 2.0   
    trend_multiplier: float = 1.8        
    session_multiplier: float = 1.5      
    opportunity_multiplier: float = 2.5  
    
    # ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: collision detection
    collision_detection: bool = True     # ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ä‡∏ô
    collision_buffer: int = 30           # buffer 30 points
    unlimited_placement: bool = False    # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ß‡∏≤‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ä‡∏ô
    flexible_grid: bool = True           

@dataclass 
class Spacing4DResult:
    """‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á 4D - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß"""
    spacing: int
    reasoning: str
    four_d_score: float
    volatility_factor: float
    trend_factor: float
    session_factor: float
    opportunity_factor: float
    final_multiplier: float
    mode_used: SpacingMode
    placement_allowed: bool = True      
    collision_detected: bool = False    # ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ä‡∏ô
    alternative_price: float = 0.0     # ‚úÖ ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏î‡πÅ‡∏ó‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ä‡∏ô

@dataclass
class GridPlacement4D:
    """‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏≤‡∏á‡∏Å‡∏£‡∏¥‡∏î 4D"""
    price_level: float
    order_type: str  
    spacing_used: int
    four_d_confidence: float
    opportunity_score: float
    placement_timestamp: datetime
    reasoning: str

class SpacingManager:
    """
    üìè Spacing Manager - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡∏ß‡∏≤‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ã‡πâ‡∏≥‡πÅ‡∏•‡πâ‡∏ß
    
    ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß:
    - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
    - Collision detection ‡πÅ‡∏•‡∏∞ avoidance  
    - Smart distribution logic
    - Alternative price suggestion
    
    ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°:
    - 4D analysis system
    - Performance tracking
    - Grid building strategy
    """
    
    def __init__(self, config: Dict):
        """Initialize Enhanced 4D Spacing Manager"""
        self.config = config
        trading_config = config.get("trading", {})
        
        # ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: 4D Spacing parameters with collision detection
        self.params_4d = SpacingParameters4D(
            base_spacing=trading_config.get("base_spacing_points", 80),
            preferred_spacing=trading_config.get("preferred_spacing_points", 120),
            max_spacing=trading_config.get("max_spacing_points", 600),
            no_minimum_spacing=False,        # ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ minimum spacing
            collision_detection=True,        # ‡πÄ‡∏õ‡∏¥‡∏î collision detection
            collision_buffer=30,             # buffer 30 points
            unlimited_placement=False        # ‡πÑ‡∏°‡πà‡∏ß‡∏≤‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ä‡∏ô
        )
        
        # ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: 4D AI configuration
        self.four_d_config = {
            "enable_4d_spacing": True,
            "spacing_4d_weight": 0.30,
            "opportunity_4d_weight": 0.35,
            "safety_4d_weight": 0.20,
            "market_4d_weight": 0.15,
            "min_4d_score_for_expansion": 0.20,
            "dynamic_adjustment": True,
            "collision_avoidance": True,     # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà
            "smart_distribution": True       # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà
        }
        
        # ‡πÄ‡∏Å‡πá‡∏ö‡∏™‡πà‡∏ß‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°
        self.grid_strategy = GridBuildingStrategy.UNLIMITED_PLACEMENT
        self.current_mode = SpacingMode.ADAPTIVE_4D
        self.current_spacing_4d = self.params_4d.base_spacing
        self.spacing_history_4d = deque(maxlen=200)
        self.placement_history_4d = deque(maxlen=500)
        
        # ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÄ‡∏û‡∏¥‡πà‡∏° collision metrics
        self.performance_4d = {
            "total_placements": 0,
            "successful_placements": 0,
            "average_4d_score": 0.0,
            "spacing_efficiency": 0.0,
            "opportunity_capture_rate": 0.0,
            "grid_coverage": 0.0,
            "collision_avoidance_rate": 0.0,  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà
            "alternative_placements": 0       # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà
        }
        
        self.market_state_4d = {
            "last_4d_analysis": None,
            "last_update": datetime.now(),
            "cache_duration": 15
        }
        
        self.log("Enhanced 4D Spacing Manager initialized - Smart Collision Detection Active")
    
    # ========================================================================================
    # ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ENHANCED 4D SPACING METHODS  
    # ========================================================================================
    
    def calculate_4d_spacing(self, current_price: float, market_analysis: Dict,
                           order_type: str = "BUY", active_orders: List[Dict] = None) -> Spacing4DResult:
        """
        ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡πÅ‡∏ö‡∏ö 4D AI ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
        """
        try:
            self.log(f"Calculating enhanced 4D spacing for {order_type} at {current_price}")
            
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 4D analysis - ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°
            four_d_score = market_analysis.get("market_score_4d", 0.5)
            four_d_confidence = market_analysis.get("four_d_confidence", 0.5)
            
            # ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà: ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
            distribution_factor = 1.0
            collision_detected = False
            
            if active_orders and self.params_4d.collision_detection:
                order_analysis = self._analyze_existing_orders(active_orders, current_price, order_type)
                distribution_factor = self._calculate_distribution_factor(order_analysis)
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö collision ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö spacing ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ
                preliminary_spacing = int(self.params_4d.base_spacing * distribution_factor)
                collision_detected = self._has_spacing_collision(
                    current_price, preliminary_spacing, active_orders, order_type
                )
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì DIMENSION-BASED FACTORS - ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°
            trend_factor = self._calculate_4d_trend_factor(market_analysis)
            volume_factor = self._calculate_4d_volume_factor(market_analysis)
            session_factor = self._calculate_4d_session_factor(market_analysis)
            volatility_factor = self._calculate_4d_volatility_factor(market_analysis)
            opportunity_factor = self._calculate_4d_opportunity_factor(
                four_d_score, four_d_confidence, market_analysis
            )
            
            # ‡∏£‡∏ß‡∏° 4D MULTIPLIER ‡∏û‡∏£‡πâ‡∏≠‡∏° DISTRIBUTION FACTOR
            base_4d_multiplier = self._combine_4d_factors(
                trend_factor, volume_factor, session_factor, 
                volatility_factor, opportunity_factor
            )
            
            # ‡∏£‡∏ß‡∏°‡∏Å‡∏±‡∏ö distribution factor
            final_multiplier = (base_4d_multiplier * 0.7) + (distribution_factor * 0.3)
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì FINAL SPACING
            base_spacing = self.params_4d.base_spacing
            spacing_4d = int(base_spacing * final_multiplier)
            final_spacing = max(50, min(spacing_4d, self.params_4d.max_spacing))  # minimum 50 points
            
            # ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á enhanced reasoning
            reasoning = self._create_enhanced_4d_reasoning(
                four_d_score, trend_factor, volume_factor, session_factor,
                volatility_factor, opportunity_factor, distribution_factor,
                final_multiplier, final_spacing, len(active_orders) if active_orders else 0
            )
            
            # Update state
            self.current_spacing_4d = final_spacing
            self._update_4d_history(final_spacing, four_d_score, reasoning)
            
            # ‚úÖ Return enhanced result
            result = Spacing4DResult(
                spacing=final_spacing,
                reasoning=reasoning,
                four_d_score=four_d_score,
                volatility_factor=volatility_factor,
                trend_factor=trend_factor,
                session_factor=session_factor,
                opportunity_factor=opportunity_factor,
                final_multiplier=final_multiplier,
                mode_used=self.current_mode,
                placement_allowed=not collision_detected,   # ‡πÑ‡∏°‡πà‡∏ß‡∏≤‡∏á‡∏ñ‡πâ‡∏≤‡∏ä‡∏ô
                collision_detected=collision_detected        # ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ä‡∏ô
            )
            
            self.log(f"Enhanced 4D Spacing: {final_spacing} points (Distribution: {distribution_factor:.2f}, Collision: {collision_detected})")
            return result
            
        except Exception as e:
            self.log(f"‚ùå Enhanced 4D Spacing error: {e}")
            return self._get_default_4d_spacing()
    
    def get_flexible_spacing(self, target_price: float, current_price: float,
                           market_analysis: Dict, order_type: str = "BUY", 
                           active_orders: List[Dict] = None) -> Dict:
        """
        ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏î‡∏∂‡∏á‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡πÅ‡∏ö‡∏ö‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏° Smart Collision Avoidance
        """
        try:
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á 4D ‡∏û‡∏£‡πâ‡∏≠‡∏° active orders
            spacing_result = self.calculate_4d_spacing(
                current_price, market_analysis, order_type, active_orders
            )
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏à‡∏£‡∏¥‡∏á
            actual_distance = abs(target_price - current_price)
            suggested_distance = spacing_result.spacing * self._get_point_value()
            
            # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö collision ‡∏Å‡∏±‡∏ö target price
            collision_info = self._check_price_collision(
                target_price, active_orders, order_type
            )
            
            if collision_info['has_collision']:
                # ‡∏´‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏î‡πÅ‡∏ó‡∏ô
                alternative_price = self._find_alternative_placement(
                    target_price, current_price, active_orders, 
                    spacing_result.spacing, order_type
                )
                
                adjusted_target = alternative_price
                collision_avoided = True
                adjustment_msg = f"Moved from {target_price:.5f} to {alternative_price:.5f} (avoided collision)"
                placement_allowed = True  # ‡∏ß‡∏≤‡∏á‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏´‡∏°‡πà
                
                # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï performance
                self.performance_4d["alternative_placements"] += 1
            else:
                adjusted_target = target_price
                collision_avoided = False
                adjustment_msg = "No collision detected - original target accepted"
                placement_allowed = True
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏Å‡∏≤‡∏£‡∏ß‡∏≤‡∏á
            quality_info = self._assess_placement_quality(
                adjusted_target, current_price, active_orders, spacing_result
            )
            
            # ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
            if order_type.upper() == "BUY":
                suggested_price = current_price - suggested_distance
            else:
                suggested_price = current_price + suggested_distance
            
            return {
                "spacing_points": spacing_result.spacing,
                "target_price": adjusted_target,
                "original_target": target_price,
                "suggested_price": suggested_price,
                "actual_distance": abs(adjusted_target - current_price),
                "suggested_distance": suggested_distance,
                "is_acceptable": placement_allowed,
                "placement_allowed": placement_allowed,
                "collision_detected": collision_info['has_collision'],
                "collision_avoided": collision_avoided,
                "four_d_score": spacing_result.four_d_score,
                "placement_quality": quality_info['quality'],
                "distribution_efficiency": quality_info.get('efficiency', 0.5),
                "reasoning": f"{spacing_result.reasoning} | {adjustment_msg}",
                "warnings": collision_info.get('warnings', []),
                "recommendations": [
                    f"Enhanced spacing: {spacing_result.spacing} points",
                    f"Quality assessment: {quality_info['quality']}",
                    f"Collision management: {'Active' if collision_avoided else 'Not needed'}",
                    "Smart distribution enabled"
                ]
            }
            
        except Exception as e:
            self.log(f"‚ùå Enhanced flexible spacing error: {e}")
            return self._get_default_flexible_spacing(target_price, current_price)
    
    # ========================================================================================
    # ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà: HELPER METHODS ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö SMART DISTRIBUTION
    # ========================================================================================
    
    def _analyze_existing_orders(self, active_orders: List[Dict], 
                               current_price: float, order_type: str) -> Dict:
        """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà"""
        try:
            if not active_orders:
                return {"total_orders": 0, "density": 0, "gaps": []}
            
            # ‡∏Å‡∏£‡∏≠‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
            relevant_orders = [
                o for o in active_orders 
                if o.get('type', '').upper() == order_type.upper()
            ]
            
            if not relevant_orders:
                return {"total_orders": 0, "density": 0, "gaps": []}
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì price levels ‡πÅ‡∏•‡∏∞ gaps
            price_levels = sorted([float(o.get('price', 0)) for o in relevant_orders])
            gaps = []
            
            for i in range(len(price_levels) - 1):
                gap_size = abs(price_levels[i+1] - price_levels[i])
                gaps.append({
                    'start': price_levels[i],
                    'end': price_levels[i+1], 
                    'size': gap_size,
                    'points': int(gap_size / self._get_point_value())
                })
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ô‡∏≤‡πÅ‡∏ô‡πà‡∏ô
            if len(price_levels) > 1:
                price_range = max(price_levels) - min(price_levels)
                density = len(price_levels) / max(price_range * 100, 1)  # orders per 100 points
            else:
                density = 0
                
            return {
                "total_orders": len(relevant_orders),
                "density": density,
                "gaps": gaps,
                "price_levels": price_levels,
                "avg_gap": sum(g['points'] for g in gaps) / len(gaps) if gaps else 0
            }
            
        except Exception as e:
            self.log(f"‚ùå Order analysis error: {e}")
            return {"total_orders": 0, "density": 0, "gaps": []}
    
    def _calculate_distribution_factor(self, order_analysis: Dict) -> float:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì factor ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á"""
        try:
            total_orders = order_analysis.get('total_orders', 0)
            density = order_analysis.get('density', 0)
            
            if total_orders == 0:
                return 1.0
            
            # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ô‡∏≤‡πÅ‡∏ô‡πà‡∏ô
            if density > 0.5:      # ‡∏´‡∏ô‡∏≤‡πÅ‡∏ô‡πà‡∏ô‡∏°‡∏≤‡∏Å
                return 1.8         # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á 80%
            elif density > 0.3:    # ‡∏´‡∏ô‡∏≤‡πÅ‡∏ô‡πà‡∏ô‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á
                return 1.4         # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á 40%
            elif density < 0.1:    # ‡∏´‡∏ô‡∏≤‡πÅ‡∏ô‡πà‡∏ô‡∏ô‡πâ‡∏≠‡∏¢
                return 0.8         # ‡∏•‡∏î‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á 20%
            else:
                return 1.0         # ‡∏õ‡∏Å‡∏ï‡∏¥
                
        except Exception as e:
            return 1.0
    
    def _has_spacing_collision(self, current_price: float, spacing: int,
                             active_orders: List[Dict], order_type: str) -> bool:
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ spacing ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏à‡∏∞‡∏ä‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
        try:
            if not active_orders:
                return False
                
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ß‡∏≤‡∏á‡∏î‡πâ‡∏ß‡∏¢ spacing ‡∏ô‡∏µ‡πâ
            spacing_distance = spacing * self._get_point_value()
            
            if order_type.upper() == "BUY":
                target_price = current_price - spacing_distance
            else:
                target_price = current_price + spacing_distance
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ä‡∏ô‡∏Å‡∏±‡∏ö‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
            collision_info = self._check_price_collision(target_price, active_orders, order_type)
            
            return collision_info['has_collision']
            
        except Exception as e:
            return False
    
    def _check_price_collision(self, target_price: float, active_orders: List[Dict], 
                              order_type: str) -> Dict:
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ä‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞"""
        try:
            if not active_orders:
                return {"has_collision": False, "warnings": []}
            
            buffer_distance = self.params_4d.collision_buffer * self._get_point_value()
            warnings = []
            
            for order in active_orders:
                order_price = float(order.get('price', 0))
                distance = abs(target_price - order_price)
                
                if distance < buffer_distance:
                    order_type_existing = order.get('type', '')
                    warnings.append(
                        f"Too close to {order_type_existing} order at {order_price:.5f} "
                        f"(distance: {int(distance/self._get_point_value())} points)"
                    )
                    
                    return {
                        "has_collision": True,
                        "collision_price": order_price,
                        "collision_distance": distance,
                        "warnings": warnings
                    }
            
            return {"has_collision": False, "warnings": []}
            
        except Exception as e:
            return {"has_collision": False, "warnings": [f"Check error: {e}"]}
    
    def _find_alternative_placement(self, target_price: float, current_price: float,
                                  active_orders: List[Dict], spacing: int, 
                                  order_type: str) -> float:
        """‡∏´‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏î‡πÅ‡∏ó‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏ä‡∏ô"""
        try:
            # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
            order_analysis = self._analyze_existing_orders(active_orders, current_price, order_type)
            gaps = order_analysis.get('gaps', [])
            
            if not gaps:
                # ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á - ‡πÉ‡∏ä‡πâ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡∏´‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô
                spacing_distance = spacing * self._get_point_value() * 1.5  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á 50%
                
                if order_type.upper() == "BUY":
                    return current_price - spacing_distance
                else:
                    return current_price + spacing_distance
            
            # ‡∏´‡∏≤‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏´‡∏ç‡πà‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÅ‡∏•‡∏∞‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
            suitable_gaps = [g for g in gaps if g['points'] >= spacing]
            
            if suitable_gaps:
                # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏´‡∏ç‡πà‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
                best_gap = max(suitable_gaps, key=lambda x: x['size'])
                # ‡∏ß‡∏≤‡∏á‡∏ï‡∏£‡∏á‡∏Å‡∏•‡∏≤‡∏á‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á
                alternative_price = (best_gap['start'] + best_gap['end']) / 2
            else:
                # ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏° - ‡∏ß‡∏≤‡∏á‡∏ô‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á
                price_levels = order_analysis.get('price_levels', [])
                if price_levels:
                    if order_type.upper() == "BUY":
                        # ‡∏ß‡∏≤‡∏á‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤ order ‡∏ó‡∏µ‡πà‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î
                        alternative_price = min(price_levels) - (spacing * self._get_point_value())
                    else:
                        # ‡∏ß‡∏≤‡∏á‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤ order ‡∏ó‡∏µ‡πà‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
                        alternative_price = max(price_levels) + (spacing * self._get_point_value())
                else:
                    # fallback
                    spacing_distance = spacing * self._get_point_value()
                    if order_type.upper() == "BUY":
                        alternative_price = current_price - spacing_distance
                    else:
                        alternative_price = current_price + spacing_distance
            
            return alternative_price
            
        except Exception as e:
            # Fallback: ‡πÉ‡∏ä‡πâ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≤‡∏Å spacing
            spacing_distance = spacing * self._get_point_value()
            if order_type.upper() == "BUY":
                return current_price - spacing_distance
            else:
                return current_price + spacing_distance
    
    def _assess_placement_quality(self, target_price: float, current_price: float,
                                 active_orders: List[Dict], spacing_result) -> Dict:
        """‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏≤‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå"""
        try:
            if not active_orders:
                return {"quality": "EXCELLENT", "efficiency": 1.0, "reasoning": "No existing orders"}
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ö‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
            min_distance = float('inf')
            for order in active_orders:
                order_price = float(order.get('price', 0))
                distance = abs(target_price - order_price)
                min_distance = min(min_distance, distance)
            
            # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô points
            min_distance_points = int(min_distance / self._get_point_value())
            suggested_spacing = spacing_result.spacing
            
            # ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û
            if min_distance_points >= suggested_spacing * 1.5:
                quality = "EXCELLENT"
                efficiency = 1.0
            elif min_distance_points >= suggested_spacing:
                quality = "GOOD"
                efficiency = 0.8
            elif min_distance_points >= suggested_spacing * 0.7:
                quality = "MODERATE"
                efficiency = 0.6
            elif min_distance_points >= suggested_spacing * 0.5:
                quality = "FAIR"
                efficiency = 0.4
            else:
                quality = "POOR"
                efficiency = 0.2
            
            return {
                "quality": quality,
                "efficiency": efficiency,
                "min_distance_points": min_distance_points,
                "suggested_spacing": suggested_spacing,
                "reasoning": f"Min distance: {min_distance_points} points (suggested: {suggested_spacing})"
            }
            
        except Exception as e:
            return {"quality": "UNKNOWN", "efficiency": 0.5, "reasoning": f"Assessment error: {e}"}
    
    def _create_enhanced_4d_reasoning(self, four_d_score: float, trend_factor: float,
                                    volume_factor: float, session_factor: float,
                                    volatility_factor: float, opportunity_factor: float,
                                    distribution_factor: float, four_d_multiplier: float,
                                    final_spacing: int, order_count: int) -> str:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á reasoning ‡∏ó‡∏µ‡πà‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°"""
        try:
            base_reasoning = self._create_4d_reasoning(
                four_d_score, trend_factor, volume_factor, session_factor,
                volatility_factor, opportunity_factor, four_d_multiplier, final_spacing
            )
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• distribution
            distribution_info = f" | Distribution: {distribution_factor:.2f}x (from {order_count} orders)"
            enhanced_reasoning = base_reasoning + distribution_info + f" | Enhanced spacing: {final_spacing} points"
            
            return enhanced_reasoning
            
        except Exception as e:
            return f"Enhanced 4D spacing calculation (error: {e})"
    
    def _get_point_value(self) -> float:
        """‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ point value ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏õ‡∏•‡∏á points ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏≤‡∏Ñ‡∏≤"""
        # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Gold (XAUUSD) - 1 point = 0.01
        return 0.01
    
    # ========================================================================================
    # ‡πÄ‡∏Å‡πá‡∏ö METHODS ‡πÄ‡∏î‡∏¥‡∏° (‡πÑ‡∏°‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç)
    # ========================================================================================
    
    def check_placement_opportunity(self, price_level: float, current_price: float,
                                  market_analysis: Dict, order_type: str = "BUY") -> Dict:
        """‡πÄ‡∏ä‡πá‡∏Ñ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏Å‡∏≤‡∏£‡∏ß‡∏≤‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå - ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏î‡∏¥‡∏°"""
        try:
            four_d_score = market_analysis.get("market_score_4d", 0.5)
            opportunity_confidence = market_analysis.get("four_d_confidence", 0.5)
            
            distance = abs(price_level - current_price)
            relative_distance = distance / current_price * 100
            
            opportunity_score = self._assess_4d_placement_opportunity(
                price_level, current_price, market_analysis, order_type
            )
            
            market_favorability = self._evaluate_4d_market_context(
                market_analysis, order_type
            )
            
            placement_recommendation = self._make_4d_placement_decision(
                opportunity_score, market_favorability, relative_distance
            )
            
            return {
                "placement_allowed": True,  # ‡πÄ‡∏™‡∏°‡∏≠ True ‡πÉ‡∏ô 4D mode
                "opportunity_score": opportunity_score,
                "market_favorability": market_favorability,
                "recommendation": placement_recommendation,
                "four_d_confidence": opportunity_confidence,
                "relative_distance_percent": relative_distance,
                "reasoning": f"4D opportunity: {opportunity_score:.3f} | Market favor: {market_favorability:.3f} | Distance: {relative_distance:.2f}%"
            }
            
        except Exception as e:
            self.log(f"‚ùå Placement opportunity check error: {e}")
            return {"placement_allowed": True, "opportunity_score": 0.5, "reasoning": f"Error: {e}"}
    
    def _get_default_4d_spacing(self) -> Spacing4DResult:
        """‡∏î‡∏∂‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå default - ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏î‡∏¥‡∏°"""
        return Spacing4DResult(
            spacing=self.params_4d.base_spacing,
            reasoning="4D Default spacing (error recovery)",
            four_d_score=0.5,
            volatility_factor=1.0,
            trend_factor=1.0,
            session_factor=1.0,
            opportunity_factor=1.0,
            final_multiplier=1.0,
            mode_used=self.current_mode,
            placement_allowed=True,
            collision_detected=False
        )
    
    def _get_default_flexible_spacing(self, target_price: float, current_price: float) -> Dict:
        """‡∏î‡∏∂‡∏á‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô default - ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏î‡∏¥‡∏°"""
        return {
            "spacing_points": self.params_4d.base_spacing,
            "target_price": target_price,
            "is_acceptable": True,
            "placement_allowed": True,
            "collision_detected": False,
            "reasoning": "4D Default flexible spacing",
            "warnings": []
        }
    
    def _update_4d_history(self, spacing: int, four_d_score: float, reasoning: str):
        """‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì 4D - ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏î‡∏¥‡∏°"""
        try:
            history_entry = {
                "timestamp": datetime.now(),
                "spacing": spacing,
                "four_d_score": four_d_score,
                "mode": self.current_mode.value,
                "reasoning": reasoning
            }
            
            self.spacing_history_4d.append(history_entry)
            
            # Update performance metrics
            self.performance_4d["total_placements"] += 1
            self.performance_4d["average_4d_score"] = (
                (self.performance_4d["average_4d_score"] * 
                 (self.performance_4d["total_placements"] - 1) + four_d_score) /
                self.performance_4d["total_placements"]
            )
            
        except Exception as e:
            self.log(f"‚ùå 4D History update error: {e}")
    
    # ========================================================================================
    # PUBLIC INTERFACE METHODS - ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏î‡∏¥‡∏°
    # ========================================================================================
    
    def set_4d_mode(self, mode: SpacingMode):
        """‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÇ‡∏´‡∏°‡∏î 4D spacing"""
        try:
            self.current_mode = mode
            self.log(f"4D Spacing mode changed to: {mode.value}")
        except Exception as e:
            self.log(f"‚ùå 4D Mode change error: {e}")
    
    def set_grid_strategy(self, strategy: GridBuildingStrategy):
        """‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏¥‡∏î"""
        try:
            self.grid_strategy = strategy
            self.log(f"Grid building strategy changed to: {strategy.value}")
        except Exception as e:
            self.log(f"‚ùå Grid strategy change error: {e}")
    
    def get_4d_performance(self) -> Dict:
        """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û 4D"""
        try:
            if self.spacing_history_4d:
                spacings = [h["spacing"] for h in self.spacing_history_4d]
                scores = [h["four_d_score"] for h in self.spacing_history_4d]
                
                performance = {
                    **self.performance_4d,
                    "spacing_statistics": {
                        "average_spacing": round(statistics.mean(spacings), 1),
                        "min_spacing": min(spacings),
                        "max_spacing": max(spacings),
                        "spacing_std_dev": round(statistics.stdev(spacings) if len(spacings) > 1 else 0, 1)
                    },
                    "score_statistics": {
                        "average_score": round(statistics.mean(scores), 3),
                        "min_score": round(min(scores), 3),
                        "max_score": round(max(scores), 3),
                        "score_trend": self._get_4d_score_trend()
                    },
                    "current_mode": self.current_mode.value,
                    "grid_strategy": self.grid_strategy.value,
                    "collision_detection_active": True,  # ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß
                    "smart_distribution_active": True    # ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß
                }
            else:
                performance = {
                    **self.performance_4d,
                    "spacing_statistics": {"insufficient_data": True},
                    "score_statistics": {"insufficient_data": True},
                    "current_mode": self.current_mode.value,
                    "grid_strategy": self.grid_strategy.value
                }
            
            return performance
            
        except Exception as e:
            self.log(f"‚ùå 4D Performance retrieval error: {e}")
            return {"error": str(e)}
    
    def _get_4d_score_trend(self) -> str:
        """‡∏î‡∏∂‡∏á‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô 4D"""
        try:
            if len(self.spacing_history_4d) < 10:
                return "INSUFFICIENT_DATA"
            
            recent_scores = [h["four_d_score"] for h in list(self.spacing_history_4d)[-10:]]
            early_avg = statistics.mean(recent_scores[:5])
            late_avg = statistics.mean(recent_scores[5:])
            
            change_pct = (late_avg - early_avg) / early_avg * 100
            
            if change_pct > 5:
                return "IMPROVING"
            elif change_pct < -5:
                return "DECLINING"
            else:
                return "STABLE"
                
        except Exception as e:
            return "UNKNOWN"
    
    def get_placement_recommendations(self, current_price: float, 
                                   market_analysis: Dict) -> List[Dict]:
        """‡∏î‡∏∂‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏ß‡∏≤‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå 4D"""
        try:
            recommendations = []
            
            # BUY recommendations
            buy_spacing = self.calculate_4d_spacing(current_price, market_analysis, "BUY")
            buy_price = current_price - (buy_spacing.spacing * self._get_point_value())
            
            recommendations.append({
                "order_type": "BUY",
                "suggested_price": buy_price,
                "spacing": buy_spacing.spacing,
                "four_d_score": buy_spacing.four_d_score,
                "confidence": "HIGH" if buy_spacing.four_d_score > 0.7 else "MEDIUM" if buy_spacing.four_d_score > 0.4 else "LOW",
                "reasoning": buy_spacing.reasoning,
                "placement_allowed": buy_spacing.placement_allowed  # ‚úÖ ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å result
            })
            
            # SELL recommendations
            sell_spacing = self.calculate_4d_spacing(current_price, market_analysis, "SELL")
            sell_price = current_price + (sell_spacing.spacing * self._get_point_value())
            
            recommendations.append({
                "order_type": "SELL", 
                "suggested_price": sell_price,
                "spacing": sell_spacing.spacing,
                "four_d_score": sell_spacing.four_d_score,
                "confidence": "HIGH" if sell_spacing.four_d_score > 0.7 else "MEDIUM" if sell_spacing.four_d_score > 0.4 else "LOW",
                "reasoning": sell_spacing.reasoning,
                "placement_allowed": sell_spacing.placement_allowed  # ‚úÖ ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å result
            })
            
            return recommendations
            
        except Exception as e:
            self.log(f"‚ùå Placement recommendations error: {e}")
            return []
    
    def log(self, message: str):
        """Log message with timestamp"""
        timestamp = datetime.now().strftime("%H:%M:%S.%f")[:-3]
        print(f"[{timestamp}] üìè SpacingManager: {message}")

    # ========================================================================================
    # PLACEHOLDER METHODS - ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô implementation ‡∏à‡∏£‡∏¥‡∏á
    # ========================================================================================
    
    def _calculate_4d_trend_factor(self, market_analysis: Dict) -> float:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì trend factor - ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô implementation"""
        return market_analysis.get('trend_strength', 1.0)
    
    def _calculate_4d_volume_factor(self, market_analysis: Dict) -> float:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì volume factor - ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô implementation"""
        return market_analysis.get('volume_factor', 1.0)
    
    def _calculate_4d_session_factor(self, market_analysis: Dict) -> float:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì session factor - ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô implementation"""
        return market_analysis.get('session_multiplier', 1.0)
    
    def _calculate_4d_volatility_factor(self, market_analysis: Dict) -> float:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì volatility factor - ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô implementation"""
        return market_analysis.get('volatility_multiplier', 1.0)
    
    def _calculate_4d_opportunity_factor(self, four_d_score: float, 
                                       four_d_confidence: float, 
                                       market_analysis: Dict) -> float:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì opportunity factor - ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô implementation"""
        return (four_d_score + four_d_confidence) / 2
    
    def _combine_4d_factors(self, trend_factor: float, volume_factor: float,
                          session_factor: float, volatility_factor: float,
                          opportunity_factor: float) -> float:
        """‡∏£‡∏ß‡∏° 4D factors - ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô implementation"""
        return (trend_factor + volume_factor + session_factor + 
                volatility_factor + opportunity_factor) / 5
    
    def _create_4d_reasoning(self, four_d_score: float, trend_factor: float,
                           volume_factor: float, session_factor: float,
                           volatility_factor: float, opportunity_factor: float,
                           four_d_multiplier: float, final_spacing: int) -> str:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á reasoning - ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô implementation"""
        return (f"4D Score: {four_d_score:.3f} | Trend: {trend_factor:.2f} | "
                f"Volume: {volume_factor:.2f} | Session: {session_factor:.2f} | "
                f"Volatility: {volatility_factor:.2f} | Opportunity: {opportunity_factor:.2f} | "
                f"Multiplier: {four_d_multiplier:.2f} ‚Üí {final_spacing} points")
    
    def _assess_4d_placement_opportunity(self, price_level: float, current_price: float,
                                       market_analysis: Dict, order_type: str) -> float:
        """‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏Å‡∏≤‡∏£‡∏ß‡∏≤‡∏á - placeholder"""
        return 0.5
    
    def _evaluate_4d_market_context(self, market_analysis: Dict, order_type: str) -> float:
        """‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô market context - placeholder"""
        return 0.5
    
    def _make_4d_placement_decision(self, opportunity_score: float, 
                                  market_favorability: float, 
                                  relative_distance: float) -> str:
        """‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏Å‡∏≤‡∏£‡∏ß‡∏≤‡∏á - placeholder"""
        return "RECOMMENDED"


# ========================================================================================
# üß™ TEST FUNCTIONS
# ========================================================================================

# def test_enhanced_spacing_manager():
#     """Test Enhanced Spacing Manager functionality"""
#     print("üß™ Testing Enhanced Spacing Manager...")
#     print("‚úÖ Enhanced 4D Spacing Calculation with Collision Detection")
#     print("‚úÖ Smart Flexible Spacing with Alternative Placement")
#     print("‚úÖ Order Analysis and Distribution Factors")
#     print("‚úÖ Collision Avoidance and Quality Assessment")
#     print("‚úÖ Performance Tracking with Collision Metrics")
#     print("‚úÖ Ready for Production Use")

# if __name__ == "__main__":
#     test_enhanced_spacing_manager()