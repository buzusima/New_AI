"""
üîç  MT5 Multi-Installation Detector
‡πÅ‡∏Ñ‡πà‡∏´‡∏≤ MT5 ‡∏ó‡∏∏‡∏Å‡∏ï‡∏±‡∏ß ‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏´‡πâ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏≠‡∏á - ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏á‡πà‡∏≤‡∏¢ ‡πÑ‡∏°‡πà‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô
"""

import MetaTrader5 as mt5
import os
import time
import re
from datetime import datetime
import psutil
import winreg
from pathlib import Path
from dataclasses import dataclass
from typing import List, Dict, Optional

@dataclass
class MT5Installation:
    """‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• MT5 Installation ‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢‡πÜ"""
    path: str
    broker: str = "Unknown"
    executable_type: str = ""  # terminal64.exe or terminal.exe
    is_running: bool = False
    data_path: str = ""

class MT5AutoConnector:
    """
    üîç  MT5 Multi-Installation Connector
    
    ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå:
    - ‡∏´‡∏≤ MT5 ‡∏ó‡∏∏‡∏Å‡∏ï‡∏±‡∏ß‡πÉ‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á
    - ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    - ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô ‡πÑ‡∏°‡πà‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô
    """
    
    def __init__(self):
        self.is_connected = False
        self.gold_symbol = None
        self.account_info = {}
        self.symbol_info = {}
        self.selected_mt5 = None
        
        # ‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ MT5 ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏à‡∏≠
        self.available_installations: List[MT5Installation] = []
        
        # Gold symbol variations
        self.gold_symbols = [
            "XAUUSD", "GOLD", "XAU/USD", "XAUUSD.cmd", "GOLD#", 
            "XAUUSD.", "XAUUSD-", "XAU-USD", "GOLD.", "GOLD_",
            "XAUUSD.raw", "XAUUSD.ecn", "GOLDmicro", "XAUUSD.m",
            "XAUUSD_", "XAUUSD#", "XAUUSDpro", "GOLD.std"
        ]
        
    def find_all_mt5_installations(self) -> List[MT5Installation]:
        """
        üîç ‡∏´‡∏≤ MT5 ‡∏ó‡∏∏‡∏Å‡∏ï‡∏±‡∏ß‡πÉ‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á
        Returns: List ‡∏Ç‡∏≠‡∏á MT5Installation objects
        """
        installations = []
        found_paths = set()  # ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô duplicate
        
        print("üîç ‡∏´‡∏≤ MT5 ‡∏ó‡∏∏‡∏Å‡∏ï‡∏±‡∏ß‡πÉ‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á...")
        
        # Method 1: Registry
        installations.extend(self._scan_registry(found_paths))
        
        # Method 2: Common directories
        installations.extend(self._scan_common_paths(found_paths))
        
        # Method 3: Running processes
        installations.extend(self._scan_running_processes(found_paths))
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
        for installation in installations:
            installation.broker = self._detect_broker_name(installation.path)
            
        self.available_installations = installations
        
        if installations:
            print(f"‚úÖ ‡πÄ‡∏à‡∏≠ MT5 ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {len(installations)} ‡∏ï‡∏±‡∏ß")
        else:
            print("‚ùå ‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ MT5 ‡πÄ‡∏•‡∏¢")
            
        return installations
    
    def _scan_registry(self, found_paths: set) -> List[MT5Installation]:
        """‡∏™‡πÅ‡∏Å‡∏ô Registry ‡∏´‡∏≤ MT5"""
        installations = []
        
        registry_paths = [
            (winreg.HKEY_CURRENT_USER, "SOFTWARE\\MetaQuotes\\Terminal"),
            (winreg.HKEY_LOCAL_MACHINE, "SOFTWARE\\MetaQuotes\\Terminal"),
            (winreg.HKEY_CURRENT_USER, "SOFTWARE\\WOW6432Node\\MetaQuotes\\Terminal"),
            (winreg.HKEY_LOCAL_MACHINE, "SOFTWARE\\WOW6432Node\\MetaQuotes\\Terminal")
        ]
        
        for root, base_path in registry_paths:
            try:
                with winreg.OpenKey(root, base_path) as terminal_key:
                    i = 0
                    while True:
                        try:
                            subkey_name = winreg.EnumKey(terminal_key, i)
                            subkey_path = f"{base_path}\\{subkey_name}"
                            
                            with winreg.OpenKey(root, subkey_path) as installation_key:
                                try:
                                    data_path = winreg.QueryValueEx(installation_key, "DataPath")[0]
                                    exe_dir = os.path.dirname(data_path)
                                    
                                    # ‡∏´‡∏≤ executable
                                    for exe_name in ["terminal64.exe", "terminal.exe"]:
                                        exe_path = os.path.join(exe_dir, exe_name)
                                        if os.path.exists(exe_path) and exe_path not in found_paths:
                                            installation = MT5Installation(
                                                path=exe_path,
                                                data_path=data_path,
                                                executable_type=exe_name
                                            )
                                            installations.append(installation)
                                            found_paths.add(exe_path)
                                            break
                                except FileNotFoundError:
                                    pass
                                    
                            i += 1
                        except OSError:
                            break
                            
            except FileNotFoundError:
                continue
                
        return installations
    
    def _scan_common_paths(self, found_paths: set) -> List[MT5Installation]:
        """‡∏™‡πÅ‡∏Å‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ"""
        installations = []
        
        common_paths = [
            # User directories
            os.path.expanduser("~/AppData/Roaming/MetaQuotes/Terminal"),
            
            # Program Files
            "C:/Program Files/MetaTrader 5",
            "C:/Program Files (x86)/MetaTrader 5",
            "C:/Program Files/MetaQuotes/MetaTrader 5", 
            "C:/Program Files (x86)/MetaQuotes/MetaTrader 5",
            
            # Other common locations
            "D:/MetaTrader 5",
            "C:/MetaTrader5",
            "D:/MetaTrader5"
        ]
        
        for base_path in common_paths:
            if os.path.exists(base_path):
                # ‡∏•‡∏≠‡∏á‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏´‡∏•‡∏±‡∏Å
                for exe_name in ["terminal64.exe", "terminal.exe"]:
                    exe_path = os.path.join(base_path, exe_name)
                    if os.path.exists(exe_path) and exe_path not in found_paths:
                        installation = MT5Installation(
                            path=exe_path,
                            executable_type=exe_name
                        )
                        installations.append(installation)
                        found_paths.add(exe_path)
                
                # ‡∏•‡∏≠‡∏á‡πÉ‡∏ô subdirectories (broker folders)
                try:
                    for item in os.listdir(base_path):
                        item_path = os.path.join(base_path, item)
                        if os.path.isdir(item_path):
                            for exe_name in ["terminal64.exe", "terminal.exe"]:
                                exe_path = os.path.join(item_path, exe_name)
                                if os.path.exists(exe_path) and exe_path not in found_paths:
                                    installation = MT5Installation(
                                        path=exe_path,
                                        executable_type=exe_name
                                    )
                                    installations.append(installation)
                                    found_paths.add(exe_path)
                except OSError:
                    pass
                    
        return installations
    
    def _scan_running_processes(self, found_paths: set) -> List[MT5Installation]:
        """‡∏™‡πÅ‡∏Å‡∏ô‡∏à‡∏≤‡∏Å running processes"""
        installations = []
        
        try:
            for proc in psutil.process_iter(['pid', 'name', 'exe']):
                try:
                    if proc.info['name'] and 'terminal' in proc.info['name'].lower():
                        if proc.info['exe'] and proc.info['exe'] not in found_paths:
                            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô MT5 ‡∏à‡∏£‡∏¥‡∏á‡πÜ
                            if self._looks_like_mt5(proc.info['exe']):
                                installation = MT5Installation(
                                    path=proc.info['exe'],
                                    is_running=True,
                                    executable_type=os.path.basename(proc.info['exe'])
                                )
                                installations.append(installation)
                                found_paths.add(proc.info['exe'])
                except (psutil.NoSuchProcess, psutil.AccessDenied):
                    continue
        except Exception:
            pass
            
        return installations
    
    def _looks_like_mt5(self, exe_path: str) -> bool:
        """‡πÄ‡∏ä‡πá‡∏Ñ‡∏Ñ‡∏£‡πà‡∏≤‡∏ß‡πÜ ‡∏ß‡πà‡∏≤‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô MT5"""
        path_lower = exe_path.lower()
        return ('metatrader' in path_lower or 
                'terminal64' in path_lower or 
                'terminal.exe' in path_lower)
    
    def _detect_broker_name(self, exe_path: str) -> str:
        """‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠ broker ‡∏à‡∏≤‡∏Å path"""
        path_lower = exe_path.lower()
        
        # ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠ broker ‡∏ó‡∏µ‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å
        known_brokers = {
            'exness': 'Exness',
            'icmarkets': 'IC Markets', 
            'ic markets': 'IC Markets',
            'pepperstone': 'Pepperstone',
            'fxtm': 'FXTM',
            'xm': 'XM',
            'fxpro': 'FXPro',
            'avatrade': 'AvaTrade',
            'tickmill': 'Tickmill',
            'admiral': 'Admiral Markets'
        }
        
        for key, name in known_brokers.items():
            if key in path_lower:
                return name
                
        return "Unknown"
    
    def connect_to_installation(self, installation_index: int) -> bool:
        """
        ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏¢‡∏±‡∏á MT5 installation ‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
        
        Args:
            installation_index: index ‡πÉ‡∏ô available_installations list
            
        Returns:
            True ‡∏ñ‡πâ‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        """
        if installation_index < 0 or installation_index >= len(self.available_installations):
            print("‚ùå ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å installation ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
            return False
            
        installation = self.available_installations[installation_index]
        self.selected_mt5 = installation
        
        return self._attempt_connection(installation)
    
    def auto_connect(self) -> bool:
        """
        Auto-connect ‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà:
        - ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ MT5 ‡∏ï‡∏±‡∏ß‡πÄ‡∏î‡∏µ‡∏¢‡∏ß -> ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏•‡∏¢
        - ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏´‡∏•‡∏≤‡∏¢‡∏ï‡∏±‡∏ß -> ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
        """
        print("üîó ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MT5...")
        
        # ‡∏´‡∏≤ MT5 ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        installations = self.find_all_mt5_installations()
        
        if not installations:
            print("‚ùå ‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ MT5 ‡πÉ‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á")
            return False
            
        # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡πÄ‡∏î‡∏µ‡∏¢‡∏ß -> ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏•‡∏¢
        if len(installations) == 1:
            print(f"üì± ‡πÄ‡∏à‡∏≠ MT5 ‡∏ï‡∏±‡∏ß‡πÄ‡∏î‡∏µ‡∏¢‡∏ß: {installations[0].broker}")
            return self.connect_to_installation(0)
            
        # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏´‡∏•‡∏≤‡∏¢‡∏ï‡∏±‡∏ß -> ‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
        print(f"\nüìã ‡πÄ‡∏à‡∏≠ MT5 ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {len(installations)} ‡∏ï‡∏±‡∏ß:")
        for i, inst in enumerate(installations):
            status = "üü¢ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô" if inst.is_running else "‚ö´ ‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô"
            exe_type = "64-bit" if "64" in inst.executable_type else "32-bit"
            
            print(f"  {i+1}. {inst.broker} ({exe_type}) - {status}")
            print(f"     üìÅ {inst.path}")
            
        print(f"\n‚ùì ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å MT5 ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ (1-{len(installations)}):")
        print("   ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ connect_to_installation(index) ‡πÉ‡∏ô code")
        
        return False  # ‡πÉ‡∏´‡πâ user ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏≠‡∏á
    
    def _attempt_connection(self, installation: MT5Installation) -> bool:
        """‡∏•‡∏≠‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö MT5 installation"""
        try:
            print(f"üîó ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠: {installation.broker}")
            print(f"üìÅ Path: {installation.path}")
            
            # Start MT5 ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
            if not installation.is_running:
                print(f"üöÄ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏° MT5...")
                os.startfile(installation.path)
                time.sleep(5)
                
            # Initialize MT5
            if not mt5.initialize():
                print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ initialize MT5 ‡πÑ‡∏î‡πâ")
                return False
                
            # Get account info
            account_info = mt5.account_info()
            if account_info is None:
                print("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ account login")
                return False
                
            print(f"‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ account: {account_info.login}")
            print(f"üí∞ ‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô: ${account_info.balance:,.2f}")
            print(f"üè¶ ‡πÇ‡∏ö‡∏£‡∏Å‡πÄ‡∏Å‡∏≠‡∏£‡πå: {account_info.company}")
            
            # Detect gold symbol
            gold_symbol = self.detect_gold_symbol()
            if not gold_symbol:
                print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡∏ó‡∏≠‡∏á‡∏Ñ‡∏≥")
                # ‡πÑ‡∏°‡πà return False ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÄ‡∏ó‡∏£‡∏î‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏≠‡∏∑‡πà‡∏ô
                
            if gold_symbol:
                print(f"ü•á ‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡∏ó‡∏≠‡∏á‡∏Ñ‡∏≥: {gold_symbol}")
            
            # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
            self.is_connected = True
            self.account_info = {
                'login': account_info.login,
                'balance': account_info.balance,
                'equity': account_info.equity,
                'margin': account_info.margin,
                'free_margin': account_info.margin_free,
                'leverage': account_info.leverage,
                'company': account_info.company,
                'currency': account_info.currency
            }
            
            self.gold_symbol = gold_symbol
            
            return True
            
        except Exception as e:
            print(f"‚ùå ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")
            return False
    
    # === Gold Symbol Detection (‡πÉ‡∏ä‡πâ‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°) ===
    
    def detect_gold_symbol(self):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡∏ó‡∏≠‡∏á‡∏Ñ‡∏≥"""
        try:
            all_symbols = mt5.symbols_get()
            if not all_symbols:
                return None
                
            symbol_names = [symbol.name for symbol in all_symbols]
            
            # Method 1: Exact match
            for gold_sym in self.gold_symbols:
                if gold_sym in symbol_names:
                    if self.verify_gold_symbol(gold_sym):
                        return gold_sym
                        
            # Method 2: Pattern matching
            gold_patterns = [
                r'^XAU.*USD.*$',
                r'^GOLD.*$',
                r'^.*GOLD.*$',
                r'^XAU.*$'
            ]
            
            for pattern in gold_patterns:
                for symbol_name in symbol_names:
                    if re.match(pattern, symbol_name, re.IGNORECASE):
                        if self.verify_gold_symbol(symbol_name):
                            return symbol_name
                            
            return None
            
        except Exception as e:
            print(f"Error detecting gold symbol: {e}")
            return None
    
    def verify_gold_symbol(self, symbol):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡∏ó‡∏≠‡∏á‡∏Ñ‡∏≥‡∏à‡∏£‡∏¥‡∏á"""
        try:
            symbol_info = mt5.symbol_info(symbol)
            if not symbol_info:
                return False
                
            if not symbol_info.visible:
                if not mt5.symbol_select(symbol, True):
                    return False
                    
            tick = mt5.symbol_info_tick(symbol)
            if tick and tick.bid:
                price = tick.bid
                if 1000 <= price <= 5000:  # Gold price range
                    return True
                    
            return True
            
        except Exception as e:
            print(f"Error verifying gold symbol {symbol}: {e}")
            return False
    
    # === Utility Methods ===
    
    def get_installation_list(self) -> List[Dict]:
        """‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ installations ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö GUI"""
        return [
            {
                'index': i,
                'broker': inst.broker,
                'path': inst.path,
                'executable_type': inst.executable_type,
                'is_running': inst.is_running,
                'display_name': f"{inst.broker} ({'64-bit' if '64' in inst.executable_type else '32-bit'})"
            }
            for i, inst in enumerate(self.available_installations)
        ]
    
    def disconnect(self):
        """‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠"""
        try:
            if self.is_connected:
                mt5.shutdown()
                self.is_connected = False
                self.gold_symbol = None
                self.account_info = {}
                self.symbol_info = {}
                print("‚úÖ ‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
                return True
        except Exception as e:
            print(f"Error disconnecting: {e}")
            
        return False

# === Test Function ===

def test_connector():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö  Connector"""
    print("üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö  MT5 Connector...")
    print("=" * 50)
    
    connector = MT5AutoConnector()
    
    # Test 1: ‡∏´‡∏≤ installations ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    installations = connector.find_all_mt5_installations()
    
    if not installations:
        print("‚ùå ‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ MT5")
        return
        
    # Test 2: ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
    print(f"\nüìä ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ MT5 ‡∏ó‡∏µ‡πà‡πÄ‡∏à‡∏≠:")
    for i, inst in enumerate(installations):
        status = "üü¢" if inst.is_running else "‚ö´"
        exe_type = "64-bit" if "64" in inst.executable_type else "32-bit"
        print(f"  {i}: {status} {inst.broker} ({exe_type})")
        print(f"     {inst.path}")
    
    # Test 3: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å
    print(f"\nüîó ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å...")
    if connector.connect_to_installation(0):
        print("üéâ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
        print(f"   Account: {connector.account_info.get('login')}")
        print(f"   Broker: {connector.account_info.get('company')}")
        print(f"   Gold: {connector.gold_symbol}")
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
        connector.disconnect()
    else:
        print("‚ùå ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")

if __name__ == "__main__":
    test_connector()